// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/photon-storage/photon-proto/consensus (interfaces: SlasherClient)

// Package mockgen is a generated GoMock package.
package mockgen

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pbc "github.com/photon-storage/photon-proto/consensus"
	grpc "google.golang.org/grpc"
)

// MockSlasherClient is a mock of SlasherClient interface.
type MockSlasherClient struct {
	ctrl     *gomock.Controller
	recorder *MockSlasherClientMockRecorder
}

// MockSlasherClientMockRecorder is the mock recorder for MockSlasherClient.
type MockSlasherClientMockRecorder struct {
	mock *MockSlasherClient
}

// NewMockSlasherClient creates a new mock instance.
func NewMockSlasherClient(ctrl *gomock.Controller) *MockSlasherClient {
	mock := &MockSlasherClient{ctrl: ctrl}
	mock.recorder = &MockSlasherClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSlasherClient) EXPECT() *MockSlasherClientMockRecorder {
	return m.recorder
}

// HighestAttestations mocks base method.
func (m *MockSlasherClient) HighestAttestations(arg0 context.Context, arg1 *pbc.HighestAttestationRequest, arg2 ...grpc.CallOption) (*pbc.HighestAttestationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HighestAttestations", varargs...)
	ret0, _ := ret[0].(*pbc.HighestAttestationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HighestAttestations indicates an expected call of HighestAttestations.
func (mr *MockSlasherClientMockRecorder) HighestAttestations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HighestAttestations", reflect.TypeOf((*MockSlasherClient)(nil).HighestAttestations), varargs...)
}

// IsSlashableAttestation mocks base method.
func (m *MockSlasherClient) IsSlashableAttestation(arg0 context.Context, arg1 *pbc.IndexedAttestation, arg2 ...grpc.CallOption) (*pbc.AttesterSlashingResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsSlashableAttestation", varargs...)
	ret0, _ := ret[0].(*pbc.AttesterSlashingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsSlashableAttestation indicates an expected call of IsSlashableAttestation.
func (mr *MockSlasherClientMockRecorder) IsSlashableAttestation(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSlashableAttestation", reflect.TypeOf((*MockSlasherClient)(nil).IsSlashableAttestation), varargs...)
}

// IsSlashableBlock mocks base method.
func (m *MockSlasherClient) IsSlashableBlock(arg0 context.Context, arg1 *pbc.SignedBlockHeader, arg2 ...grpc.CallOption) (*pbc.ProposerSlashingResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsSlashableBlock", varargs...)
	ret0, _ := ret[0].(*pbc.ProposerSlashingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsSlashableBlock indicates an expected call of IsSlashableBlock.
func (mr *MockSlasherClientMockRecorder) IsSlashableBlock(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSlashableBlock", reflect.TypeOf((*MockSlasherClient)(nil).IsSlashableBlock), varargs...)
}

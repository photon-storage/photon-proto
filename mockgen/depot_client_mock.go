// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/photon-storage/photon-proto/depot (interfaces: DepotClient)

// Package mockgen is a generated GoMock package.
package mockgen

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pbd "github.com/photon-storage/photon-proto/depot"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockDepotClient is a mock of DepotClient interface.
type MockDepotClient struct {
	ctrl     *gomock.Controller
	recorder *MockDepotClientMockRecorder
}

// MockDepotClientMockRecorder is the mock recorder for MockDepotClient.
type MockDepotClientMockRecorder struct {
	mock *MockDepotClient
}

// NewMockDepotClient creates a new mock instance.
func NewMockDepotClient(ctrl *gomock.Controller) *MockDepotClient {
	mock := &MockDepotClient{ctrl: ctrl}
	mock.recorder = &MockDepotClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDepotClient) EXPECT() *MockDepotClientMockRecorder {
	return m.recorder
}

// DownloadChunk mocks base method.
func (m *MockDepotClient) DownloadChunk(arg0 context.Context, arg1 *pbd.DownloadChunkRequest, arg2 ...grpc.CallOption) (*pbd.DownloadChunkResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DownloadChunk", varargs...)
	ret0, _ := ret[0].(*pbd.DownloadChunkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadChunk indicates an expected call of DownloadChunk.
func (mr *MockDepotClientMockRecorder) DownloadChunk(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadChunk", reflect.TypeOf((*MockDepotClient)(nil).DownloadChunk), varargs...)
}

// ObjectStatus mocks base method.
func (m *MockDepotClient) ObjectStatus(arg0 context.Context, arg1 *pbd.ObjectStatusRequest, arg2 ...grpc.CallOption) (*pbd.ObjectStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ObjectStatus", varargs...)
	ret0, _ := ret[0].(*pbd.ObjectStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObjectStatus indicates an expected call of ObjectStatus.
func (mr *MockDepotClientMockRecorder) ObjectStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectStatus", reflect.TypeOf((*MockDepotClient)(nil).ObjectStatus), varargs...)
}

// State mocks base method.
func (m *MockDepotClient) State(arg0 context.Context, arg1 *emptypb.Empty, arg2 ...grpc.CallOption) (*pbd.StateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "State", varargs...)
	ret0, _ := ret[0].(*pbd.StateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// State indicates an expected call of State.
func (mr *MockDepotClientMockRecorder) State(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "State", reflect.TypeOf((*MockDepotClient)(nil).State), varargs...)
}

// UploadChunk mocks base method.
func (m *MockDepotClient) UploadChunk(arg0 context.Context, arg1 *pbd.UploadChunkRequest, arg2 ...grpc.CallOption) (*pbd.UploadChunkResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UploadChunk", varargs...)
	ret0, _ := ret[0].(*pbd.UploadChunkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadChunk indicates an expected call of UploadChunk.
func (mr *MockDepotClientMockRecorder) UploadChunk(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadChunk", reflect.TypeOf((*MockDepotClient)(nil).UploadChunk), varargs...)
}

// UploadInit mocks base method.
func (m *MockDepotClient) UploadInit(arg0 context.Context, arg1 *pbd.UploadInitRequest, arg2 ...grpc.CallOption) (*pbd.UploadInitResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UploadInit", varargs...)
	ret0, _ := ret[0].(*pbd.UploadInitResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadInit indicates an expected call of UploadInit.
func (mr *MockDepotClientMockRecorder) UploadInit(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadInit", reflect.TypeOf((*MockDepotClient)(nil).UploadInit), varargs...)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/photon-storage/photon-proto/consensus (interfaces: NodeClient,Node_StreamChainHeadClient,Node_StreamAttestationsClient,Node_StreamBlocksClient,Node_StreamValidatorsInfoClient,Node_StreamIndexedAttestationsClient,Node_WaitForChainStartClient,Node_WaitForActivationClient,Node_StreamDutiesClient)

// Package mockgen is a generated GoMock package.
package mockgen

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pbc "github.com/photon-storage/photon-proto/consensus"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockNodeClient is a mock of NodeClient interface.
type MockNodeClient struct {
	ctrl     *gomock.Controller
	recorder *MockNodeClientMockRecorder
}

// MockNodeClientMockRecorder is the mock recorder for MockNodeClient.
type MockNodeClientMockRecorder struct {
	mock *MockNodeClient
}

// NewMockNodeClient creates a new mock instance.
func NewMockNodeClient(ctrl *gomock.Controller) *MockNodeClient {
	mock := &MockNodeClient{ctrl: ctrl}
	mock.recorder = &MockNodeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeClient) EXPECT() *MockNodeClientMockRecorder {
	return m.recorder
}

// AttestationPool mocks base method.
func (m *MockNodeClient) AttestationPool(arg0 context.Context, arg1 *pbc.AttestationPoolRequest, arg2 ...grpc.CallOption) (*pbc.AttestationPoolResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AttestationPool", varargs...)
	ret0, _ := ret[0].(*pbc.AttestationPoolResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttestationPool indicates an expected call of AttestationPool.
func (mr *MockNodeClientMockRecorder) AttestationPool(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttestationPool", reflect.TypeOf((*MockNodeClient)(nil).AttestationPool), varargs...)
}

// AuditorStatus mocks base method.
func (m *MockNodeClient) AuditorStatus(arg0 context.Context, arg1 *pbc.AuditorStatusRequest, arg2 ...grpc.CallOption) (*pbc.AuditorStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuditorStatus", varargs...)
	ret0, _ := ret[0].(*pbc.AuditorStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuditorStatus indicates an expected call of AuditorStatus.
func (mr *MockNodeClientMockRecorder) AuditorStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuditorStatus", reflect.TypeOf((*MockNodeClient)(nil).AuditorStatus), varargs...)
}

// CheckDoppelGanger mocks base method.
func (m *MockNodeClient) CheckDoppelGanger(arg0 context.Context, arg1 *pbc.DoppelGangerRequest, arg2 ...grpc.CallOption) (*pbc.DoppelGangerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckDoppelGanger", varargs...)
	ret0, _ := ret[0].(*pbc.DoppelGangerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckDoppelGanger indicates an expected call of CheckDoppelGanger.
func (mr *MockNodeClientMockRecorder) CheckDoppelGanger(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDoppelGanger", reflect.TypeOf((*MockNodeClient)(nil).CheckDoppelGanger), varargs...)
}

// GetAccount mocks base method.
func (m *MockNodeClient) GetAccount(arg0 context.Context, arg1 *pbc.AccountRequest, arg2 ...grpc.CallOption) (*pbc.Account, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccount", varargs...)
	ret0, _ := ret[0].(*pbc.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockNodeClientMockRecorder) GetAccount(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockNodeClient)(nil).GetAccount), varargs...)
}

// GetAttestationData mocks base method.
func (m *MockNodeClient) GetAttestationData(arg0 context.Context, arg1 *pbc.AttestationDataRequest, arg2 ...grpc.CallOption) (*pbc.AttestationData, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAttestationData", varargs...)
	ret0, _ := ret[0].(*pbc.AttestationData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttestationData indicates an expected call of GetAttestationData.
func (mr *MockNodeClientMockRecorder) GetAttestationData(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttestationData", reflect.TypeOf((*MockNodeClient)(nil).GetAttestationData), varargs...)
}

// GetAuditor mocks base method.
func (m *MockNodeClient) GetAuditor(arg0 context.Context, arg1 *pbc.GetAuditorRequest, arg2 ...grpc.CallOption) (*pbc.Auditor, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAuditor", varargs...)
	ret0, _ := ret[0].(*pbc.Auditor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuditor indicates an expected call of GetAuditor.
func (mr *MockNodeClientMockRecorder) GetAuditor(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuditor", reflect.TypeOf((*MockNodeClient)(nil).GetAuditor), varargs...)
}

// GetBlock mocks base method.
func (m *MockNodeClient) GetBlock(arg0 context.Context, arg1 *pbc.BlockRequest, arg2 ...grpc.CallOption) (*pbc.Block, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlock", varargs...)
	ret0, _ := ret[0].(*pbc.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlock indicates an expected call of GetBlock.
func (mr *MockNodeClientMockRecorder) GetBlock(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlock", reflect.TypeOf((*MockNodeClient)(nil).GetBlock), varargs...)
}

// GetChainConfig mocks base method.
func (m *MockNodeClient) GetChainConfig(arg0 context.Context, arg1 *emptypb.Empty, arg2 ...grpc.CallOption) (*pbc.ChainConfig, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetChainConfig", varargs...)
	ret0, _ := ret[0].(*pbc.ChainConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChainConfig indicates an expected call of GetChainConfig.
func (mr *MockNodeClientMockRecorder) GetChainConfig(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainConfig", reflect.TypeOf((*MockNodeClient)(nil).GetChainConfig), varargs...)
}

// GetChainHead mocks base method.
func (m *MockNodeClient) GetChainHead(arg0 context.Context, arg1 *emptypb.Empty, arg2 ...grpc.CallOption) (*pbc.ChainHead, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetChainHead", varargs...)
	ret0, _ := ret[0].(*pbc.ChainHead)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChainHead indicates an expected call of GetChainHead.
func (mr *MockNodeClientMockRecorder) GetChainHead(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainHead", reflect.TypeOf((*MockNodeClient)(nil).GetChainHead), varargs...)
}

// GetDuties mocks base method.
func (m *MockNodeClient) GetDuties(arg0 context.Context, arg1 *pbc.DutiesRequest, arg2 ...grpc.CallOption) (*pbc.DutiesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDuties", varargs...)
	ret0, _ := ret[0].(*pbc.DutiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDuties indicates an expected call of GetDuties.
func (mr *MockNodeClientMockRecorder) GetDuties(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDuties", reflect.TypeOf((*MockNodeClient)(nil).GetDuties), varargs...)
}

// GetIndividualVotes mocks base method.
func (m *MockNodeClient) GetIndividualVotes(arg0 context.Context, arg1 *pbc.IndividualVotesRequest, arg2 ...grpc.CallOption) (*pbc.IndividualVotesRespond, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIndividualVotes", varargs...)
	ret0, _ := ret[0].(*pbc.IndividualVotesRespond)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIndividualVotes indicates an expected call of GetIndividualVotes.
func (mr *MockNodeClientMockRecorder) GetIndividualVotes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIndividualVotes", reflect.TypeOf((*MockNodeClient)(nil).GetIndividualVotes), varargs...)
}

// GetPoRChallenge mocks base method.
func (m *MockNodeClient) GetPoRChallenge(arg0 context.Context, arg1 *pbc.GetPoRChallengeRequest, arg2 ...grpc.CallOption) (*pbc.GetPoRChallengeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPoRChallenge", varargs...)
	ret0, _ := ret[0].(*pbc.GetPoRChallengeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPoRChallenge indicates an expected call of GetPoRChallenge.
func (mr *MockNodeClientMockRecorder) GetPoRChallenge(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPoRChallenge", reflect.TypeOf((*MockNodeClient)(nil).GetPoRChallenge), varargs...)
}

// GetStateChanges mocks base method.
func (m *MockNodeClient) GetStateChanges(arg0 context.Context, arg1 *pbc.StateChangeRequest, arg2 ...grpc.CallOption) (*pbc.StateChangeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStateChanges", varargs...)
	ret0, _ := ret[0].(*pbc.StateChangeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStateChanges indicates an expected call of GetStateChanges.
func (mr *MockNodeClientMockRecorder) GetStateChanges(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStateChanges", reflect.TypeOf((*MockNodeClient)(nil).GetStateChanges), varargs...)
}

// GetStorageContract mocks base method.
func (m *MockNodeClient) GetStorageContract(arg0 context.Context, arg1 *pbc.GetStorageContractRequest, arg2 ...grpc.CallOption) (*pbc.GetStorageContractResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStorageContract", varargs...)
	ret0, _ := ret[0].(*pbc.GetStorageContractResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageContract indicates an expected call of GetStorageContract.
func (mr *MockNodeClientMockRecorder) GetStorageContract(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageContract", reflect.TypeOf((*MockNodeClient)(nil).GetStorageContract), varargs...)
}

// GetTransaction mocks base method.
func (m *MockNodeClient) GetTransaction(arg0 context.Context, arg1 *pbc.GetTransactionRequest, arg2 ...grpc.CallOption) (*pbc.GetTransactionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTransaction", varargs...)
	ret0, _ := ret[0].(*pbc.GetTransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransaction indicates an expected call of GetTransaction.
func (mr *MockNodeClientMockRecorder) GetTransaction(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockNodeClient)(nil).GetTransaction), varargs...)
}

// GetValidator mocks base method.
func (m *MockNodeClient) GetValidator(arg0 context.Context, arg1 *pbc.GetValidatorRequest, arg2 ...grpc.CallOption) (*pbc.Validator, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetValidator", varargs...)
	ret0, _ := ret[0].(*pbc.Validator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidator indicates an expected call of GetValidator.
func (mr *MockNodeClientMockRecorder) GetValidator(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidator", reflect.TypeOf((*MockNodeClient)(nil).GetValidator), varargs...)
}

// GetValidatorActiveSetChanges mocks base method.
func (m *MockNodeClient) GetValidatorActiveSetChanges(arg0 context.Context, arg1 *pbc.GetValidatorActiveSetChangesRequest, arg2 ...grpc.CallOption) (*pbc.ActiveSetChanges, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetValidatorActiveSetChanges", varargs...)
	ret0, _ := ret[0].(*pbc.ActiveSetChanges)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorActiveSetChanges indicates an expected call of GetValidatorActiveSetChanges.
func (mr *MockNodeClientMockRecorder) GetValidatorActiveSetChanges(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorActiveSetChanges", reflect.TypeOf((*MockNodeClient)(nil).GetValidatorActiveSetChanges), varargs...)
}

// GetValidatorParticipation mocks base method.
func (m *MockNodeClient) GetValidatorParticipation(arg0 context.Context, arg1 *pbc.GetValidatorParticipationRequest, arg2 ...grpc.CallOption) (*pbc.ValidatorParticipationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetValidatorParticipation", varargs...)
	ret0, _ := ret[0].(*pbc.ValidatorParticipationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorParticipation indicates an expected call of GetValidatorParticipation.
func (mr *MockNodeClientMockRecorder) GetValidatorParticipation(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorParticipation", reflect.TypeOf((*MockNodeClient)(nil).GetValidatorParticipation), varargs...)
}

// GetValidatorPerformance mocks base method.
func (m *MockNodeClient) GetValidatorPerformance(arg0 context.Context, arg1 *pbc.ValidatorPerformanceRequest, arg2 ...grpc.CallOption) (*pbc.ValidatorPerformanceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetValidatorPerformance", varargs...)
	ret0, _ := ret[0].(*pbc.ValidatorPerformanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorPerformance indicates an expected call of GetValidatorPerformance.
func (mr *MockNodeClientMockRecorder) GetValidatorPerformance(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorPerformance", reflect.TypeOf((*MockNodeClient)(nil).GetValidatorPerformance), varargs...)
}

// GetValidatorQueue mocks base method.
func (m *MockNodeClient) GetValidatorQueue(arg0 context.Context, arg1 *emptypb.Empty, arg2 ...grpc.CallOption) (*pbc.ValidatorQueue, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetValidatorQueue", varargs...)
	ret0, _ := ret[0].(*pbc.ValidatorQueue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorQueue indicates an expected call of GetValidatorQueue.
func (mr *MockNodeClientMockRecorder) GetValidatorQueue(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorQueue", reflect.TypeOf((*MockNodeClient)(nil).GetValidatorQueue), varargs...)
}

// GetWeakSubjectivityCheckpoint mocks base method.
func (m *MockNodeClient) GetWeakSubjectivityCheckpoint(arg0 context.Context, arg1 *emptypb.Empty, arg2 ...grpc.CallOption) (*pbc.WeakSubjectivityCheckpoint, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWeakSubjectivityCheckpoint", varargs...)
	ret0, _ := ret[0].(*pbc.WeakSubjectivityCheckpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWeakSubjectivityCheckpoint indicates an expected call of GetWeakSubjectivityCheckpoint.
func (mr *MockNodeClientMockRecorder) GetWeakSubjectivityCheckpoint(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWeakSubjectivityCheckpoint", reflect.TypeOf((*MockNodeClient)(nil).GetWeakSubjectivityCheckpoint), varargs...)
}

// ListAttestations mocks base method.
func (m *MockNodeClient) ListAttestations(arg0 context.Context, arg1 *pbc.ListAttestationsRequest, arg2 ...grpc.CallOption) (*pbc.ListAttestationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAttestations", varargs...)
	ret0, _ := ret[0].(*pbc.ListAttestationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAttestations indicates an expected call of ListAttestations.
func (mr *MockNodeClientMockRecorder) ListAttestations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAttestations", reflect.TypeOf((*MockNodeClient)(nil).ListAttestations), varargs...)
}

// ListBlocks mocks base method.
func (m *MockNodeClient) ListBlocks(arg0 context.Context, arg1 *pbc.ListBlocksRequest, arg2 ...grpc.CallOption) (*pbc.ListBlocksResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBlocks", varargs...)
	ret0, _ := ret[0].(*pbc.ListBlocksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBlocks indicates an expected call of ListBlocks.
func (mr *MockNodeClientMockRecorder) ListBlocks(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBlocks", reflect.TypeOf((*MockNodeClient)(nil).ListBlocks), varargs...)
}

// ListCommittees mocks base method.
func (m *MockNodeClient) ListCommittees(arg0 context.Context, arg1 *pbc.ListCommitteesRequest, arg2 ...grpc.CallOption) (*pbc.Committees, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCommittees", varargs...)
	ret0, _ := ret[0].(*pbc.Committees)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCommittees indicates an expected call of ListCommittees.
func (mr *MockNodeClientMockRecorder) ListCommittees(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommittees", reflect.TypeOf((*MockNodeClient)(nil).ListCommittees), varargs...)
}

// ListIndexedAttestations mocks base method.
func (m *MockNodeClient) ListIndexedAttestations(arg0 context.Context, arg1 *pbc.ListIndexedAttestationsRequest, arg2 ...grpc.CallOption) (*pbc.ListIndexedAttestationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIndexedAttestations", varargs...)
	ret0, _ := ret[0].(*pbc.ListIndexedAttestationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIndexedAttestations indicates an expected call of ListIndexedAttestations.
func (mr *MockNodeClientMockRecorder) ListIndexedAttestations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIndexedAttestations", reflect.TypeOf((*MockNodeClient)(nil).ListIndexedAttestations), varargs...)
}

// ListValidatorAssignments mocks base method.
func (m *MockNodeClient) ListValidatorAssignments(arg0 context.Context, arg1 *pbc.ListValidatorAssignmentsRequest, arg2 ...grpc.CallOption) (*pbc.ValidatorAssignments, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListValidatorAssignments", varargs...)
	ret0, _ := ret[0].(*pbc.ValidatorAssignments)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListValidatorAssignments indicates an expected call of ListValidatorAssignments.
func (mr *MockNodeClientMockRecorder) ListValidatorAssignments(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListValidatorAssignments", reflect.TypeOf((*MockNodeClient)(nil).ListValidatorAssignments), varargs...)
}

// ListValidatorBalances mocks base method.
func (m *MockNodeClient) ListValidatorBalances(arg0 context.Context, arg1 *pbc.ListValidatorBalancesRequest, arg2 ...grpc.CallOption) (*pbc.ValidatorBalances, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListValidatorBalances", varargs...)
	ret0, _ := ret[0].(*pbc.ValidatorBalances)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListValidatorBalances indicates an expected call of ListValidatorBalances.
func (mr *MockNodeClientMockRecorder) ListValidatorBalances(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListValidatorBalances", reflect.TypeOf((*MockNodeClient)(nil).ListValidatorBalances), varargs...)
}

// ListValidators mocks base method.
func (m *MockNodeClient) ListValidators(arg0 context.Context, arg1 *pbc.ListValidatorsRequest, arg2 ...grpc.CallOption) (*pbc.Validators, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListValidators", varargs...)
	ret0, _ := ret[0].(*pbc.Validators)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListValidators indicates an expected call of ListValidators.
func (mr *MockNodeClientMockRecorder) ListValidators(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListValidators", reflect.TypeOf((*MockNodeClient)(nil).ListValidators), varargs...)
}

// MultipleValidatorStatus mocks base method.
func (m *MockNodeClient) MultipleValidatorStatus(arg0 context.Context, arg1 *pbc.MultipleValidatorStatusRequest, arg2 ...grpc.CallOption) (*pbc.MultipleValidatorStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MultipleValidatorStatus", varargs...)
	ret0, _ := ret[0].(*pbc.MultipleValidatorStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultipleValidatorStatus indicates an expected call of MultipleValidatorStatus.
func (mr *MockNodeClientMockRecorder) MultipleValidatorStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultipleValidatorStatus", reflect.TypeOf((*MockNodeClient)(nil).MultipleValidatorStatus), varargs...)
}

// ProposeAttestation mocks base method.
func (m *MockNodeClient) ProposeAttestation(arg0 context.Context, arg1 *pbc.Attestation, arg2 ...grpc.CallOption) (*pbc.AttestResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProposeAttestation", varargs...)
	ret0, _ := ret[0].(*pbc.AttestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProposeAttestation indicates an expected call of ProposeAttestation.
func (mr *MockNodeClientMockRecorder) ProposeAttestation(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProposeAttestation", reflect.TypeOf((*MockNodeClient)(nil).ProposeAttestation), varargs...)
}

// ProposeBlock mocks base method.
func (m *MockNodeClient) ProposeBlock(arg0 context.Context, arg1 *pbc.SignedBlock, arg2 ...grpc.CallOption) (*pbc.ProposeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProposeBlock", varargs...)
	ret0, _ := ret[0].(*pbc.ProposeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProposeBlock indicates an expected call of ProposeBlock.
func (mr *MockNodeClientMockRecorder) ProposeBlock(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProposeBlock", reflect.TypeOf((*MockNodeClient)(nil).ProposeBlock), varargs...)
}

// StreamAttestations mocks base method.
func (m *MockNodeClient) StreamAttestations(arg0 context.Context, arg1 *emptypb.Empty, arg2 ...grpc.CallOption) (pbc.Node_StreamAttestationsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StreamAttestations", varargs...)
	ret0, _ := ret[0].(pbc.Node_StreamAttestationsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamAttestations indicates an expected call of StreamAttestations.
func (mr *MockNodeClientMockRecorder) StreamAttestations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamAttestations", reflect.TypeOf((*MockNodeClient)(nil).StreamAttestations), varargs...)
}

// StreamBlocks mocks base method.
func (m *MockNodeClient) StreamBlocks(arg0 context.Context, arg1 *pbc.StreamBlocksRequest, arg2 ...grpc.CallOption) (pbc.Node_StreamBlocksClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StreamBlocks", varargs...)
	ret0, _ := ret[0].(pbc.Node_StreamBlocksClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamBlocks indicates an expected call of StreamBlocks.
func (mr *MockNodeClientMockRecorder) StreamBlocks(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamBlocks", reflect.TypeOf((*MockNodeClient)(nil).StreamBlocks), varargs...)
}

// StreamChainHead mocks base method.
func (m *MockNodeClient) StreamChainHead(arg0 context.Context, arg1 *emptypb.Empty, arg2 ...grpc.CallOption) (pbc.Node_StreamChainHeadClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StreamChainHead", varargs...)
	ret0, _ := ret[0].(pbc.Node_StreamChainHeadClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamChainHead indicates an expected call of StreamChainHead.
func (mr *MockNodeClientMockRecorder) StreamChainHead(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamChainHead", reflect.TypeOf((*MockNodeClient)(nil).StreamChainHead), varargs...)
}

// StreamDuties mocks base method.
func (m *MockNodeClient) StreamDuties(arg0 context.Context, arg1 *pbc.DutiesRequest, arg2 ...grpc.CallOption) (pbc.Node_StreamDutiesClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StreamDuties", varargs...)
	ret0, _ := ret[0].(pbc.Node_StreamDutiesClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamDuties indicates an expected call of StreamDuties.
func (mr *MockNodeClientMockRecorder) StreamDuties(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamDuties", reflect.TypeOf((*MockNodeClient)(nil).StreamDuties), varargs...)
}

// StreamIndexedAttestations mocks base method.
func (m *MockNodeClient) StreamIndexedAttestations(arg0 context.Context, arg1 *emptypb.Empty, arg2 ...grpc.CallOption) (pbc.Node_StreamIndexedAttestationsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StreamIndexedAttestations", varargs...)
	ret0, _ := ret[0].(pbc.Node_StreamIndexedAttestationsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamIndexedAttestations indicates an expected call of StreamIndexedAttestations.
func (mr *MockNodeClientMockRecorder) StreamIndexedAttestations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamIndexedAttestations", reflect.TypeOf((*MockNodeClient)(nil).StreamIndexedAttestations), varargs...)
}

// StreamValidatorsInfo mocks base method.
func (m *MockNodeClient) StreamValidatorsInfo(arg0 context.Context, arg1 ...grpc.CallOption) (pbc.Node_StreamValidatorsInfoClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StreamValidatorsInfo", varargs...)
	ret0, _ := ret[0].(pbc.Node_StreamValidatorsInfoClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamValidatorsInfo indicates an expected call of StreamValidatorsInfo.
func (mr *MockNodeClientMockRecorder) StreamValidatorsInfo(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamValidatorsInfo", reflect.TypeOf((*MockNodeClient)(nil).StreamValidatorsInfo), varargs...)
}

// SubmitAggregateSelectionProof mocks base method.
func (m *MockNodeClient) SubmitAggregateSelectionProof(arg0 context.Context, arg1 *pbc.AggregateSelectionRequest, arg2 ...grpc.CallOption) (*pbc.AggregateSelectionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubmitAggregateSelectionProof", varargs...)
	ret0, _ := ret[0].(*pbc.AggregateSelectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitAggregateSelectionProof indicates an expected call of SubmitAggregateSelectionProof.
func (mr *MockNodeClientMockRecorder) SubmitAggregateSelectionProof(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitAggregateSelectionProof", reflect.TypeOf((*MockNodeClient)(nil).SubmitAggregateSelectionProof), varargs...)
}

// SubmitAttesterSlashing mocks base method.
func (m *MockNodeClient) SubmitAttesterSlashing(arg0 context.Context, arg1 *pbc.AttesterSlashing, arg2 ...grpc.CallOption) (*pbc.SubmitSlashingResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubmitAttesterSlashing", varargs...)
	ret0, _ := ret[0].(*pbc.SubmitSlashingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitAttesterSlashing indicates an expected call of SubmitAttesterSlashing.
func (mr *MockNodeClientMockRecorder) SubmitAttesterSlashing(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitAttesterSlashing", reflect.TypeOf((*MockNodeClient)(nil).SubmitAttesterSlashing), varargs...)
}

// SubmitProposerSlashing mocks base method.
func (m *MockNodeClient) SubmitProposerSlashing(arg0 context.Context, arg1 *pbc.ProposerSlashing, arg2 ...grpc.CallOption) (*pbc.SubmitSlashingResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubmitProposerSlashing", varargs...)
	ret0, _ := ret[0].(*pbc.SubmitSlashingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitProposerSlashing indicates an expected call of SubmitProposerSlashing.
func (mr *MockNodeClientMockRecorder) SubmitProposerSlashing(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitProposerSlashing", reflect.TypeOf((*MockNodeClient)(nil).SubmitProposerSlashing), varargs...)
}

// SubmitSignedAggregateSelectionProof mocks base method.
func (m *MockNodeClient) SubmitSignedAggregateSelectionProof(arg0 context.Context, arg1 *pbc.SignedAggregateSubmitRequest, arg2 ...grpc.CallOption) (*pbc.SignedAggregateSubmitResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubmitSignedAggregateSelectionProof", varargs...)
	ret0, _ := ret[0].(*pbc.SignedAggregateSubmitResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitSignedAggregateSelectionProof indicates an expected call of SubmitSignedAggregateSelectionProof.
func (mr *MockNodeClientMockRecorder) SubmitSignedAggregateSelectionProof(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitSignedAggregateSelectionProof", reflect.TypeOf((*MockNodeClient)(nil).SubmitSignedAggregateSelectionProof), varargs...)
}

// SubmitTx mocks base method.
func (m *MockNodeClient) SubmitTx(arg0 context.Context, arg1 *pbc.SignedTransaction, arg2 ...grpc.CallOption) (*pbc.SubmitTxResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubmitTx", varargs...)
	ret0, _ := ret[0].(*pbc.SubmitTxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitTx indicates an expected call of SubmitTx.
func (mr *MockNodeClientMockRecorder) SubmitTx(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitTx", reflect.TypeOf((*MockNodeClient)(nil).SubmitTx), varargs...)
}

// SubscribeCommitteeSubnets mocks base method.
func (m *MockNodeClient) SubscribeCommitteeSubnets(arg0 context.Context, arg1 *pbc.CommitteeSubnetsSubscribeRequest, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubscribeCommitteeSubnets", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeCommitteeSubnets indicates an expected call of SubscribeCommitteeSubnets.
func (mr *MockNodeClientMockRecorder) SubscribeCommitteeSubnets(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeCommitteeSubnets", reflect.TypeOf((*MockNodeClient)(nil).SubscribeCommitteeSubnets), varargs...)
}

// ValidatorIndex mocks base method.
func (m *MockNodeClient) ValidatorIndex(arg0 context.Context, arg1 *pbc.ValidatorIndexRequest, arg2 ...grpc.CallOption) (*pbc.ValidatorIndexResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidatorIndex", varargs...)
	ret0, _ := ret[0].(*pbc.ValidatorIndexResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidatorIndex indicates an expected call of ValidatorIndex.
func (mr *MockNodeClientMockRecorder) ValidatorIndex(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatorIndex", reflect.TypeOf((*MockNodeClient)(nil).ValidatorIndex), varargs...)
}

// ValidatorStatus mocks base method.
func (m *MockNodeClient) ValidatorStatus(arg0 context.Context, arg1 *pbc.ValidatorStatusRequest, arg2 ...grpc.CallOption) (*pbc.ValidatorStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidatorStatus", varargs...)
	ret0, _ := ret[0].(*pbc.ValidatorStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidatorStatus indicates an expected call of ValidatorStatus.
func (mr *MockNodeClientMockRecorder) ValidatorStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatorStatus", reflect.TypeOf((*MockNodeClient)(nil).ValidatorStatus), varargs...)
}

// WaitForActivation mocks base method.
func (m *MockNodeClient) WaitForActivation(arg0 context.Context, arg1 *pbc.ValidatorActivationRequest, arg2 ...grpc.CallOption) (pbc.Node_WaitForActivationClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitForActivation", varargs...)
	ret0, _ := ret[0].(pbc.Node_WaitForActivationClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitForActivation indicates an expected call of WaitForActivation.
func (mr *MockNodeClientMockRecorder) WaitForActivation(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForActivation", reflect.TypeOf((*MockNodeClient)(nil).WaitForActivation), varargs...)
}

// WaitForChainStart mocks base method.
func (m *MockNodeClient) WaitForChainStart(arg0 context.Context, arg1 *emptypb.Empty, arg2 ...grpc.CallOption) (pbc.Node_WaitForChainStartClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitForChainStart", varargs...)
	ret0, _ := ret[0].(pbc.Node_WaitForChainStartClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitForChainStart indicates an expected call of WaitForChainStart.
func (mr *MockNodeClientMockRecorder) WaitForChainStart(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForChainStart", reflect.TypeOf((*MockNodeClient)(nil).WaitForChainStart), varargs...)
}

// MockNode_StreamChainHeadClient is a mock of Node_StreamChainHeadClient interface.
type MockNode_StreamChainHeadClient struct {
	ctrl     *gomock.Controller
	recorder *MockNode_StreamChainHeadClientMockRecorder
}

// MockNode_StreamChainHeadClientMockRecorder is the mock recorder for MockNode_StreamChainHeadClient.
type MockNode_StreamChainHeadClientMockRecorder struct {
	mock *MockNode_StreamChainHeadClient
}

// NewMockNode_StreamChainHeadClient creates a new mock instance.
func NewMockNode_StreamChainHeadClient(ctrl *gomock.Controller) *MockNode_StreamChainHeadClient {
	mock := &MockNode_StreamChainHeadClient{ctrl: ctrl}
	mock.recorder = &MockNode_StreamChainHeadClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNode_StreamChainHeadClient) EXPECT() *MockNode_StreamChainHeadClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockNode_StreamChainHeadClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockNode_StreamChainHeadClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockNode_StreamChainHeadClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockNode_StreamChainHeadClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockNode_StreamChainHeadClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockNode_StreamChainHeadClient)(nil).Context))
}

// Header mocks base method.
func (m *MockNode_StreamChainHeadClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockNode_StreamChainHeadClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockNode_StreamChainHeadClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockNode_StreamChainHeadClient) Recv() (*pbc.ChainHead, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*pbc.ChainHead)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockNode_StreamChainHeadClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockNode_StreamChainHeadClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockNode_StreamChainHeadClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockNode_StreamChainHeadClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockNode_StreamChainHeadClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method.
func (m *MockNode_StreamChainHeadClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockNode_StreamChainHeadClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockNode_StreamChainHeadClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockNode_StreamChainHeadClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockNode_StreamChainHeadClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockNode_StreamChainHeadClient)(nil).Trailer))
}

// MockNode_StreamAttestationsClient is a mock of Node_StreamAttestationsClient interface.
type MockNode_StreamAttestationsClient struct {
	ctrl     *gomock.Controller
	recorder *MockNode_StreamAttestationsClientMockRecorder
}

// MockNode_StreamAttestationsClientMockRecorder is the mock recorder for MockNode_StreamAttestationsClient.
type MockNode_StreamAttestationsClientMockRecorder struct {
	mock *MockNode_StreamAttestationsClient
}

// NewMockNode_StreamAttestationsClient creates a new mock instance.
func NewMockNode_StreamAttestationsClient(ctrl *gomock.Controller) *MockNode_StreamAttestationsClient {
	mock := &MockNode_StreamAttestationsClient{ctrl: ctrl}
	mock.recorder = &MockNode_StreamAttestationsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNode_StreamAttestationsClient) EXPECT() *MockNode_StreamAttestationsClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockNode_StreamAttestationsClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockNode_StreamAttestationsClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockNode_StreamAttestationsClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockNode_StreamAttestationsClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockNode_StreamAttestationsClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockNode_StreamAttestationsClient)(nil).Context))
}

// Header mocks base method.
func (m *MockNode_StreamAttestationsClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockNode_StreamAttestationsClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockNode_StreamAttestationsClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockNode_StreamAttestationsClient) Recv() (*pbc.Attestation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*pbc.Attestation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockNode_StreamAttestationsClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockNode_StreamAttestationsClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockNode_StreamAttestationsClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockNode_StreamAttestationsClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockNode_StreamAttestationsClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method.
func (m *MockNode_StreamAttestationsClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockNode_StreamAttestationsClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockNode_StreamAttestationsClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockNode_StreamAttestationsClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockNode_StreamAttestationsClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockNode_StreamAttestationsClient)(nil).Trailer))
}

// MockNode_StreamBlocksClient is a mock of Node_StreamBlocksClient interface.
type MockNode_StreamBlocksClient struct {
	ctrl     *gomock.Controller
	recorder *MockNode_StreamBlocksClientMockRecorder
}

// MockNode_StreamBlocksClientMockRecorder is the mock recorder for MockNode_StreamBlocksClient.
type MockNode_StreamBlocksClientMockRecorder struct {
	mock *MockNode_StreamBlocksClient
}

// NewMockNode_StreamBlocksClient creates a new mock instance.
func NewMockNode_StreamBlocksClient(ctrl *gomock.Controller) *MockNode_StreamBlocksClient {
	mock := &MockNode_StreamBlocksClient{ctrl: ctrl}
	mock.recorder = &MockNode_StreamBlocksClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNode_StreamBlocksClient) EXPECT() *MockNode_StreamBlocksClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockNode_StreamBlocksClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockNode_StreamBlocksClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockNode_StreamBlocksClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockNode_StreamBlocksClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockNode_StreamBlocksClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockNode_StreamBlocksClient)(nil).Context))
}

// Header mocks base method.
func (m *MockNode_StreamBlocksClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockNode_StreamBlocksClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockNode_StreamBlocksClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockNode_StreamBlocksClient) Recv() (*pbc.SignedBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*pbc.SignedBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockNode_StreamBlocksClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockNode_StreamBlocksClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockNode_StreamBlocksClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockNode_StreamBlocksClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockNode_StreamBlocksClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method.
func (m *MockNode_StreamBlocksClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockNode_StreamBlocksClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockNode_StreamBlocksClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockNode_StreamBlocksClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockNode_StreamBlocksClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockNode_StreamBlocksClient)(nil).Trailer))
}

// MockNode_StreamValidatorsInfoClient is a mock of Node_StreamValidatorsInfoClient interface.
type MockNode_StreamValidatorsInfoClient struct {
	ctrl     *gomock.Controller
	recorder *MockNode_StreamValidatorsInfoClientMockRecorder
}

// MockNode_StreamValidatorsInfoClientMockRecorder is the mock recorder for MockNode_StreamValidatorsInfoClient.
type MockNode_StreamValidatorsInfoClientMockRecorder struct {
	mock *MockNode_StreamValidatorsInfoClient
}

// NewMockNode_StreamValidatorsInfoClient creates a new mock instance.
func NewMockNode_StreamValidatorsInfoClient(ctrl *gomock.Controller) *MockNode_StreamValidatorsInfoClient {
	mock := &MockNode_StreamValidatorsInfoClient{ctrl: ctrl}
	mock.recorder = &MockNode_StreamValidatorsInfoClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNode_StreamValidatorsInfoClient) EXPECT() *MockNode_StreamValidatorsInfoClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockNode_StreamValidatorsInfoClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockNode_StreamValidatorsInfoClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockNode_StreamValidatorsInfoClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockNode_StreamValidatorsInfoClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockNode_StreamValidatorsInfoClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockNode_StreamValidatorsInfoClient)(nil).Context))
}

// Header mocks base method.
func (m *MockNode_StreamValidatorsInfoClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockNode_StreamValidatorsInfoClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockNode_StreamValidatorsInfoClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockNode_StreamValidatorsInfoClient) Recv() (*pbc.ValidatorInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*pbc.ValidatorInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockNode_StreamValidatorsInfoClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockNode_StreamValidatorsInfoClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockNode_StreamValidatorsInfoClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockNode_StreamValidatorsInfoClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockNode_StreamValidatorsInfoClient)(nil).RecvMsg), arg0)
}

// Send mocks base method.
func (m *MockNode_StreamValidatorsInfoClient) Send(arg0 *pbc.ValidatorChangeSet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockNode_StreamValidatorsInfoClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockNode_StreamValidatorsInfoClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m *MockNode_StreamValidatorsInfoClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockNode_StreamValidatorsInfoClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockNode_StreamValidatorsInfoClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockNode_StreamValidatorsInfoClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockNode_StreamValidatorsInfoClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockNode_StreamValidatorsInfoClient)(nil).Trailer))
}

// MockNode_StreamIndexedAttestationsClient is a mock of Node_StreamIndexedAttestationsClient interface.
type MockNode_StreamIndexedAttestationsClient struct {
	ctrl     *gomock.Controller
	recorder *MockNode_StreamIndexedAttestationsClientMockRecorder
}

// MockNode_StreamIndexedAttestationsClientMockRecorder is the mock recorder for MockNode_StreamIndexedAttestationsClient.
type MockNode_StreamIndexedAttestationsClientMockRecorder struct {
	mock *MockNode_StreamIndexedAttestationsClient
}

// NewMockNode_StreamIndexedAttestationsClient creates a new mock instance.
func NewMockNode_StreamIndexedAttestationsClient(ctrl *gomock.Controller) *MockNode_StreamIndexedAttestationsClient {
	mock := &MockNode_StreamIndexedAttestationsClient{ctrl: ctrl}
	mock.recorder = &MockNode_StreamIndexedAttestationsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNode_StreamIndexedAttestationsClient) EXPECT() *MockNode_StreamIndexedAttestationsClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockNode_StreamIndexedAttestationsClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockNode_StreamIndexedAttestationsClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockNode_StreamIndexedAttestationsClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockNode_StreamIndexedAttestationsClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockNode_StreamIndexedAttestationsClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockNode_StreamIndexedAttestationsClient)(nil).Context))
}

// Header mocks base method.
func (m *MockNode_StreamIndexedAttestationsClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockNode_StreamIndexedAttestationsClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockNode_StreamIndexedAttestationsClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockNode_StreamIndexedAttestationsClient) Recv() (*pbc.IndexedAttestation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*pbc.IndexedAttestation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockNode_StreamIndexedAttestationsClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockNode_StreamIndexedAttestationsClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockNode_StreamIndexedAttestationsClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockNode_StreamIndexedAttestationsClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockNode_StreamIndexedAttestationsClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method.
func (m *MockNode_StreamIndexedAttestationsClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockNode_StreamIndexedAttestationsClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockNode_StreamIndexedAttestationsClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockNode_StreamIndexedAttestationsClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockNode_StreamIndexedAttestationsClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockNode_StreamIndexedAttestationsClient)(nil).Trailer))
}

// MockNode_WaitForChainStartClient is a mock of Node_WaitForChainStartClient interface.
type MockNode_WaitForChainStartClient struct {
	ctrl     *gomock.Controller
	recorder *MockNode_WaitForChainStartClientMockRecorder
}

// MockNode_WaitForChainStartClientMockRecorder is the mock recorder for MockNode_WaitForChainStartClient.
type MockNode_WaitForChainStartClientMockRecorder struct {
	mock *MockNode_WaitForChainStartClient
}

// NewMockNode_WaitForChainStartClient creates a new mock instance.
func NewMockNode_WaitForChainStartClient(ctrl *gomock.Controller) *MockNode_WaitForChainStartClient {
	mock := &MockNode_WaitForChainStartClient{ctrl: ctrl}
	mock.recorder = &MockNode_WaitForChainStartClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNode_WaitForChainStartClient) EXPECT() *MockNode_WaitForChainStartClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockNode_WaitForChainStartClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockNode_WaitForChainStartClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockNode_WaitForChainStartClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockNode_WaitForChainStartClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockNode_WaitForChainStartClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockNode_WaitForChainStartClient)(nil).Context))
}

// Header mocks base method.
func (m *MockNode_WaitForChainStartClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockNode_WaitForChainStartClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockNode_WaitForChainStartClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockNode_WaitForChainStartClient) Recv() (*pbc.ChainStartResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*pbc.ChainStartResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockNode_WaitForChainStartClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockNode_WaitForChainStartClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockNode_WaitForChainStartClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockNode_WaitForChainStartClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockNode_WaitForChainStartClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method.
func (m *MockNode_WaitForChainStartClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockNode_WaitForChainStartClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockNode_WaitForChainStartClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockNode_WaitForChainStartClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockNode_WaitForChainStartClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockNode_WaitForChainStartClient)(nil).Trailer))
}

// MockNode_WaitForActivationClient is a mock of Node_WaitForActivationClient interface.
type MockNode_WaitForActivationClient struct {
	ctrl     *gomock.Controller
	recorder *MockNode_WaitForActivationClientMockRecorder
}

// MockNode_WaitForActivationClientMockRecorder is the mock recorder for MockNode_WaitForActivationClient.
type MockNode_WaitForActivationClientMockRecorder struct {
	mock *MockNode_WaitForActivationClient
}

// NewMockNode_WaitForActivationClient creates a new mock instance.
func NewMockNode_WaitForActivationClient(ctrl *gomock.Controller) *MockNode_WaitForActivationClient {
	mock := &MockNode_WaitForActivationClient{ctrl: ctrl}
	mock.recorder = &MockNode_WaitForActivationClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNode_WaitForActivationClient) EXPECT() *MockNode_WaitForActivationClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockNode_WaitForActivationClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockNode_WaitForActivationClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockNode_WaitForActivationClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockNode_WaitForActivationClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockNode_WaitForActivationClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockNode_WaitForActivationClient)(nil).Context))
}

// Header mocks base method.
func (m *MockNode_WaitForActivationClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockNode_WaitForActivationClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockNode_WaitForActivationClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockNode_WaitForActivationClient) Recv() (*pbc.ValidatorActivationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*pbc.ValidatorActivationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockNode_WaitForActivationClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockNode_WaitForActivationClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockNode_WaitForActivationClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockNode_WaitForActivationClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockNode_WaitForActivationClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method.
func (m *MockNode_WaitForActivationClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockNode_WaitForActivationClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockNode_WaitForActivationClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockNode_WaitForActivationClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockNode_WaitForActivationClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockNode_WaitForActivationClient)(nil).Trailer))
}

// MockNode_StreamDutiesClient is a mock of Node_StreamDutiesClient interface.
type MockNode_StreamDutiesClient struct {
	ctrl     *gomock.Controller
	recorder *MockNode_StreamDutiesClientMockRecorder
}

// MockNode_StreamDutiesClientMockRecorder is the mock recorder for MockNode_StreamDutiesClient.
type MockNode_StreamDutiesClientMockRecorder struct {
	mock *MockNode_StreamDutiesClient
}

// NewMockNode_StreamDutiesClient creates a new mock instance.
func NewMockNode_StreamDutiesClient(ctrl *gomock.Controller) *MockNode_StreamDutiesClient {
	mock := &MockNode_StreamDutiesClient{ctrl: ctrl}
	mock.recorder = &MockNode_StreamDutiesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNode_StreamDutiesClient) EXPECT() *MockNode_StreamDutiesClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockNode_StreamDutiesClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockNode_StreamDutiesClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockNode_StreamDutiesClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockNode_StreamDutiesClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockNode_StreamDutiesClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockNode_StreamDutiesClient)(nil).Context))
}

// Header mocks base method.
func (m *MockNode_StreamDutiesClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockNode_StreamDutiesClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockNode_StreamDutiesClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockNode_StreamDutiesClient) Recv() (*pbc.DutiesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*pbc.DutiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockNode_StreamDutiesClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockNode_StreamDutiesClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockNode_StreamDutiesClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockNode_StreamDutiesClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockNode_StreamDutiesClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method.
func (m *MockNode_StreamDutiesClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockNode_StreamDutiesClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockNode_StreamDutiesClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockNode_StreamDutiesClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockNode_StreamDutiesClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockNode_StreamDutiesClient)(nil).Trailer))
}

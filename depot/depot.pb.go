// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: depot/depot.proto

package pbd

import (
	context "context"
	reflect "reflect"
	sync "sync"

	consensus "github.com/photon-storage/photon-proto/consensus"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ObjectStatus int32

const (
	ObjectStatus_UPLOAD_STATUS_INVALID ObjectStatus = 0
	// Object not found by the Depot.
	ObjectStatus_NOT_FOUND ObjectStatus = 1
	// Object is still being uploaded.
	ObjectStatus_WRITABLE ObjectStatus = 2
	// Object is received and can be retrieved.
	ObjectStatus_READABLE ObjectStatus = 3
)

// Enum value maps for ObjectStatus.
var (
	ObjectStatus_name = map[int32]string{
		0: "UPLOAD_STATUS_INVALID",
		1: "NOT_FOUND",
		2: "WRITABLE",
		3: "READABLE",
	}
	ObjectStatus_value = map[string]int32{
		"UPLOAD_STATUS_INVALID": 0,
		"NOT_FOUND":             1,
		"WRITABLE":              2,
		"READABLE":              3,
	}
)

func (x ObjectStatus) Enum() *ObjectStatus {
	p := new(ObjectStatus)
	*p = x
	return p
}

func (x ObjectStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObjectStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_depot_depot_proto_enumTypes[0].Descriptor()
}

func (ObjectStatus) Type() protoreflect.EnumType {
	return &file_depot_depot_proto_enumTypes[0]
}

func (x ObjectStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObjectStatus.Descriptor instead.
func (ObjectStatus) EnumDescriptor() ([]byte, []int) {
	return file_depot_depot_proto_rawDescGZIP(), []int{0}
}

type StateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Depot's publick key.
	PublicKey []byte `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// Depot's discovery ID on the P2P network.
	DiscoveryId []byte `protobuf:"bytes,2,opt,name=discovery_id,json=discoveryId,proto3" json:"discovery_id,omitempty"`
}

func (x *StateResponse) Reset() {
	*x = StateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_depot_depot_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateResponse) ProtoMessage() {}

func (x *StateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_depot_depot_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateResponse.ProtoReflect.Descriptor instead.
func (*StateResponse) Descriptor() ([]byte, []int) {
	return file_depot_depot_proto_rawDescGZIP(), []int{0}
}

func (x *StateResponse) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *StateResponse) GetDiscoveryId() []byte {
	if x != nil {
		return x.DiscoveryId
	}
	return nil
}

type ObjectStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Merkle tree root hash of the original data.
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// The original object commit tx hash.
	// If empty, all object versions are inquiried.
	CommitTxHash []byte `protobuf:"bytes,2,opt,name=commit_tx_hash,json=commitTxHash,proto3" json:"commit_tx_hash,omitempty"`
}

func (x *ObjectStatusRequest) Reset() {
	*x = ObjectStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_depot_depot_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectStatusRequest) ProtoMessage() {}

func (x *ObjectStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_depot_depot_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectStatusRequest.ProtoReflect.Descriptor instead.
func (*ObjectStatusRequest) Descriptor() ([]byte, []int) {
	return file_depot_depot_proto_rawDescGZIP(), []int{1}
}

func (x *ObjectStatusRequest) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *ObjectStatusRequest) GetCommitTxHash() []byte {
	if x != nil {
		return x.CommitTxHash
	}
	return nil
}

// BitSet presents a bit vector.
type BitSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of valid bits in the byte array.
	Len uint32 `protobuf:"varint,1,opt,name=len,proto3" json:"len,omitempty"`
	// Bitvector byte array.
	Vec []uint64 `protobuf:"varint,2,rep,packed,name=vec,proto3" json:"vec,omitempty"`
}

func (x *BitSet) Reset() {
	*x = BitSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_depot_depot_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BitSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BitSet) ProtoMessage() {}

func (x *BitSet) ProtoReflect() protoreflect.Message {
	mi := &file_depot_depot_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BitSet.ProtoReflect.Descriptor instead.
func (*BitSet) Descriptor() ([]byte, []int) {
	return file_depot_depot_proto_rawDescGZIP(), []int{2}
}

func (x *BitSet) GetLen() uint32 {
	if x != nil {
		return x.Len
	}
	return 0
}

func (x *BitSet) GetVec() []uint64 {
	if x != nil {
		return x.Vec
	}
	return nil
}

type ObjectStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Object status.
	Status ObjectStatus `protobuf:"varint,1,opt,name=status,proto3,enum=photon.depot.ObjectStatus" json:"status,omitempty"`
	// Object's owner's publick key.
	Owner []byte `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// Object's auditor's publick key.
	Auditor []byte `protobuf:"bytes,3,opt,name=auditor,proto3" json:"auditor,omitempty"`
	// The original object commit tx hash.
	CommitTxHash []byte `protobuf:"bytes,4,opt,name=commit_tx_hash,json=commitTxHash,proto3" json:"commit_tx_hash,omitempty"`
	// Object decoder defines how to decode object data.
	Decoder []byte `protobuf:"bytes,5,opt,name=decoder,proto3" json:"decoder,omitempty"`
	// The Merkle tree root hash of the original data.
	Hash []byte `protobuf:"bytes,6,opt,name=hash,proto3" json:"hash,omitempty"`
	// Encoded object data hash.
	EncodedHash []byte `protobuf:"bytes,7,opt,name=encoded_hash,json=encodedHash,proto3" json:"encoded_hash,omitempty"`
	// Original data size.
	Size uint64 `protobuf:"varint,8,opt,name=size,proto3" json:"size,omitempty"`
	// Encoded data size.
	EncodedSize uint64 `protobuf:"varint,9,opt,name=encoded_size,json=encodedSize,proto3" json:"encoded_size,omitempty"`
	// Total number of blocks for the object.
	NumBlocks uint32 `protobuf:"varint,10,opt,name=num_blocks,json=numBlocks,proto3" json:"num_blocks,omitempty"`
	// Number of sectors per block.
	SectorsPerBlock uint32 `protobuf:"varint,11,opt,name=sectors_per_block,json=sectorsPerBlock,proto3" json:"sectors_per_block,omitempty"`
	// Number of sectors per block.
	BlocksPerChunk uint32 `protobuf:"varint,12,opt,name=blocks_per_chunk,json=blocksPerChunk,proto3" json:"blocks_per_chunk,omitempty"`
	// Total number of chunks for the objet.
	NumChunks uint32 `protobuf:"varint,13,opt,name=num_chunks,json=numChunks,proto3" json:"num_chunks,omitempty"`
	// optional IPFS CID if published.
	Cid []byte `protobuf:"bytes,14,opt,name=cid,proto3" json:"cid,omitempty"`
	// BitSet of chunks indicates availability in the Depot.
	// Only valid for an active upload.
	Received *BitSet `protobuf:"bytes,15,opt,name=received,proto3" json:"received,omitempty"`
}

func (x *ObjectStatusResponse) Reset() {
	*x = ObjectStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_depot_depot_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectStatusResponse) ProtoMessage() {}

func (x *ObjectStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_depot_depot_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectStatusResponse.ProtoReflect.Descriptor instead.
func (*ObjectStatusResponse) Descriptor() ([]byte, []int) {
	return file_depot_depot_proto_rawDescGZIP(), []int{3}
}

func (x *ObjectStatusResponse) GetStatus() ObjectStatus {
	if x != nil {
		return x.Status
	}
	return ObjectStatus_UPLOAD_STATUS_INVALID
}

func (x *ObjectStatusResponse) GetOwner() []byte {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *ObjectStatusResponse) GetAuditor() []byte {
	if x != nil {
		return x.Auditor
	}
	return nil
}

func (x *ObjectStatusResponse) GetCommitTxHash() []byte {
	if x != nil {
		return x.CommitTxHash
	}
	return nil
}

func (x *ObjectStatusResponse) GetDecoder() []byte {
	if x != nil {
		return x.Decoder
	}
	return nil
}

func (x *ObjectStatusResponse) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *ObjectStatusResponse) GetEncodedHash() []byte {
	if x != nil {
		return x.EncodedHash
	}
	return nil
}

func (x *ObjectStatusResponse) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ObjectStatusResponse) GetEncodedSize() uint64 {
	if x != nil {
		return x.EncodedSize
	}
	return 0
}

func (x *ObjectStatusResponse) GetNumBlocks() uint32 {
	if x != nil {
		return x.NumBlocks
	}
	return 0
}

func (x *ObjectStatusResponse) GetSectorsPerBlock() uint32 {
	if x != nil {
		return x.SectorsPerBlock
	}
	return 0
}

func (x *ObjectStatusResponse) GetBlocksPerChunk() uint32 {
	if x != nil {
		return x.BlocksPerChunk
	}
	return 0
}

func (x *ObjectStatusResponse) GetNumChunks() uint32 {
	if x != nil {
		return x.NumChunks
	}
	return 0
}

func (x *ObjectStatusResponse) GetCid() []byte {
	if x != nil {
		return x.Cid
	}
	return nil
}

func (x *ObjectStatusResponse) GetReceived() *BitSet {
	if x != nil {
		return x.Received
	}
	return nil
}

type UploadInitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Proposed OBJECT_COMMIT/OBJECT_AUDIT transaction which contains storage
	// contract details.
	SignedTx *consensus.SignedTransaction `protobuf:"bytes,1,opt,name=signed_tx,json=signedTx,proto3" json:"signed_tx,omitempty"`
	// Tx signature signed by the TxDataObjectCommit.owner or
	// TxDataObjectAudit.auditor.
	InitiatorSignature []byte `protobuf:"bytes,2,opt,name=initiator_signature,json=initiatorSignature,proto3" json:"initiator_signature,omitempty"`
	// Tx signature signed by the Transaction.from.
	FromSignature []byte `protobuf:"bytes,3,opt,name=from_signature,json=fromSignature,proto3" json:"from_signature,omitempty"`
}

func (x *UploadInitRequest) Reset() {
	*x = UploadInitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_depot_depot_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadInitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadInitRequest) ProtoMessage() {}

func (x *UploadInitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_depot_depot_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadInitRequest.ProtoReflect.Descriptor instead.
func (*UploadInitRequest) Descriptor() ([]byte, []int) {
	return file_depot_depot_proto_rawDescGZIP(), []int{4}
}

func (x *UploadInitRequest) GetSignedTx() *consensus.SignedTransaction {
	if x != nil {
		return x.SignedTx
	}
	return nil
}

func (x *UploadInitRequest) GetInitiatorSignature() []byte {
	if x != nil {
		return x.InitiatorSignature
	}
	return nil
}

func (x *UploadInitRequest) GetFromSignature() []byte {
	if x != nil {
		return x.FromSignature
	}
	return nil
}

type UploadInitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Fixed number of sectors for each block.
	SectorsPerBlock uint32 `protobuf:"varint,1,opt,name=sectors_per_block,json=sectorsPerBlock,proto3" json:"sectors_per_block,omitempty"`
	// Fixed number of blocks for each uploaded chunk, except the last chunk
	// can have a smaller number.
	BlocksPerChunk uint32 `protobuf:"varint,2,opt,name=blocks_per_chunk,json=blocksPerChunk,proto3" json:"blocks_per_chunk,omitempty"`
}

func (x *UploadInitResponse) Reset() {
	*x = UploadInitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_depot_depot_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadInitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadInitResponse) ProtoMessage() {}

func (x *UploadInitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_depot_depot_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadInitResponse.ProtoReflect.Descriptor instead.
func (*UploadInitResponse) Descriptor() ([]byte, []int) {
	return file_depot_depot_proto_rawDescGZIP(), []int{5}
}

func (x *UploadInitResponse) GetSectorsPerBlock() uint32 {
	if x != nil {
		return x.SectorsPerBlock
	}
	return 0
}

func (x *UploadInitResponse) GetBlocksPerChunk() uint32 {
	if x != nil {
		return x.BlocksPerChunk
	}
	return 0
}

type UploadChunkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Chunk data.
	Chunk *Chunk `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
}

func (x *UploadChunkRequest) Reset() {
	*x = UploadChunkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_depot_depot_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChunkRequest) ProtoMessage() {}

func (x *UploadChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_depot_depot_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChunkRequest.ProtoReflect.Descriptor instead.
func (*UploadChunkRequest) Descriptor() ([]byte, []int) {
	return file_depot_depot_proto_rawDescGZIP(), []int{6}
}

func (x *UploadChunkRequest) GetChunk() *Chunk {
	if x != nil {
		return x.Chunk
	}
	return nil
}

type UploadChunkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of chunks received and stored.
	ReceivedChunks uint32 `protobuf:"varint,1,opt,name=received_chunks,json=receivedChunks,proto3" json:"received_chunks,omitempty"`
	// If not empty, returns the tx hash just submitted on chain.
	TxHash []byte `protobuf:"bytes,2,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
}

func (x *UploadChunkResponse) Reset() {
	*x = UploadChunkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_depot_depot_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChunkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChunkResponse) ProtoMessage() {}

func (x *UploadChunkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_depot_depot_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChunkResponse.ProtoReflect.Descriptor instead.
func (*UploadChunkResponse) Descriptor() ([]byte, []int) {
	return file_depot_depot_proto_rawDescGZIP(), []int{7}
}

func (x *UploadChunkResponse) GetReceivedChunks() uint32 {
	if x != nil {
		return x.ReceivedChunks
	}
	return 0
}

func (x *UploadChunkResponse) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

type DownloadChunkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Merkle tree root hash of the original data.
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// Original object commit tx hash.
	CommitTxHash []byte `protobuf:"bytes,2,opt,name=commit_tx_hash,json=commitTxHash,proto3" json:"commit_tx_hash,omitempty"`
	// Chunk Index.
	Index uint32 `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *DownloadChunkRequest) Reset() {
	*x = DownloadChunkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_depot_depot_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadChunkRequest) ProtoMessage() {}

func (x *DownloadChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_depot_depot_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadChunkRequest.ProtoReflect.Descriptor instead.
func (*DownloadChunkRequest) Descriptor() ([]byte, []int) {
	return file_depot_depot_proto_rawDescGZIP(), []int{8}
}

func (x *DownloadChunkRequest) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *DownloadChunkRequest) GetCommitTxHash() []byte {
	if x != nil {
		return x.CommitTxHash
	}
	return nil
}

func (x *DownloadChunkRequest) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type DownloadChunkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Chunk data.
	Chunk *Chunk `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
}

func (x *DownloadChunkResponse) Reset() {
	*x = DownloadChunkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_depot_depot_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadChunkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadChunkResponse) ProtoMessage() {}

func (x *DownloadChunkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_depot_depot_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadChunkResponse.ProtoReflect.Descriptor instead.
func (*DownloadChunkResponse) Descriptor() ([]byte, []int) {
	return file_depot_depot_proto_rawDescGZIP(), []int{9}
}

func (x *DownloadChunkResponse) GetChunk() *Chunk {
	if x != nil {
		return x.Chunk
	}
	return nil
}

var File_depot_depot_proto protoreflect.FileDescriptor

var file_depot_depot_proto_rawDesc = []byte{
	0x0a, 0x11, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x2f, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6f,
	0x74, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x64, 0x65, 0x70, 0x6f, 0x74,
	0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x51, 0x0a,
	0x0d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x49, 0x64,
	0x22, 0x4f, 0x0a, 0x13, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x24, 0x0a, 0x0e, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x78, 0x48, 0x61, 0x73,
	0x68, 0x22, 0x2c, 0x0a, 0x06, 0x42, 0x69, 0x74, 0x53, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x76, 0x65, 0x63, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x03, 0x76, 0x65, 0x63, 0x22,
	0x80, 0x04, 0x0a, 0x14, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f,
	0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x0e,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x78, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x65,
	0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x75,
	0x6d, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x6e, 0x75, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x50, 0x65, 0x72,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x50, 0x65, 0x72, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12,
	0x1d, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x63, 0x69, 0x64,
	0x12, 0x30, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6f,
	0x74, 0x2e, 0x42, 0x69, 0x74, 0x53, 0x65, 0x74, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x22, 0xad, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x5f, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x68,
	0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x78, 0x12, 0x2f, 0x0a, 0x13, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74,
	0x6f, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x22, 0x6a, 0x0a, 0x12, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x69, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x50, 0x65, 0x72, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x50, 0x65, 0x72, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0x3f,
	0x0a, 0x12, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x64, 0x65, 0x70,
	0x6f, 0x74, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x22,
	0x57, 0x0a, 0x13, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x22, 0x66, 0x0a, 0x14, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x74,
	0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x22, 0x42, 0x0a, 0x15, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f,
	0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x05, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x2a, 0x54, 0x0a, 0x0c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x57, 0x52, 0x49, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08,
	0x52, 0x45, 0x41, 0x44, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x32, 0xcd, 0x04, 0x0a, 0x05, 0x44,
	0x65, 0x70, 0x6f, 0x74, 0x12, 0x59, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x64,
	0x65, 0x70, 0x6f, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x70, 0x68, 0x6f,
	0x74, 0x6f, 0x6e, 0x2f, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x7a, 0x0a, 0x0c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x21, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6f,
	0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b,
	0x2f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2f, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x2f, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x75, 0x0a, 0x0a, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x1f, 0x2e, 0x70, 0x68, 0x6f, 0x74,
	0x6f, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49,
	0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x68, 0x6f,
	0x74, 0x6f, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19, 0x2f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2f, 0x64, 0x65,
	0x70, 0x6f, 0x74, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x3a,
	0x01, 0x2a, 0x12, 0x76, 0x0a, 0x0b, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x12, 0x20, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x74,
	0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x64, 0x65, 0x70,
	0x6f, 0x74, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a,
	0x2f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2f, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x2f, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x7e, 0x0a, 0x0d, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x22, 0x2e, 0x70, 0x68,
	0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x2e, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x70,
	0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2f, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x2f, 0x64, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x42, 0x86, 0x01, 0x0a, 0x1a, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x42, 0x0a, 0x44, 0x65, 0x70, 0x6f, 0x74,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x64, 0x65, 0x70, 0x6f, 0x74, 0x3b, 0x70, 0x62, 0x64, 0xaa, 0x02, 0x12, 0x70, 0x68, 0x6f, 0x74,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x65, 0x70, 0x6f, 0x74, 0xca, 0x02,
	0x12, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x5c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5c, 0x64, 0x65,
	0x70, 0x6f, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_depot_depot_proto_rawDescOnce sync.Once
	file_depot_depot_proto_rawDescData = file_depot_depot_proto_rawDesc
)

func file_depot_depot_proto_rawDescGZIP() []byte {
	file_depot_depot_proto_rawDescOnce.Do(func() {
		file_depot_depot_proto_rawDescData = protoimpl.X.CompressGZIP(file_depot_depot_proto_rawDescData)
	})
	return file_depot_depot_proto_rawDescData
}

var file_depot_depot_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_depot_depot_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_depot_depot_proto_goTypes = []interface{}{
	(ObjectStatus)(0),                   // 0: photon.depot.ObjectStatus
	(*StateResponse)(nil),               // 1: photon.depot.StateResponse
	(*ObjectStatusRequest)(nil),         // 2: photon.depot.ObjectStatusRequest
	(*BitSet)(nil),                      // 3: photon.depot.BitSet
	(*ObjectStatusResponse)(nil),        // 4: photon.depot.ObjectStatusResponse
	(*UploadInitRequest)(nil),           // 5: photon.depot.UploadInitRequest
	(*UploadInitResponse)(nil),          // 6: photon.depot.UploadInitResponse
	(*UploadChunkRequest)(nil),          // 7: photon.depot.UploadChunkRequest
	(*UploadChunkResponse)(nil),         // 8: photon.depot.UploadChunkResponse
	(*DownloadChunkRequest)(nil),        // 9: photon.depot.DownloadChunkRequest
	(*DownloadChunkResponse)(nil),       // 10: photon.depot.DownloadChunkResponse
	(*consensus.SignedTransaction)(nil), // 11: photon.consensus.SignedTransaction
	(*Chunk)(nil),                       // 12: photon.depot.Chunk
	(*emptypb.Empty)(nil),               // 13: google.protobuf.Empty
}
var file_depot_depot_proto_depIdxs = []int32{
	0,  // 0: photon.depot.ObjectStatusResponse.status:type_name -> photon.depot.ObjectStatus
	3,  // 1: photon.depot.ObjectStatusResponse.received:type_name -> photon.depot.BitSet
	11, // 2: photon.depot.UploadInitRequest.signed_tx:type_name -> photon.consensus.SignedTransaction
	12, // 3: photon.depot.UploadChunkRequest.chunk:type_name -> photon.depot.Chunk
	12, // 4: photon.depot.DownloadChunkResponse.chunk:type_name -> photon.depot.Chunk
	13, // 5: photon.depot.Depot.State:input_type -> google.protobuf.Empty
	2,  // 6: photon.depot.Depot.ObjectStatus:input_type -> photon.depot.ObjectStatusRequest
	5,  // 7: photon.depot.Depot.UploadInit:input_type -> photon.depot.UploadInitRequest
	7,  // 8: photon.depot.Depot.UploadChunk:input_type -> photon.depot.UploadChunkRequest
	9,  // 9: photon.depot.Depot.DownloadChunk:input_type -> photon.depot.DownloadChunkRequest
	1,  // 10: photon.depot.Depot.State:output_type -> photon.depot.StateResponse
	4,  // 11: photon.depot.Depot.ObjectStatus:output_type -> photon.depot.ObjectStatusResponse
	6,  // 12: photon.depot.Depot.UploadInit:output_type -> photon.depot.UploadInitResponse
	8,  // 13: photon.depot.Depot.UploadChunk:output_type -> photon.depot.UploadChunkResponse
	10, // 14: photon.depot.Depot.DownloadChunk:output_type -> photon.depot.DownloadChunkResponse
	10, // [10:15] is the sub-list for method output_type
	5,  // [5:10] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_depot_depot_proto_init() }
func file_depot_depot_proto_init() {
	if File_depot_depot_proto != nil {
		return
	}
	file_depot_object_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_depot_depot_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_depot_depot_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_depot_depot_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BitSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_depot_depot_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_depot_depot_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadInitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_depot_depot_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadInitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_depot_depot_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChunkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_depot_depot_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChunkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_depot_depot_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadChunkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_depot_depot_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadChunkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_depot_depot_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_depot_depot_proto_goTypes,
		DependencyIndexes: file_depot_depot_proto_depIdxs,
		EnumInfos:         file_depot_depot_proto_enumTypes,
		MessageInfos:      file_depot_depot_proto_msgTypes,
	}.Build()
	File_depot_depot_proto = out.File
	file_depot_depot_proto_rawDesc = nil
	file_depot_depot_proto_goTypes = nil
	file_depot_depot_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DepotClient is the client API for Depot service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DepotClient interface {
	// Inquery for depot state.
	//
	// The API is used for client to fetch depot state such as public key,
	// discovery ID, etc, which are needed for sealing the transaction.
	State(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StateResponse, error)
	// Inquiry for object status.
	//
	// The API is used for client to synchronize with Depot on the latest
	// object status. It can be used to synchronize progress when resuming
	// from a previous client/server failure.
	ObjectStatus(ctx context.Context, in *ObjectStatusRequest, opts ...grpc.CallOption) (*ObjectStatusResponse, error)
	// Initiate an object update.
	//
	// The request includes a signed transaction needs to be broadcasted by
	// the Depot upon successful data upload. The signed transaction contains
	// object storage requirement and fees proposed by the client. If the Depot
	// is willing to take the storage contract proposal, an ACCEPTED status is
	// returned and the client can proceed to update data chunks. Otherwise,
	// a REJECTED status is returned.
	UploadInit(ctx context.Context, in *UploadInitRequest, opts ...grpc.CallOption) (*UploadInitResponse, error)
	// Upload a data chunk for a previously initiated object upload.
	//
	// Besides the chunk data, the request also contains object hash, merkle
	// tree proof for verification purpose. Upon chunk acceptence, an ACCEPTED
	// status is returned.
	UploadChunk(ctx context.Context, in *UploadChunkRequest, opts ...grpc.CallOption) (*UploadChunkResponse, error)
	// Download a data chunk from a previously uploaded object.
	DownloadChunk(ctx context.Context, in *DownloadChunkRequest, opts ...grpc.CallOption) (*DownloadChunkResponse, error)
}

type depotClient struct {
	cc grpc.ClientConnInterface
}

func NewDepotClient(cc grpc.ClientConnInterface) DepotClient {
	return &depotClient{cc}
}

func (c *depotClient) State(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StateResponse, error) {
	out := new(StateResponse)
	err := c.cc.Invoke(ctx, "/photon.depot.Depot/State", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depotClient) ObjectStatus(ctx context.Context, in *ObjectStatusRequest, opts ...grpc.CallOption) (*ObjectStatusResponse, error) {
	out := new(ObjectStatusResponse)
	err := c.cc.Invoke(ctx, "/photon.depot.Depot/ObjectStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depotClient) UploadInit(ctx context.Context, in *UploadInitRequest, opts ...grpc.CallOption) (*UploadInitResponse, error) {
	out := new(UploadInitResponse)
	err := c.cc.Invoke(ctx, "/photon.depot.Depot/UploadInit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depotClient) UploadChunk(ctx context.Context, in *UploadChunkRequest, opts ...grpc.CallOption) (*UploadChunkResponse, error) {
	out := new(UploadChunkResponse)
	err := c.cc.Invoke(ctx, "/photon.depot.Depot/UploadChunk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depotClient) DownloadChunk(ctx context.Context, in *DownloadChunkRequest, opts ...grpc.CallOption) (*DownloadChunkResponse, error) {
	out := new(DownloadChunkResponse)
	err := c.cc.Invoke(ctx, "/photon.depot.Depot/DownloadChunk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DepotServer is the server API for Depot service.
type DepotServer interface {
	// Inquery for depot state.
	//
	// The API is used for client to fetch depot state such as public key,
	// discovery ID, etc, which are needed for sealing the transaction.
	State(context.Context, *emptypb.Empty) (*StateResponse, error)
	// Inquiry for object status.
	//
	// The API is used for client to synchronize with Depot on the latest
	// object status. It can be used to synchronize progress when resuming
	// from a previous client/server failure.
	ObjectStatus(context.Context, *ObjectStatusRequest) (*ObjectStatusResponse, error)
	// Initiate an object update.
	//
	// The request includes a signed transaction needs to be broadcasted by
	// the Depot upon successful data upload. The signed transaction contains
	// object storage requirement and fees proposed by the client. If the Depot
	// is willing to take the storage contract proposal, an ACCEPTED status is
	// returned and the client can proceed to update data chunks. Otherwise,
	// a REJECTED status is returned.
	UploadInit(context.Context, *UploadInitRequest) (*UploadInitResponse, error)
	// Upload a data chunk for a previously initiated object upload.
	//
	// Besides the chunk data, the request also contains object hash, merkle
	// tree proof for verification purpose. Upon chunk acceptence, an ACCEPTED
	// status is returned.
	UploadChunk(context.Context, *UploadChunkRequest) (*UploadChunkResponse, error)
	// Download a data chunk from a previously uploaded object.
	DownloadChunk(context.Context, *DownloadChunkRequest) (*DownloadChunkResponse, error)
}

// UnimplementedDepotServer can be embedded to have forward compatible implementations.
type UnimplementedDepotServer struct {
}

func (*UnimplementedDepotServer) State(context.Context, *emptypb.Empty) (*StateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method State not implemented")
}
func (*UnimplementedDepotServer) ObjectStatus(context.Context, *ObjectStatusRequest) (*ObjectStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObjectStatus not implemented")
}
func (*UnimplementedDepotServer) UploadInit(context.Context, *UploadInitRequest) (*UploadInitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadInit not implemented")
}
func (*UnimplementedDepotServer) UploadChunk(context.Context, *UploadChunkRequest) (*UploadChunkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadChunk not implemented")
}
func (*UnimplementedDepotServer) DownloadChunk(context.Context, *DownloadChunkRequest) (*DownloadChunkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadChunk not implemented")
}

func RegisterDepotServer(s *grpc.Server, srv DepotServer) {
	s.RegisterService(&_Depot_serviceDesc, srv)
}

func _Depot_State_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepotServer).State(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photon.depot.Depot/State",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepotServer).State(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Depot_ObjectStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepotServer).ObjectStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photon.depot.Depot/ObjectStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepotServer).ObjectStatus(ctx, req.(*ObjectStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Depot_UploadInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadInitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepotServer).UploadInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photon.depot.Depot/UploadInit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepotServer).UploadInit(ctx, req.(*UploadInitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Depot_UploadChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepotServer).UploadChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photon.depot.Depot/UploadChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepotServer).UploadChunk(ctx, req.(*UploadChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Depot_DownloadChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepotServer).DownloadChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photon.depot.Depot/DownloadChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepotServer).DownloadChunk(ctx, req.(*DownloadChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Depot_serviceDesc = grpc.ServiceDesc{
	ServiceName: "photon.depot.Depot",
	HandlerType: (*DepotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "State",
			Handler:    _Depot_State_Handler,
		},
		{
			MethodName: "ObjectStatus",
			Handler:    _Depot_ObjectStatus_Handler,
		},
		{
			MethodName: "UploadInit",
			Handler:    _Depot_UploadInit_Handler,
		},
		{
			MethodName: "UploadChunk",
			Handler:    _Depot_UploadChunk_Handler,
		},
		{
			MethodName: "DownloadChunk",
			Handler:    _Depot_DownloadChunk_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "depot/depot.proto",
}

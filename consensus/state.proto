syntax = "proto3";

package photon.consensus;

import "ext/options.proto";
import "consensus/attestation.proto";
import "consensus/block.proto";

option csharp_namespace = "photon.proto.consensus";
option go_package = "github.com/photon-storage/photon-proto/consensus;pbc";
option java_multiple_files = true;
option java_outer_classname = "StateProto";
option java_package = "storage.photon.proto.consensus";
option php_namespace = "photon\\proto\\consensus";


message State {
    // Versioning [1-100]
    uint64 genesis_time = 1;
    bytes genesis_identifier = 2 [(photon.ext.ssz_size) = "32"];
    uint64 slot = 3 [(photon.ext.cast_type) = "Slot"];

    // Block [101-200]
    BlockHeader latest_block_header = 101;

    // Finality [201-300]
    // Spec type [4]Bitvector which means this would be a fixed size of 4 bits.
    bytes justification_bits = 201 [(photon.ext.ssz_size) = "1", (photon.ext.cast_type) = "github.com/prysmaticlabs/go-bitfield.Bitvector4"];
    Checkpoint previous_justified_checkpoint = 202;
    Checkpoint current_justified_checkpoint = 203;
    Checkpoint finalized_checkpoint = 204;

    // Validator participation & slashings [301-400]
    repeated uint64 inactivity_scores = 302 [(photon.ext.ssz_max) = "1099511627776"];
    bytes previous_epoch_participation = 303 [(photon.ext.ssz_max) = "1099511627776"];
    bytes current_epoch_participation = 304 [(photon.ext.ssz_max) = "1099511627776"];
    repeated uint64 slashings = 305 [(photon.ext.ssz_max) = "8192"];

    // Trie roots [401-500]
    // Account trie root hash.
    bytes account_trie_root = 401 [(photon.ext.ssz_size) = "32"];
    // Validator trie root hash.
    bytes validator_trie_root = 402 [(photon.ext.ssz_size) = "32"];
    // Auditor trie root hash.
    bytes auditor_trie_root = 403 [(photon.ext.ssz_size) = "32"];
    // Storage contract trie root hash.
    bytes storage_trie_root = 404 [(photon.ext.ssz_size) = "32"];
    // Randao mixes trie root hash.
    bytes randao_mixes_trie_root = 405 [(photon.ext.ssz_size) = "32"];
    // Storage contract audit queue's root hash.
    bytes audit_queue_root = 406 [(photon.ext.ssz_size) = "32"];
    // Storage contract event queue's root hash.
    bytes event_queue_root = 407 [(photon.ext.ssz_size) = "32"];

    // Aggregated state [501-600]
    uint64 reservior_balance = 501;
    Storage storage = 502;
}

// Metadata for all active storage contracts.
message Storage {
    // Number of active storage contracts.
    uint64 num_contracts = 1;
    // Total storage capacity size registered by storage contracts in bytes.
    // The integer value is serialized in big endian format.
    // This tracks the object's original size instead of the encoded size.
    bytes total_size = 2 [(photon.ext.ssz_max) = "32"];
    // Accumulated reward rate at current slot used for tracking storage
    // contract's reward.
    uint64 reward_rate = 3;
    // Aggregated fee paid out to depot per slot.
    uint64 fee_rate = 4;
    // The latest fee rate effective slot.
    uint64 fee_rate_since = 5 [(photon.ext.cast_type) = "Slot"];
}

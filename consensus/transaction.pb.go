// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: consensus/transaction.proto

package pbc

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/photon-storage/photon-proto/ext"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Transaction type enum.
type TxType int32

const (
	// TX_INVALID type prevents from defaulting to a valid transaction type.
	TxType_TX_INVALID TxType = 0
	// BALANCE_TRANSFER transfers balance between accounts.
	TxType_BALANCE_TRANSFER TxType = 1
	// VALIDATOR_DEPOSIT depotis balance for being a validator.
	TxType_VALIDATOR_DEPOSIT TxType = 2
	// VALIDATOR_EXIT initiates a voluntary exit for a validator.
	TxType_VALIDATOR_EXIT TxType = 3
	// AUDITOR_DEPOSIT deposit balance for being an auditor.
	TxType_AUDITOR_DEPOSIT TxType = 4
	// AUDITOR_EXIT initiates a voluntary exit for an auditor.
	TxType_AUDITOR_EXIT TxType = 5
	// OBJECT_COMMIT creates a new storage contract committing a data object.
	TxType_OBJECT_COMMIT TxType = 6
	// OBJECT_AUDIT updates a storage contract after object data audit completion.
	TxType_OBJECT_AUDIT TxType = 7
	// OBJECT_CHALLENGE requests a PoR proof for a specified object.
	TxType_OBJECT_CHALLENGE TxType = 8
	// OBJECT_POR updates a storage contract with PoR proof data.
	TxType_OBJECT_POR TxType = 9
)

// Enum value maps for TxType.
var (
	TxType_name = map[int32]string{
		0: "TX_INVALID",
		1: "BALANCE_TRANSFER",
		2: "VALIDATOR_DEPOSIT",
		3: "VALIDATOR_EXIT",
		4: "AUDITOR_DEPOSIT",
		5: "AUDITOR_EXIT",
		6: "OBJECT_COMMIT",
		7: "OBJECT_AUDIT",
		8: "OBJECT_CHALLENGE",
		9: "OBJECT_POR",
	}
	TxType_value = map[string]int32{
		"TX_INVALID":        0,
		"BALANCE_TRANSFER":  1,
		"VALIDATOR_DEPOSIT": 2,
		"VALIDATOR_EXIT":    3,
		"AUDITOR_DEPOSIT":   4,
		"AUDITOR_EXIT":      5,
		"OBJECT_COMMIT":     6,
		"OBJECT_AUDIT":      7,
		"OBJECT_CHALLENGE":  8,
		"OBJECT_POR":        9,
	}
)

func (x TxType) Enum() *TxType {
	p := new(TxType)
	*p = x
	return p
}

func (x TxType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TxType) Descriptor() protoreflect.EnumDescriptor {
	return file_consensus_transaction_proto_enumTypes[0].Descriptor()
}

func (TxType) Type() protoreflect.EnumType {
	return &file_consensus_transaction_proto_enumTypes[0]
}

func (x TxType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TxType.Descriptor instead.
func (TxType) EnumDescriptor() ([]byte, []int) {
	return file_consensus_transaction_proto_rawDescGZIP(), []int{0}
}

type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type defines concrete type of the payload data. Equivalent to TxType.
	// Use uint32 because SSZ does not support proto enum type.
	Type uint32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	// Transaction originator's public key.
	From []byte `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty" ssz-size:"48"`
	// ID of the chain to which the transaction is submitted.
	ChainId uint32 `protobuf:"varint,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// Transaction nonce for preventing replay attacks.
	Nonce uint64 `protobuf:"varint,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// Gas price to pay for the transaction.
	GasPrice uint64 `protobuf:"varint,5,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	// Total gas spend upper bound for the transaction. For EVM transactions,
	// the limit caps total gas spend for the transaction. Transaction
	// execution that exceeds this limit leads to out of gas failure. For
	// pre-defined transaction types, the gas limit would be equivalnt to
	// total amount of gas required to execute the transaction given the
	// defined gas price.
	GasLimit uint64 `protobuf:"varint,6,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	// Transaction data by type.
	TxDataBalanceTransfer  *TxDataBalanceTransfer  `protobuf:"bytes,101,opt,name=txDataBalanceTransfer,proto3" json:"txDataBalanceTransfer,omitempty"`
	TxDataValidatorDeposit *TxDataValidatorDeposit `protobuf:"bytes,102,opt,name=txDataValidatorDeposit,proto3" json:"txDataValidatorDeposit,omitempty"`
	TxDataAuditorDeposit   *TxDataAuditorDeposit   `protobuf:"bytes,104,opt,name=txDataAuditorDeposit,proto3" json:"txDataAuditorDeposit,omitempty"`
	TxDataObjectCommit     *TxDataObjectCommit     `protobuf:"bytes,106,opt,name=txDataObjectCommit,proto3" json:"txDataObjectCommit,omitempty"`
	TxDataObjectAudit      *TxDataObjectAudit      `protobuf:"bytes,107,opt,name=txDataObjectAudit,proto3" json:"txDataObjectAudit,omitempty"`
	TxDataObjectChallenge  *TxDataObjectChallenge  `protobuf:"bytes,108,opt,name=txDataObjectChallenge,proto3" json:"txDataObjectChallenge,omitempty"`
	TxDataObjectPoR        *TxDataObjectPoR        `protobuf:"bytes,109,opt,name=txDataObjectPoR,proto3" json:"txDataObjectPoR,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_transaction_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_transaction_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_consensus_transaction_proto_rawDescGZIP(), []int{0}
}

func (x *Transaction) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Transaction) GetFrom() []byte {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *Transaction) GetChainId() uint32 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *Transaction) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *Transaction) GetGasPrice() uint64 {
	if x != nil {
		return x.GasPrice
	}
	return 0
}

func (x *Transaction) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *Transaction) GetTxDataBalanceTransfer() *TxDataBalanceTransfer {
	if x != nil {
		return x.TxDataBalanceTransfer
	}
	return nil
}

func (x *Transaction) GetTxDataValidatorDeposit() *TxDataValidatorDeposit {
	if x != nil {
		return x.TxDataValidatorDeposit
	}
	return nil
}

func (x *Transaction) GetTxDataAuditorDeposit() *TxDataAuditorDeposit {
	if x != nil {
		return x.TxDataAuditorDeposit
	}
	return nil
}

func (x *Transaction) GetTxDataObjectCommit() *TxDataObjectCommit {
	if x != nil {
		return x.TxDataObjectCommit
	}
	return nil
}

func (x *Transaction) GetTxDataObjectAudit() *TxDataObjectAudit {
	if x != nil {
		return x.TxDataObjectAudit
	}
	return nil
}

func (x *Transaction) GetTxDataObjectChallenge() *TxDataObjectChallenge {
	if x != nil {
		return x.TxDataObjectChallenge
	}
	return nil
}

func (x *Transaction) GetTxDataObjectPoR() *TxDataObjectPoR {
	if x != nil {
		return x.TxDataObjectPoR
	}
	return nil
}

// Balance transfer transaction data.
type TxDataBalanceTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Balance transfer destination account's public key.
	To []byte `protobuf:"bytes,1,opt,name=to,proto3" json:"to,omitempty" ssz-size:"48"`
	// Amount of balance to transfer.
	Amount uint64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *TxDataBalanceTransfer) Reset() {
	*x = TxDataBalanceTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_transaction_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxDataBalanceTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxDataBalanceTransfer) ProtoMessage() {}

func (x *TxDataBalanceTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_transaction_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxDataBalanceTransfer.ProtoReflect.Descriptor instead.
func (*TxDataBalanceTransfer) Descriptor() ([]byte, []int) {
	return file_consensus_transaction_proto_rawDescGZIP(), []int{1}
}

func (x *TxDataBalanceTransfer) GetTo() []byte {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *TxDataBalanceTransfer) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

// Validator deposit transaction data.
type TxDataValidatorDeposit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Amount of deposit.
	Amount uint64 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *TxDataValidatorDeposit) Reset() {
	*x = TxDataValidatorDeposit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_transaction_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxDataValidatorDeposit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxDataValidatorDeposit) ProtoMessage() {}

func (x *TxDataValidatorDeposit) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_transaction_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxDataValidatorDeposit.ProtoReflect.Descriptor instead.
func (*TxDataValidatorDeposit) Descriptor() ([]byte, []int) {
	return file_consensus_transaction_proto_rawDescGZIP(), []int{2}
}

func (x *TxDataValidatorDeposit) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

// Auditor deposit transaction data.
type TxDataAuditorDeposit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Amount of deposit.
	Amount uint64 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// Decoder is a public key encoded in multikey format for decoding data
	// encoded by this auditor.
	Decoder []byte `protobuf:"bytes,2,opt,name=decoder,proto3" json:"decoder,omitempty" ssz-size:"512"`
}

func (x *TxDataAuditorDeposit) Reset() {
	*x = TxDataAuditorDeposit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_transaction_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxDataAuditorDeposit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxDataAuditorDeposit) ProtoMessage() {}

func (x *TxDataAuditorDeposit) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_transaction_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxDataAuditorDeposit.ProtoReflect.Descriptor instead.
func (*TxDataAuditorDeposit) Descriptor() ([]byte, []int) {
	return file_consensus_transaction_proto_rawDescGZIP(), []int{3}
}

func (x *TxDataAuditorDeposit) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *TxDataAuditorDeposit) GetDecoder() []byte {
	if x != nil {
		return x.Decoder
	}
	return nil
}

// TxDataObjectCommit is an object's storage contract for its initial commit.
type TxDataObjectCommit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The public key of the data owner.
	Owner []byte `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty" ssz-size:"48"`
	// The public key of the storage provider.
	Depot []byte `protobuf:"bytes,2,opt,name=depot,proto3" json:"depot,omitempty" ssz-size:"48"`
	// The p2p network discovery ID used for finding depot RPC endpoint.
	DepotDiscoveryId []byte `protobuf:"bytes,3,opt,name=depot_discovery_id,json=depotDiscoveryId,proto3" json:"depot_discovery_id,omitempty" ssz-size:"32"`
	// The Merkle tree root hash of the object's original data.
	Hash []byte `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty" ssz-size:"32"`
	// The size of the object's original data to be stored.
	Size uint64 `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
	// The Merkle tree root hash of the object's newly encoded data.
	EncodedHash []byte `protobuf:"bytes,6,opt,name=encoded_hash,json=encodedHash,proto3" json:"encoded_hash,omitempty" ssz-size:"32"`
	// The size of the object's encoded data to be stored.
	EncodedSize uint64 `protobuf:"varint,7,opt,name=encoded_size,json=encodedSize,proto3" json:"encoded_size,omitempty"`
	// Number of blocks of encoded data.
	NumBlocks uint32 `protobuf:"varint,8,opt,name=num_blocks,json=numBlocks,proto3" json:"num_blocks,omitempty"`
	// Number of slots that the storage provider needs to maintain the data.
	Duration Slot `protobuf:"varint,9,opt,name=duration,proto3" json:"duration,omitempty" cast-type:"Slot"`
	// Total storage fee that data owner paid.
	Fee uint64 `protobuf:"varint,10,opt,name=fee,proto3" json:"fee,omitempty"`
	// Storage providers collateral deposit.
	Pledge uint64 `protobuf:"varint,11,opt,name=pledge,proto3" json:"pledge,omitempty"`
	// Slot deadline before which the transaction is considered valid.
	Deadline Slot `protobuf:"varint,12,opt,name=deadline,proto3" json:"deadline,omitempty" cast-type:"Slot"`
}

func (x *TxDataObjectCommit) Reset() {
	*x = TxDataObjectCommit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_transaction_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxDataObjectCommit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxDataObjectCommit) ProtoMessage() {}

func (x *TxDataObjectCommit) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_transaction_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxDataObjectCommit.ProtoReflect.Descriptor instead.
func (*TxDataObjectCommit) Descriptor() ([]byte, []int) {
	return file_consensus_transaction_proto_rawDescGZIP(), []int{4}
}

func (x *TxDataObjectCommit) GetOwner() []byte {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *TxDataObjectCommit) GetDepot() []byte {
	if x != nil {
		return x.Depot
	}
	return nil
}

func (x *TxDataObjectCommit) GetDepotDiscoveryId() []byte {
	if x != nil {
		return x.DepotDiscoveryId
	}
	return nil
}

func (x *TxDataObjectCommit) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *TxDataObjectCommit) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *TxDataObjectCommit) GetEncodedHash() []byte {
	if x != nil {
		return x.EncodedHash
	}
	return nil
}

func (x *TxDataObjectCommit) GetEncodedSize() uint64 {
	if x != nil {
		return x.EncodedSize
	}
	return 0
}

func (x *TxDataObjectCommit) GetNumBlocks() uint32 {
	if x != nil {
		return x.NumBlocks
	}
	return 0
}

func (x *TxDataObjectCommit) GetDuration() Slot {
	if x != nil {
		return x.Duration
	}
	return Slot(0)
}

func (x *TxDataObjectCommit) GetFee() uint64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *TxDataObjectCommit) GetPledge() uint64 {
	if x != nil {
		return x.Pledge
	}
	return 0
}

func (x *TxDataObjectCommit) GetDeadline() Slot {
	if x != nil {
		return x.Deadline
	}
	return Slot(0)
}

// TxDataObjectAudit is an update to object's storage contract after
// audit completion.
type TxDataObjectAudit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The original object commit tx hash for identification.
	CommitTxHash []byte `protobuf:"bytes,1,opt,name=commit_tx_hash,json=commitTxHash,proto3" json:"commit_tx_hash,omitempty" ssz-size:"32"`
	// The public key of the auditor.
	Auditor []byte `protobuf:"bytes,2,opt,name=auditor,proto3" json:"auditor,omitempty" ssz-size:"48"`
	// The public key of the storage provider.
	Depot []byte `protobuf:"bytes,3,opt,name=depot,proto3" json:"depot,omitempty" ssz-size:"48"`
	// The Merkle tree root hash of the object's original data.
	Hash []byte `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty" ssz-size:"32"`
	// The size of the object's original data to be stored.
	Size uint64 `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
	// The Merkle tree root hash of the object's newly encoded data.
	EncodedHash []byte `protobuf:"bytes,6,opt,name=encoded_hash,json=encodedHash,proto3" json:"encoded_hash,omitempty" ssz-size:"32"`
	// The size of the object's encoded data to be stored.
	EncodedSize uint64 `protobuf:"varint,7,opt,name=encoded_size,json=encodedSize,proto3" json:"encoded_size,omitempty"`
	// Number of blocks of encoded data.
	NumBlocks uint32 `protobuf:"varint,8,opt,name=num_blocks,json=numBlocks,proto3" json:"num_blocks,omitempty"`
	// An array of random elements used to generated block signature.
	// The count is equal to sectors_per_block.
	// TODO(kmax): using fixed length because ssz_max would not
	// allow nil point check and skip ssz calculation.
	Rands [][]byte `protobuf:"bytes,9,rep,name=rands,proto3" json:"rands,omitempty" ssz-size:"8,96"`
}

func (x *TxDataObjectAudit) Reset() {
	*x = TxDataObjectAudit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_transaction_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxDataObjectAudit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxDataObjectAudit) ProtoMessage() {}

func (x *TxDataObjectAudit) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_transaction_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxDataObjectAudit.ProtoReflect.Descriptor instead.
func (*TxDataObjectAudit) Descriptor() ([]byte, []int) {
	return file_consensus_transaction_proto_rawDescGZIP(), []int{5}
}

func (x *TxDataObjectAudit) GetCommitTxHash() []byte {
	if x != nil {
		return x.CommitTxHash
	}
	return nil
}

func (x *TxDataObjectAudit) GetAuditor() []byte {
	if x != nil {
		return x.Auditor
	}
	return nil
}

func (x *TxDataObjectAudit) GetDepot() []byte {
	if x != nil {
		return x.Depot
	}
	return nil
}

func (x *TxDataObjectAudit) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *TxDataObjectAudit) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *TxDataObjectAudit) GetEncodedHash() []byte {
	if x != nil {
		return x.EncodedHash
	}
	return nil
}

func (x *TxDataObjectAudit) GetEncodedSize() uint64 {
	if x != nil {
		return x.EncodedSize
	}
	return 0
}

func (x *TxDataObjectAudit) GetNumBlocks() uint32 {
	if x != nil {
		return x.NumBlocks
	}
	return 0
}

func (x *TxDataObjectAudit) GetRands() [][]byte {
	if x != nil {
		return x.Rands
	}
	return nil
}

// TxDataObjectChallenge requests a PoR proof for an object specified by
// the commit tx hash.
type TxDataObjectChallenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The original object commit tx hash for identification.
	CommitTxHash []byte `protobuf:"bytes,1,opt,name=commit_tx_hash,json=commitTxHash,proto3" json:"commit_tx_hash,omitempty" ssz-size:"32"`
}

func (x *TxDataObjectChallenge) Reset() {
	*x = TxDataObjectChallenge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_transaction_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxDataObjectChallenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxDataObjectChallenge) ProtoMessage() {}

func (x *TxDataObjectChallenge) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_transaction_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxDataObjectChallenge.ProtoReflect.Descriptor instead.
func (*TxDataObjectChallenge) Descriptor() ([]byte, []int) {
	return file_consensus_transaction_proto_rawDescGZIP(), []int{6}
}

func (x *TxDataObjectChallenge) GetCommitTxHash() []byte {
	if x != nil {
		return x.CommitTxHash
	}
	return nil
}

// TxDataObjectPoR is an update to object's storage contract with PoR
// proof data.
type TxDataObjectPoR struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The original object commit tx hash for identification.
	CommitTxHash []byte `protobuf:"bytes,1,opt,name=commit_tx_hash,json=commitTxHash,proto3" json:"commit_tx_hash,omitempty" ssz-size:"32"`
	// TODO(kmax): using fixed length because ssz_max would not
	// allow nil point check and skip ssz calculation.
	// Mu's generated by prover.
	BlockAggs [][]byte `protobuf:"bytes,2,rep,name=block_aggs,json=blockAggs,proto3" json:"block_aggs,omitempty" ssz-size:"8,32"`
	// Aggregated block signatures generated by prover.
	Sigma []byte `protobuf:"bytes,3,opt,name=sigma,proto3" json:"sigma,omitempty" ssz-size:"96"`
}

func (x *TxDataObjectPoR) Reset() {
	*x = TxDataObjectPoR{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_transaction_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxDataObjectPoR) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxDataObjectPoR) ProtoMessage() {}

func (x *TxDataObjectPoR) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_transaction_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxDataObjectPoR.ProtoReflect.Descriptor instead.
func (*TxDataObjectPoR) Descriptor() ([]byte, []int) {
	return file_consensus_transaction_proto_rawDescGZIP(), []int{7}
}

func (x *TxDataObjectPoR) GetCommitTxHash() []byte {
	if x != nil {
		return x.CommitTxHash
	}
	return nil
}

func (x *TxDataObjectPoR) GetBlockAggs() [][]byte {
	if x != nil {
		return x.BlockAggs
	}
	return nil
}

func (x *TxDataObjectPoR) GetSigma() []byte {
	if x != nil {
		return x.Sigma
	}
	return nil
}

// The signed version of a transaction.
type SignedTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unsigned transaction content.
	Tx *Transaction `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	// 96 byte BLS signature from the account that produced this transaction.
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty" ssz-size:"96"`
}

func (x *SignedTransaction) Reset() {
	*x = SignedTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_transaction_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedTransaction) ProtoMessage() {}

func (x *SignedTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_transaction_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedTransaction.ProtoReflect.Descriptor instead.
func (*SignedTransaction) Descriptor() ([]byte, []int) {
	return file_consensus_transaction_proto_rawDescGZIP(), []int{8}
}

func (x *SignedTransaction) GetTx() *Transaction {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *SignedTransaction) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// Response for tx submission.
type SubmitTxResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slot   Slot   `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty" cast-type:"Slot"`
	TxHash []byte `protobuf:"bytes,2,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
}

func (x *SubmitTxResponse) Reset() {
	*x = SubmitTxResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_transaction_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitTxResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitTxResponse) ProtoMessage() {}

func (x *SubmitTxResponse) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_transaction_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitTxResponse.ProtoReflect.Descriptor instead.
func (*SubmitTxResponse) Descriptor() ([]byte, []int) {
	return file_consensus_transaction_proto_rawDescGZIP(), []int{9}
}

func (x *SubmitTxResponse) GetSlot() Slot {
	if x != nil {
		return x.Slot
	}
	return Slot(0)
}

func (x *SubmitTxResponse) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

var File_consensus_transaction_proto protoreflect.FileDescriptor

var file_consensus_transaction_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x70,
	0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x1a,
	0x11, 0x65, 0x78, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x9a, 0x06, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0x8a, 0xb5, 0x18, 0x02, 0x34, 0x38, 0x52, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x5d, 0x0a,
	0x15, 0x74, 0x78, 0x44, 0x61, 0x74, 0x61, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70,
	0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e,
	0x54, 0x78, 0x44, 0x61, 0x74, 0x61, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x15, 0x74, 0x78, 0x44, 0x61, 0x74, 0x61, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x60, 0x0a, 0x16,
	0x74, 0x78, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70,
	0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e,
	0x54, 0x78, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x16, 0x74, 0x78, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x5a,
	0x0a, 0x14, 0x74, 0x78, 0x44, 0x61, 0x74, 0x61, 0x41, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70,
	0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e,
	0x54, 0x78, 0x44, 0x61, 0x74, 0x61, 0x41, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x52, 0x14, 0x74, 0x78, 0x44, 0x61, 0x74, 0x61, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x54, 0x0a, 0x12, 0x74, 0x78,
	0x44, 0x61, 0x74, 0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x18, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x54, 0x78, 0x44, 0x61, 0x74, 0x61,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x12, 0x74, 0x78,
	0x44, 0x61, 0x74, 0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x12, 0x51, 0x0a, 0x11, 0x74, 0x78, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x68,
	0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x54,
	0x78, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x52, 0x11, 0x74, 0x78, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x12, 0x5d, 0x0a, 0x15, 0x74, 0x78, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x6c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x54, 0x78, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x15, 0x74, 0x78, 0x44,
	0x61, 0x74, 0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x12, 0x4b, 0x0a, 0x0f, 0x74, 0x78, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x50, 0x6f, 0x52, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x68,
	0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x54,
	0x78, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x6f, 0x52, 0x52, 0x0f,
	0x74, 0x78, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x6f, 0x52, 0x22,
	0x47, 0x0a, 0x15, 0x54, 0x78, 0x44, 0x61, 0x74, 0x61, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0x8a, 0xb5, 0x18, 0x02, 0x34, 0x38, 0x52, 0x02, 0x74, 0x6f,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x30, 0x0a, 0x16, 0x54, 0x78, 0x44, 0x61,
	0x74, 0x61, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x51, 0x0a, 0x14, 0x54, 0x78,
	0x44, 0x61, 0x74, 0x61, 0x41, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x07, 0x64, 0x65,
	0x63, 0x6f, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x07, 0x8a, 0xb5, 0x18,
	0x03, 0x35, 0x31, 0x32, 0x52, 0x07, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x22, 0x99, 0x03,
	0x0a, 0x12, 0x54, 0x78, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x42, 0x06, 0x8a, 0xb5, 0x18, 0x02, 0x34, 0x38, 0x52, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x12, 0x1c, 0x0a, 0x05, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x42, 0x06, 0x8a, 0xb5, 0x18, 0x02, 0x34, 0x38, 0x52, 0x05, 0x64, 0x65, 0x70, 0x6f, 0x74,
	0x12, 0x34, 0x0a, 0x12, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0x8a, 0xb5,
	0x18, 0x02, 0x33, 0x32, 0x52, 0x10, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0x8a, 0xb5, 0x18, 0x02, 0x33, 0x32, 0x52, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x29, 0x0a, 0x0c, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x64, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0x8a, 0xb5,
	0x18, 0x02, 0x33, 0x32, 0x52, 0x0b, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x12, 0x24, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x04, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x53, 0x6c, 0x6f, 0x74, 0x52,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x04, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x53, 0x6c, 0x6f, 0x74, 0x52,
	0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0xbe, 0x02, 0x0a, 0x11, 0x54, 0x78,
	0x44, 0x61, 0x74, 0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x12,
	0x2c, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0x8a, 0xb5, 0x18, 0x02, 0x33, 0x32, 0x52,
	0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x20, 0x0a,
	0x07, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06,
	0x8a, 0xb5, 0x18, 0x02, 0x34, 0x38, 0x52, 0x07, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12,
	0x1c, 0x0a, 0x05, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06,
	0x8a, 0xb5, 0x18, 0x02, 0x34, 0x38, 0x52, 0x05, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x12, 0x1a, 0x0a,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0x8a, 0xb5, 0x18,
	0x02, 0x33, 0x32, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x29, 0x0a,
	0x0c, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0c, 0x42, 0x06, 0x8a, 0xb5, 0x18, 0x02, 0x33, 0x32, 0x52, 0x0b, 0x65, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e,
	0x75, 0x6d, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x6e, 0x75, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x1e, 0x0a, 0x05, 0x72, 0x61,
	0x6e, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0c, 0x42, 0x08, 0x8a, 0xb5, 0x18, 0x04, 0x38,
	0x2c, 0x39, 0x36, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x22, 0x45, 0x0a, 0x15, 0x54, 0x78,
	0x44, 0x61, 0x74, 0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x78,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0x8a, 0xb5, 0x18,
	0x02, 0x33, 0x32, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x78, 0x48, 0x61, 0x73,
	0x68, 0x22, 0x86, 0x01, 0x0a, 0x0f, 0x54, 0x78, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x50, 0x6f, 0x52, 0x12, 0x2c, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f,
	0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0x8a,
	0xb5, 0x18, 0x02, 0x33, 0x32, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x78, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x27, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x61, 0x67, 0x67,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x42, 0x08, 0x8a, 0xb5, 0x18, 0x04, 0x38, 0x2c, 0x33,
	0x32, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x67, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x05,
	0x73, 0x69, 0x67, 0x6d, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0x8a, 0xb5, 0x18,
	0x02, 0x39, 0x36, 0x52, 0x05, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x22, 0x68, 0x0a, 0x11, 0x53, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2d, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x68,
	0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02, 0x74, 0x78, 0x12, 0x24,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x42, 0x06, 0x8a, 0xb5, 0x18, 0x02, 0x39, 0x36, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x22, 0x49, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x78,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x53, 0x6c, 0x6f, 0x74,
	0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x2a,
	0xcb, 0x01, 0x0a, 0x06, 0x54, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x58,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x41,
	0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0x01,
	0x12, 0x15, 0x0a, 0x11, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x44, 0x45,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x41, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x41,
	0x55, 0x44, 0x49, 0x54, 0x4f, 0x52, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x10, 0x04,
	0x12, 0x10, 0x0a, 0x0c, 0x41, 0x55, 0x44, 0x49, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x58, 0x49, 0x54,
	0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x4f, 0x4d,
	0x4d, 0x49, 0x54, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f,
	0x41, 0x55, 0x44, 0x49, 0x54, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x42, 0x4a, 0x45, 0x43,
	0x54, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x10, 0x08, 0x12, 0x0e, 0x0a,
	0x0a, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x50, 0x4f, 0x52, 0x10, 0x09, 0x42, 0x9c, 0x01,
	0x0a, 0x1e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x42, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f,
	0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x3b, 0x70, 0x62, 0x63, 0xaa, 0x02, 0x16, 0x70, 0x68, 0x6f,
	0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0xca, 0x02, 0x16, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x5c, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x5c, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_consensus_transaction_proto_rawDescOnce sync.Once
	file_consensus_transaction_proto_rawDescData = file_consensus_transaction_proto_rawDesc
)

func file_consensus_transaction_proto_rawDescGZIP() []byte {
	file_consensus_transaction_proto_rawDescOnce.Do(func() {
		file_consensus_transaction_proto_rawDescData = protoimpl.X.CompressGZIP(file_consensus_transaction_proto_rawDescData)
	})
	return file_consensus_transaction_proto_rawDescData
}

var file_consensus_transaction_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_consensus_transaction_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_consensus_transaction_proto_goTypes = []interface{}{
	(TxType)(0),                    // 0: photon.consensus.TxType
	(*Transaction)(nil),            // 1: photon.consensus.Transaction
	(*TxDataBalanceTransfer)(nil),  // 2: photon.consensus.TxDataBalanceTransfer
	(*TxDataValidatorDeposit)(nil), // 3: photon.consensus.TxDataValidatorDeposit
	(*TxDataAuditorDeposit)(nil),   // 4: photon.consensus.TxDataAuditorDeposit
	(*TxDataObjectCommit)(nil),     // 5: photon.consensus.TxDataObjectCommit
	(*TxDataObjectAudit)(nil),      // 6: photon.consensus.TxDataObjectAudit
	(*TxDataObjectChallenge)(nil),  // 7: photon.consensus.TxDataObjectChallenge
	(*TxDataObjectPoR)(nil),        // 8: photon.consensus.TxDataObjectPoR
	(*SignedTransaction)(nil),      // 9: photon.consensus.SignedTransaction
	(*SubmitTxResponse)(nil),       // 10: photon.consensus.SubmitTxResponse
}
var file_consensus_transaction_proto_depIdxs = []int32{
	2, // 0: photon.consensus.Transaction.txDataBalanceTransfer:type_name -> photon.consensus.TxDataBalanceTransfer
	3, // 1: photon.consensus.Transaction.txDataValidatorDeposit:type_name -> photon.consensus.TxDataValidatorDeposit
	4, // 2: photon.consensus.Transaction.txDataAuditorDeposit:type_name -> photon.consensus.TxDataAuditorDeposit
	5, // 3: photon.consensus.Transaction.txDataObjectCommit:type_name -> photon.consensus.TxDataObjectCommit
	6, // 4: photon.consensus.Transaction.txDataObjectAudit:type_name -> photon.consensus.TxDataObjectAudit
	7, // 5: photon.consensus.Transaction.txDataObjectChallenge:type_name -> photon.consensus.TxDataObjectChallenge
	8, // 6: photon.consensus.Transaction.txDataObjectPoR:type_name -> photon.consensus.TxDataObjectPoR
	1, // 7: photon.consensus.SignedTransaction.tx:type_name -> photon.consensus.Transaction
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_consensus_transaction_proto_init() }
func file_consensus_transaction_proto_init() {
	if File_consensus_transaction_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_consensus_transaction_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_transaction_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxDataBalanceTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_transaction_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxDataValidatorDeposit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_transaction_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxDataAuditorDeposit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_transaction_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxDataObjectCommit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_transaction_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxDataObjectAudit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_transaction_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxDataObjectChallenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_transaction_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxDataObjectPoR); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_transaction_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_transaction_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitTxResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_consensus_transaction_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_consensus_transaction_proto_goTypes,
		DependencyIndexes: file_consensus_transaction_proto_depIdxs,
		EnumInfos:         file_consensus_transaction_proto_enumTypes,
		MessageInfos:      file_consensus_transaction_proto_msgTypes,
	}.Build()
	File_consensus_transaction_proto = out.File
	file_consensus_transaction_proto_rawDesc = nil
	file_consensus_transaction_proto_goTypes = nil
	file_consensus_transaction_proto_depIdxs = nil
}

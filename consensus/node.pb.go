// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: consensus/node.proto

package pbc

import (
	context "context"
	reflect "reflect"
	sync "sync"

	_ "github.com/photon-storage/photon-proto/ext"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SetAction defines the type of action that should be applied to the keys in a validator change set.
type SetAction int32

const (
	// ADD_VALIDATOR_KEYS adds to the existing keys.
	SetAction_ADD_VALIDATOR_KEYS SetAction = 0
	// REMOVE_VALIDATOR_KEYS removes from the existing keys.
	SetAction_REMOVE_VALIDATOR_KEYS SetAction = 1
	// SET_VALIDATOR_KEYS overwrites the existing keys.
	SetAction_SET_VALIDATOR_KEYS SetAction = 2
)

// Enum value maps for SetAction.
var (
	SetAction_name = map[int32]string{
		0: "ADD_VALIDATOR_KEYS",
		1: "REMOVE_VALIDATOR_KEYS",
		2: "SET_VALIDATOR_KEYS",
	}
	SetAction_value = map[string]int32{
		"ADD_VALIDATOR_KEYS":    0,
		"REMOVE_VALIDATOR_KEYS": 1,
		"SET_VALIDATOR_KEYS":    2,
	}
)

func (x SetAction) Enum() *SetAction {
	p := new(SetAction)
	*p = x
	return p
}

func (x SetAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetAction) Descriptor() protoreflect.EnumDescriptor {
	return file_consensus_node_proto_enumTypes[0].Descriptor()
}

func (SetAction) Type() protoreflect.EnumType {
	return &file_consensus_node_proto_enumTypes[0]
}

func (x SetAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SetAction.Descriptor instead.
func (SetAction) EnumDescriptor() ([]byte, []int) {
	return file_consensus_node_proto_rawDescGZIP(), []int{0}
}

// ValidatorChangeSet updates the server's list of keys on which to operate.
type ValidatorChangeSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Action (add/remove/set).
	Action SetAction `protobuf:"varint,1,opt,name=action,proto3,enum=photon.consensus.SetAction" json:"action,omitempty"`
	// 48 byte BLS public keys of validators on which the operation occurs.
	PublicKeys [][]byte `protobuf:"bytes,2,rep,name=public_keys,json=publicKeys,proto3" json:"public_keys,omitempty"`
}

func (x *ValidatorChangeSet) Reset() {
	*x = ValidatorChangeSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_node_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatorChangeSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorChangeSet) ProtoMessage() {}

func (x *ValidatorChangeSet) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_node_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorChangeSet.ProtoReflect.Descriptor instead.
func (*ValidatorChangeSet) Descriptor() ([]byte, []int) {
	return file_consensus_node_proto_rawDescGZIP(), []int{0}
}

func (x *ValidatorChangeSet) GetAction() SetAction {
	if x != nil {
		return x.Action
	}
	return SetAction_ADD_VALIDATOR_KEYS
}

func (x *ValidatorChangeSet) GetPublicKeys() [][]byte {
	if x != nil {
		return x.PublicKeys
	}
	return nil
}

// Request for indexed attestations by target epoch.
type ListIndexedAttestationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to QueryFilter:
	//	*ListIndexedAttestationsRequest_Epoch
	//	*ListIndexedAttestationsRequest_GenesisEpoch
	QueryFilter isListIndexedAttestationsRequest_QueryFilter `protobuf_oneof:"query_filter"`
	// The maximum number of IndexedAttestations to return in the response.
	// This field is optional.
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A pagination token returned from a previous call to `ListIndexedAttestations`
	// that indicates where this listing should continue from.
	// This field is optional.
	PageToken string `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListIndexedAttestationsRequest) Reset() {
	*x = ListIndexedAttestationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_node_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIndexedAttestationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIndexedAttestationsRequest) ProtoMessage() {}

func (x *ListIndexedAttestationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_node_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIndexedAttestationsRequest.ProtoReflect.Descriptor instead.
func (*ListIndexedAttestationsRequest) Descriptor() ([]byte, []int) {
	return file_consensus_node_proto_rawDescGZIP(), []int{1}
}

func (m *ListIndexedAttestationsRequest) GetQueryFilter() isListIndexedAttestationsRequest_QueryFilter {
	if m != nil {
		return m.QueryFilter
	}
	return nil
}

func (x *ListIndexedAttestationsRequest) GetEpoch() Epoch {
	if x, ok := x.GetQueryFilter().(*ListIndexedAttestationsRequest_Epoch); ok {
		return x.Epoch
	}
	return Epoch(0)
}

func (x *ListIndexedAttestationsRequest) GetGenesisEpoch() bool {
	if x, ok := x.GetQueryFilter().(*ListIndexedAttestationsRequest_GenesisEpoch); ok {
		return x.GenesisEpoch
	}
	return false
}

func (x *ListIndexedAttestationsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListIndexedAttestationsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type isListIndexedAttestationsRequest_QueryFilter interface {
	isListIndexedAttestationsRequest_QueryFilter()
}

type ListIndexedAttestationsRequest_Epoch struct {
	// Retrieve attestations by epoch processed.
	Epoch Epoch `protobuf:"varint,1,opt,name=epoch,proto3,oneof" cast-type:"Epoch"`
}

type ListIndexedAttestationsRequest_GenesisEpoch struct {
	// Optional criteria to retrieve genesis epoch attestations.
	GenesisEpoch bool `protobuf:"varint,2,opt,name=genesis_epoch,json=genesisEpoch,proto3,oneof"`
}

func (*ListIndexedAttestationsRequest_Epoch) isListIndexedAttestationsRequest_QueryFilter() {}

func (*ListIndexedAttestationsRequest_GenesisEpoch) isListIndexedAttestationsRequest_QueryFilter() {}

// Request for attestations.
type ListAttestationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to QueryFilter:
	//	*ListAttestationsRequest_Epoch
	//	*ListAttestationsRequest_GenesisEpoch
	QueryFilter isListAttestationsRequest_QueryFilter `protobuf_oneof:"query_filter"`
	// The maximum number of Attestations to return in the response.
	// This field is optional.
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A pagination token returned from a previous call to `ListAttestations`
	// that indicates where this listing should continue from.
	// This field is optional.
	PageToken string `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListAttestationsRequest) Reset() {
	*x = ListAttestationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_node_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAttestationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAttestationsRequest) ProtoMessage() {}

func (x *ListAttestationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_node_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAttestationsRequest.ProtoReflect.Descriptor instead.
func (*ListAttestationsRequest) Descriptor() ([]byte, []int) {
	return file_consensus_node_proto_rawDescGZIP(), []int{2}
}

func (m *ListAttestationsRequest) GetQueryFilter() isListAttestationsRequest_QueryFilter {
	if m != nil {
		return m.QueryFilter
	}
	return nil
}

func (x *ListAttestationsRequest) GetEpoch() Epoch {
	if x, ok := x.GetQueryFilter().(*ListAttestationsRequest_Epoch); ok {
		return x.Epoch
	}
	return Epoch(0)
}

func (x *ListAttestationsRequest) GetGenesisEpoch() bool {
	if x, ok := x.GetQueryFilter().(*ListAttestationsRequest_GenesisEpoch); ok {
		return x.GenesisEpoch
	}
	return false
}

func (x *ListAttestationsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListAttestationsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type isListAttestationsRequest_QueryFilter interface {
	isListAttestationsRequest_QueryFilter()
}

type ListAttestationsRequest_Epoch struct {
	// Filter attestations by epoch processed.
	Epoch Epoch `protobuf:"varint,1,opt,name=epoch,proto3,oneof" cast-type:"Epoch"`
}

type ListAttestationsRequest_GenesisEpoch struct {
	// Optional criteria to retrieve attestations from 0 epoch.
	GenesisEpoch bool `protobuf:"varint,2,opt,name=genesis_epoch,json=genesisEpoch,proto3,oneof"`
}

func (*ListAttestationsRequest_Epoch) isListAttestationsRequest_QueryFilter() {}

func (*ListAttestationsRequest_GenesisEpoch) isListAttestationsRequest_QueryFilter() {}

type ListAttestationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attestations []*Attestation `protobuf:"bytes,1,rep,name=attestations,proto3" json:"attestations,omitempty"`
	// A pagination token returned from a previous call to `ListAttestations`
	// that indicates from where listing should continue.
	// This field is optional.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Total count of Attestations matching the request filter.
	TotalSize int32 `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
}

func (x *ListAttestationsResponse) Reset() {
	*x = ListAttestationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_node_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAttestationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAttestationsResponse) ProtoMessage() {}

func (x *ListAttestationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_node_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAttestationsResponse.ProtoReflect.Descriptor instead.
func (*ListAttestationsResponse) Descriptor() ([]byte, []int) {
	return file_consensus_node_proto_rawDescGZIP(), []int{3}
}

func (x *ListAttestationsResponse) GetAttestations() []*Attestation {
	if x != nil {
		return x.Attestations
	}
	return nil
}

func (x *ListAttestationsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListAttestationsResponse) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

type ListIndexedAttestationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexedAttestations []*IndexedAttestation `protobuf:"bytes,1,rep,name=indexed_attestations,json=indexedAttestations,proto3" json:"indexed_attestations,omitempty"`
	// A pagination token returned from a previous call to `ListIndexedAttestations`
	// that indicates from where listing should continue.
	// This field is optional.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Total count of Attestations matching the request filter.
	TotalSize int32 `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
}

func (x *ListIndexedAttestationsResponse) Reset() {
	*x = ListIndexedAttestationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_node_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIndexedAttestationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIndexedAttestationsResponse) ProtoMessage() {}

func (x *ListIndexedAttestationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_node_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIndexedAttestationsResponse.ProtoReflect.Descriptor instead.
func (*ListIndexedAttestationsResponse) Descriptor() ([]byte, []int) {
	return file_consensus_node_proto_rawDescGZIP(), []int{4}
}

func (x *ListIndexedAttestationsResponse) GetIndexedAttestations() []*IndexedAttestation {
	if x != nil {
		return x.IndexedAttestations
	}
	return nil
}

func (x *ListIndexedAttestationsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListIndexedAttestationsResponse) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

type ListBlocksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to QueryFilter:
	//	*ListBlocksRequest_Root
	//	*ListBlocksRequest_Slot
	//	*ListBlocksRequest_Epoch
	//	*ListBlocksRequest_Genesis
	QueryFilter isListBlocksRequest_QueryFilter `protobuf_oneof:"query_filter"`
	// The maximum number of Blocks to return in the response.
	// This field is optional.
	PageSize int32 `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A pagination token returned from a previous call to `ListBlocks`
	// that indicates where this listing should continue from.
	// This field is optional.
	PageToken string `protobuf:"bytes,6,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListBlocksRequest) Reset() {
	*x = ListBlocksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_node_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBlocksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBlocksRequest) ProtoMessage() {}

func (x *ListBlocksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_node_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBlocksRequest.ProtoReflect.Descriptor instead.
func (*ListBlocksRequest) Descriptor() ([]byte, []int) {
	return file_consensus_node_proto_rawDescGZIP(), []int{5}
}

func (m *ListBlocksRequest) GetQueryFilter() isListBlocksRequest_QueryFilter {
	if m != nil {
		return m.QueryFilter
	}
	return nil
}

func (x *ListBlocksRequest) GetRoot() []byte {
	if x, ok := x.GetQueryFilter().(*ListBlocksRequest_Root); ok {
		return x.Root
	}
	return nil
}

func (x *ListBlocksRequest) GetSlot() Slot {
	if x, ok := x.GetQueryFilter().(*ListBlocksRequest_Slot); ok {
		return x.Slot
	}
	return Slot(0)
}

func (x *ListBlocksRequest) GetEpoch() Epoch {
	if x, ok := x.GetQueryFilter().(*ListBlocksRequest_Epoch); ok {
		return x.Epoch
	}
	return Epoch(0)
}

func (x *ListBlocksRequest) GetGenesis() bool {
	if x, ok := x.GetQueryFilter().(*ListBlocksRequest_Genesis); ok {
		return x.Genesis
	}
	return false
}

func (x *ListBlocksRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListBlocksRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type isListBlocksRequest_QueryFilter interface {
	isListBlocksRequest_QueryFilter()
}

type ListBlocksRequest_Root struct {
	// Block root filter to return a single block.
	Root []byte `protobuf:"bytes,1,opt,name=root,proto3,oneof"`
}

type ListBlocksRequest_Slot struct {
	// Slot to lookup a block. If the slot is not yet finalized, this
	// criteria may yield multiple valid blocks if the node has seen blocks
	// from another fork.
	Slot Slot `protobuf:"varint,2,opt,name=slot,proto3,oneof" cast-type:"Slot"`
}

type ListBlocksRequest_Epoch struct {
	// The epoch number for which to retrieve blocks. If specified, this
	// will return all blocks found within the span of the specified epoch.
	Epoch Epoch `protobuf:"varint,3,opt,name=epoch,proto3,oneof" cast-type:"Epoch"`
}

type ListBlocksRequest_Genesis struct {
	// Optional criteria to retrieve genesis block.
	Genesis bool `protobuf:"varint,4,opt,name=genesis,proto3,oneof"`
}

func (*ListBlocksRequest_Root) isListBlocksRequest_QueryFilter() {}

func (*ListBlocksRequest_Slot) isListBlocksRequest_QueryFilter() {}

func (*ListBlocksRequest_Epoch) isListBlocksRequest_QueryFilter() {}

func (*ListBlocksRequest_Genesis) isListBlocksRequest_QueryFilter() {}

type ListBlocksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockContainers []*BlockContainer `protobuf:"bytes,1,rep,name=block_containers,json=blockContainers,proto3" json:"block_containers,omitempty"`
	// A pagination token returned from a previous call to `ListBlocks`
	// that indicates from where listing should continue.
	// This field is optional.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Total count of Blocks matching the request filter.
	TotalSize int32 `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
}

func (x *ListBlocksResponse) Reset() {
	*x = ListBlocksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_node_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBlocksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBlocksResponse) ProtoMessage() {}

func (x *ListBlocksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_node_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBlocksResponse.ProtoReflect.Descriptor instead.
func (*ListBlocksResponse) Descriptor() ([]byte, []int) {
	return file_consensus_node_proto_rawDescGZIP(), []int{6}
}

func (x *ListBlocksResponse) GetBlockContainers() []*BlockContainer {
	if x != nil {
		return x.BlockContainers
	}
	return nil
}

func (x *ListBlocksResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListBlocksResponse) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

// A container that contains the block, its corresponding root, and whether or
// not it is canonical in the chain.
type BlockContainer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 32 byte merkle tree root of contained block.
	BlockRoot []byte `protobuf:"bytes,1,opt,name=block_root,json=blockRoot,proto3" json:"block_root,omitempty"`
	// Boolean indicating whether the block is canonical.
	Canonical bool `protobuf:"varint,2,opt,name=canonical,proto3" json:"canonical,omitempty"`
	// The desired block to be returned.
	//
	// Types that are assignable to Block:
	//	*BlockContainer_AltairBlock
	Block isBlockContainer_Block `protobuf_oneof:"block"`
}

func (x *BlockContainer) Reset() {
	*x = BlockContainer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_node_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockContainer) ProtoMessage() {}

func (x *BlockContainer) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_node_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockContainer.ProtoReflect.Descriptor instead.
func (*BlockContainer) Descriptor() ([]byte, []int) {
	return file_consensus_node_proto_rawDescGZIP(), []int{7}
}

func (x *BlockContainer) GetBlockRoot() []byte {
	if x != nil {
		return x.BlockRoot
	}
	return nil
}

func (x *BlockContainer) GetCanonical() bool {
	if x != nil {
		return x.Canonical
	}
	return false
}

func (m *BlockContainer) GetBlock() isBlockContainer_Block {
	if m != nil {
		return m.Block
	}
	return nil
}

func (x *BlockContainer) GetAltairBlock() *SignedBlock {
	if x, ok := x.GetBlock().(*BlockContainer_AltairBlock); ok {
		return x.AltairBlock
	}
	return nil
}

type isBlockContainer_Block interface {
	isBlockContainer_Block()
}

type BlockContainer_AltairBlock struct {
	// Representing an altair block.
	AltairBlock *SignedBlock `protobuf:"bytes,4,opt,name=altair_block,json=altairBlock,proto3,oneof"`
}

func (*BlockContainer_AltairBlock) isBlockContainer_Block() {}

// Information about the head of the chain.
type ChainHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Slot of the head block.
	HeadSlot Slot `protobuf:"varint,1,opt,name=head_slot,json=headSlot,proto3" json:"head_slot,omitempty" cast-type:"Slot"`
	// Epoch of the head block.
	HeadEpoch Epoch `protobuf:"varint,2,opt,name=head_epoch,json=headEpoch,proto3" json:"head_epoch,omitempty" cast-type:"Epoch"`
	// 32 byte merkle tree root of the canonical head block in the node.
	HeadBlockRoot []byte `protobuf:"bytes,3,opt,name=head_block_root,json=headBlockRoot,proto3" json:"head_block_root,omitempty" ssz-size:"32"`
	// Most recent slot that contains the finalized block.
	FinalizedSlot Slot `protobuf:"varint,4,opt,name=finalized_slot,json=finalizedSlot,proto3" json:"finalized_slot,omitempty" cast-type:"Slot"`
	// Epoch of the finalized block.
	FinalizedEpoch Epoch `protobuf:"varint,5,opt,name=finalized_epoch,json=finalizedEpoch,proto3" json:"finalized_epoch,omitempty" cast-type:"Epoch"`
	// Most recent 32 byte finalized block root.
	FinalizedBlockRoot []byte `protobuf:"bytes,6,opt,name=finalized_block_root,json=finalizedBlockRoot,proto3" json:"finalized_block_root,omitempty" ssz-size:"32"`
	// Most recent slot that contains the justified block.
	JustifiedSlot Slot `protobuf:"varint,7,opt,name=justified_slot,json=justifiedSlot,proto3" json:"justified_slot,omitempty" cast-type:"Slot"`
	// Epoch of the justified block.
	JustifiedEpoch Epoch `protobuf:"varint,8,opt,name=justified_epoch,json=justifiedEpoch,proto3" json:"justified_epoch,omitempty" cast-type:"Epoch"`
	// Most recent 32 byte justified block root.
	JustifiedBlockRoot []byte `protobuf:"bytes,9,opt,name=justified_block_root,json=justifiedBlockRoot,proto3" json:"justified_block_root,omitempty" ssz-size:"32"`
	// Most recent slot that contains the previous justified block.
	PreviousJustifiedSlot Slot `protobuf:"varint,10,opt,name=previous_justified_slot,json=previousJustifiedSlot,proto3" json:"previous_justified_slot,omitempty" cast-type:"Slot"`
	// Epoch of the previous justified block.
	PreviousJustifiedEpoch Epoch `protobuf:"varint,11,opt,name=previous_justified_epoch,json=previousJustifiedEpoch,proto3" json:"previous_justified_epoch,omitempty" cast-type:"Epoch"`
	// Previous 32 byte justified block root.
	PreviousJustifiedBlockRoot []byte `protobuf:"bytes,12,opt,name=previous_justified_block_root,json=previousJustifiedBlockRoot,proto3" json:"previous_justified_block_root,omitempty" ssz-size:"32"`
}

func (x *ChainHead) Reset() {
	*x = ChainHead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_node_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainHead) ProtoMessage() {}

func (x *ChainHead) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_node_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainHead.ProtoReflect.Descriptor instead.
func (*ChainHead) Descriptor() ([]byte, []int) {
	return file_consensus_node_proto_rawDescGZIP(), []int{8}
}

func (x *ChainHead) GetHeadSlot() Slot {
	if x != nil {
		return x.HeadSlot
	}
	return Slot(0)
}

func (x *ChainHead) GetHeadEpoch() Epoch {
	if x != nil {
		return x.HeadEpoch
	}
	return Epoch(0)
}

func (x *ChainHead) GetHeadBlockRoot() []byte {
	if x != nil {
		return x.HeadBlockRoot
	}
	return nil
}

func (x *ChainHead) GetFinalizedSlot() Slot {
	if x != nil {
		return x.FinalizedSlot
	}
	return Slot(0)
}

func (x *ChainHead) GetFinalizedEpoch() Epoch {
	if x != nil {
		return x.FinalizedEpoch
	}
	return Epoch(0)
}

func (x *ChainHead) GetFinalizedBlockRoot() []byte {
	if x != nil {
		return x.FinalizedBlockRoot
	}
	return nil
}

func (x *ChainHead) GetJustifiedSlot() Slot {
	if x != nil {
		return x.JustifiedSlot
	}
	return Slot(0)
}

func (x *ChainHead) GetJustifiedEpoch() Epoch {
	if x != nil {
		return x.JustifiedEpoch
	}
	return Epoch(0)
}

func (x *ChainHead) GetJustifiedBlockRoot() []byte {
	if x != nil {
		return x.JustifiedBlockRoot
	}
	return nil
}

func (x *ChainHead) GetPreviousJustifiedSlot() Slot {
	if x != nil {
		return x.PreviousJustifiedSlot
	}
	return Slot(0)
}

func (x *ChainHead) GetPreviousJustifiedEpoch() Epoch {
	if x != nil {
		return x.PreviousJustifiedEpoch
	}
	return Epoch(0)
}

func (x *ChainHead) GetPreviousJustifiedBlockRoot() []byte {
	if x != nil {
		return x.PreviousJustifiedBlockRoot
	}
	return nil
}

type ListCommitteesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to QueryFilter:
	//	*ListCommitteesRequest_Epoch
	//	*ListCommitteesRequest_Genesis
	QueryFilter isListCommitteesRequest_QueryFilter `protobuf_oneof:"query_filter"`
}

func (x *ListCommitteesRequest) Reset() {
	*x = ListCommitteesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_node_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCommitteesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCommitteesRequest) ProtoMessage() {}

func (x *ListCommitteesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_node_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCommitteesRequest.ProtoReflect.Descriptor instead.
func (*ListCommitteesRequest) Descriptor() ([]byte, []int) {
	return file_consensus_node_proto_rawDescGZIP(), []int{9}
}

func (m *ListCommitteesRequest) GetQueryFilter() isListCommitteesRequest_QueryFilter {
	if m != nil {
		return m.QueryFilter
	}
	return nil
}

func (x *ListCommitteesRequest) GetEpoch() Epoch {
	if x, ok := x.GetQueryFilter().(*ListCommitteesRequest_Epoch); ok {
		return x.Epoch
	}
	return Epoch(0)
}

func (x *ListCommitteesRequest) GetGenesis() bool {
	if x, ok := x.GetQueryFilter().(*ListCommitteesRequest_Genesis); ok {
		return x.Genesis
	}
	return false
}

type isListCommitteesRequest_QueryFilter interface {
	isListCommitteesRequest_QueryFilter()
}

type ListCommitteesRequest_Epoch struct {
	// Optional criteria to retrieve data at a specific epoch.
	Epoch Epoch `protobuf:"varint,1,opt,name=epoch,proto3,oneof" cast-type:"Epoch"`
}

type ListCommitteesRequest_Genesis struct {
	// Optional criteria to retrieve genesis data.
	Genesis bool `protobuf:"varint,2,opt,name=genesis,proto3,oneof"`
}

func (*ListCommitteesRequest_Epoch) isListCommitteesRequest_QueryFilter() {}

func (*ListCommitteesRequest_Genesis) isListCommitteesRequest_QueryFilter() {}

type Committees struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The epoch for which the committees in the response belong to.
	Epoch Epoch `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty" cast-type:"Epoch"`
	// A map of validator committees by slot.
	Committees map[uint64]*Committees_CommitteesList `protobuf:"bytes,2,rep,name=committees,proto3" json:"committees,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The number of active validators at the given epoch.
	ActiveValidatorCount uint64 `protobuf:"varint,3,opt,name=active_validator_count,json=activeValidatorCount,proto3" json:"active_validator_count,omitempty"`
}

func (x *Committees) Reset() {
	*x = Committees{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_node_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Committees) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Committees) ProtoMessage() {}

func (x *Committees) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_node_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Committees.ProtoReflect.Descriptor instead.
func (*Committees) Descriptor() ([]byte, []int) {
	return file_consensus_node_proto_rawDescGZIP(), []int{10}
}

func (x *Committees) GetEpoch() Epoch {
	if x != nil {
		return x.Epoch
	}
	return Epoch(0)
}

func (x *Committees) GetCommittees() map[uint64]*Committees_CommitteesList {
	if x != nil {
		return x.Committees
	}
	return nil
}

func (x *Committees) GetActiveValidatorCount() uint64 {
	if x != nil {
		return x.ActiveValidatorCount
	}
	return 0
}

type ListValidatorBalancesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to QueryFilter:
	//	*ListValidatorBalancesRequest_Epoch
	//	*ListValidatorBalancesRequest_Genesis
	QueryFilter isListValidatorBalancesRequest_QueryFilter `protobuf_oneof:"query_filter"`
	// Validator 48 byte BLS public keys to filter validators for the given
	// epoch.
	PublicKeys [][]byte `protobuf:"bytes,3,rep,name=public_keys,json=publicKeys,proto3" json:"public_keys,omitempty" ssz-size:"?,48"`
	// Validator indices to filter validators for the given epoch.
	Indices []ValidatorIndex `protobuf:"varint,4,rep,packed,name=indices,proto3" json:"indices,omitempty" cast-type:"ValidatorIndex"`
	// The maximum number of Validators to return in the response.
	// This field is optional.
	PageSize int32 `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A pagination token returned from a previous call to `GetValidators`
	// that indicates where this listing should continue from.
	// This field is optional.
	PageToken string `protobuf:"bytes,6,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListValidatorBalancesRequest) Reset() {
	*x = ListValidatorBalancesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_node_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListValidatorBalancesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListValidatorBalancesRequest) ProtoMessage() {}

func (x *ListValidatorBalancesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_node_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListValidatorBalancesRequest.ProtoReflect.Descriptor instead.
func (*ListValidatorBalancesRequest) Descriptor() ([]byte, []int) {
	return file_consensus_node_proto_rawDescGZIP(), []int{11}
}

func (m *ListValidatorBalancesRequest) GetQueryFilter() isListValidatorBalancesRequest_QueryFilter {
	if m != nil {
		return m.QueryFilter
	}
	return nil
}

func (x *ListValidatorBalancesRequest) GetEpoch() Epoch {
	if x, ok := x.GetQueryFilter().(*ListValidatorBalancesRequest_Epoch); ok {
		return x.Epoch
	}
	return Epoch(0)
}

func (x *ListValidatorBalancesRequest) GetGenesis() bool {
	if x, ok := x.GetQueryFilter().(*ListValidatorBalancesRequest_Genesis); ok {
		return x.Genesis
	}
	return false
}

func (x *ListValidatorBalancesRequest) GetPublicKeys() [][]byte {
	if x != nil {
		return x.PublicKeys
	}
	return nil
}

func (x *ListValidatorBalancesRequest) GetIndices() []ValidatorIndex {
	if x != nil {
		return x.Indices
	}
	return []ValidatorIndex(nil)
}

func (x *ListValidatorBalancesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListValidatorBalancesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type isListValidatorBalancesRequest_QueryFilter interface {
	isListValidatorBalancesRequest_QueryFilter()
}

type ListValidatorBalancesRequest_Epoch struct {
	// Optional criteria to retrieve balances at a specific epoch.
	Epoch Epoch `protobuf:"varint,1,opt,name=epoch,proto3,oneof" cast-type:"Epoch"`
}

type ListValidatorBalancesRequest_Genesis struct {
	// Optional criteria to retrieve the genesis list of balances.
	Genesis bool `protobuf:"varint,2,opt,name=genesis,proto3,oneof"`
}

func (*ListValidatorBalancesRequest_Epoch) isListValidatorBalancesRequest_QueryFilter() {}

func (*ListValidatorBalancesRequest_Genesis) isListValidatorBalancesRequest_QueryFilter() {}

type ValidatorBalances struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Epoch which the state was considered to determine the validator balances.
	Epoch    Epoch                        `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty" cast-type:"Epoch"`
	Balances []*ValidatorBalances_Balance `protobuf:"bytes,2,rep,name=balances,proto3" json:"balances,omitempty"`
	// A pagination token returned from a previous call to `GetListValidatorBalances`
	// that indicates from where listing should continue.
	NextPageToken string `protobuf:"bytes,3,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Total count of items matching the request filter.
	TotalSize int32 `protobuf:"varint,4,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
}

func (x *ValidatorBalances) Reset() {
	*x = ValidatorBalances{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_node_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatorBalances) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorBalances) ProtoMessage() {}

func (x *ValidatorBalances) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_node_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorBalances.ProtoReflect.Descriptor instead.
func (*ValidatorBalances) Descriptor() ([]byte, []int) {
	return file_consensus_node_proto_rawDescGZIP(), []int{12}
}

func (x *ValidatorBalances) GetEpoch() Epoch {
	if x != nil {
		return x.Epoch
	}
	return Epoch(0)
}

func (x *ValidatorBalances) GetBalances() []*ValidatorBalances_Balance {
	if x != nil {
		return x.Balances
	}
	return nil
}

func (x *ValidatorBalances) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ValidatorBalances) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

type ListValidatorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to QueryFilter:
	//	*ListValidatorsRequest_Epoch
	//	*ListValidatorsRequest_Genesis
	QueryFilter isListValidatorsRequest_QueryFilter `protobuf_oneof:"query_filter"`
	// Specify whether or not you want to retrieve only active validators.
	Active bool `protobuf:"varint,3,opt,name=active,proto3" json:"active,omitempty"`
	// The maximum number of Validators to return in the response.
	// This field is optional.
	PageSize int32 `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A pagination token returned from a previous call to `GetValidators`
	// that indicates where this listing should continue from.
	// This field is optional.
	PageToken string `protobuf:"bytes,5,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Specify which validators you would like to retrieve by their public keys.
	// This field is optional.
	PublicKeys [][]byte `protobuf:"bytes,6,rep,name=public_keys,json=publicKeys,proto3" json:"public_keys,omitempty"`
	// Specify which validators you would like to retrieve by their indices.
	// This field is optional.
	Indices []ValidatorIndex `protobuf:"varint,7,rep,packed,name=indices,proto3" json:"indices,omitempty" cast-type:"ValidatorIndex"`
}

func (x *ListValidatorsRequest) Reset() {
	*x = ListValidatorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_node_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListValidatorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListValidatorsRequest) ProtoMessage() {}

func (x *ListValidatorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_node_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListValidatorsRequest.ProtoReflect.Descriptor instead.
func (*ListValidatorsRequest) Descriptor() ([]byte, []int) {
	return file_consensus_node_proto_rawDescGZIP(), []int{13}
}

func (m *ListValidatorsRequest) GetQueryFilter() isListValidatorsRequest_QueryFilter {
	if m != nil {
		return m.QueryFilter
	}
	return nil
}

func (x *ListValidatorsRequest) GetEpoch() Epoch {
	if x, ok := x.GetQueryFilter().(*ListValidatorsRequest_Epoch); ok {
		return x.Epoch
	}
	return Epoch(0)
}

func (x *ListValidatorsRequest) GetGenesis() bool {
	if x, ok := x.GetQueryFilter().(*ListValidatorsRequest_Genesis); ok {
		return x.Genesis
	}
	return false
}

func (x *ListValidatorsRequest) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *ListValidatorsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListValidatorsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListValidatorsRequest) GetPublicKeys() [][]byte {
	if x != nil {
		return x.PublicKeys
	}
	return nil
}

func (x *ListValidatorsRequest) GetIndices() []ValidatorIndex {
	if x != nil {
		return x.Indices
	}
	return []ValidatorIndex(nil)
}

type isListValidatorsRequest_QueryFilter interface {
	isListValidatorsRequest_QueryFilter()
}

type ListValidatorsRequest_Epoch struct {
	// Optional criteria to retrieve validators at a specific epoch.
	// Omitting this field or setting it to zero will retrieve a response
	// with the current active validator set.
	Epoch Epoch `protobuf:"varint,1,opt,name=epoch,proto3,oneof" cast-type:"Epoch"`
}

type ListValidatorsRequest_Genesis struct {
	// Optional criteria to retrieve the genesis set of validators.
	Genesis bool `protobuf:"varint,2,opt,name=genesis,proto3,oneof"`
}

func (*ListValidatorsRequest_Epoch) isListValidatorsRequest_QueryFilter() {}

func (*ListValidatorsRequest_Genesis) isListValidatorsRequest_QueryFilter() {}

type GetValidatorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to QueryFilter:
	//	*GetValidatorRequest_Index
	//	*GetValidatorRequest_PublicKey
	QueryFilter isGetValidatorRequest_QueryFilter `protobuf_oneof:"query_filter"`
}

func (x *GetValidatorRequest) Reset() {
	*x = GetValidatorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_node_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetValidatorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidatorRequest) ProtoMessage() {}

func (x *GetValidatorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_node_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidatorRequest.ProtoReflect.Descriptor instead.
func (*GetValidatorRequest) Descriptor() ([]byte, []int) {
	return file_consensus_node_proto_rawDescGZIP(), []int{14}
}

func (m *GetValidatorRequest) GetQueryFilter() isGetValidatorRequest_QueryFilter {
	if m != nil {
		return m.QueryFilter
	}
	return nil
}

func (x *GetValidatorRequest) GetIndex() ValidatorIndex {
	if x, ok := x.GetQueryFilter().(*GetValidatorRequest_Index); ok {
		return x.Index
	}
	return ValidatorIndex(0)
}

func (x *GetValidatorRequest) GetPublicKey() []byte {
	if x, ok := x.GetQueryFilter().(*GetValidatorRequest_PublicKey); ok {
		return x.PublicKey
	}
	return nil
}

type isGetValidatorRequest_QueryFilter interface {
	isGetValidatorRequest_QueryFilter()
}

type GetValidatorRequest_Index struct {
	// Validator index in the registry.
	Index ValidatorIndex `protobuf:"varint,1,opt,name=index,proto3,oneof" cast-type:"ValidatorIndex"`
}

type GetValidatorRequest_PublicKey struct {
	// 48 byte validator public key.
	PublicKey []byte `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3,oneof" ssz-size:"48"`
}

func (*GetValidatorRequest_Index) isGetValidatorRequest_QueryFilter() {}

func (*GetValidatorRequest_PublicKey) isGetValidatorRequest_QueryFilter() {}

type Validators struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Epoch which the state was considered to determine the active validator
	// set. This field is not optional. Zero value epoch indicates the validator
	// set is from the Ethereum proof of stake genesis set.
	Epoch         Epoch                            `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty" cast-type:"Epoch"`
	ValidatorList []*Validators_ValidatorContainer `protobuf:"bytes,2,rep,name=validator_list,json=validatorList,proto3" json:"validator_list,omitempty"`
	// A pagination token returned from a previous call to `GetValidators`
	// that indicates from where listing should continue.
	// This field is optional.
	NextPageToken string `protobuf:"bytes,3,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Total count of Validators matching the request filter.
	TotalSize int32 `protobuf:"varint,4,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
}

func (x *Validators) Reset() {
	*x = Validators{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_node_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Validators) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Validators) ProtoMessage() {}

func (x *Validators) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_node_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Validators.ProtoReflect.Descriptor instead.
func (*Validators) Descriptor() ([]byte, []int) {
	return file_consensus_node_proto_rawDescGZIP(), []int{15}
}

func (x *Validators) GetEpoch() Epoch {
	if x != nil {
		return x.Epoch
	}
	return Epoch(0)
}

func (x *Validators) GetValidatorList() []*Validators_ValidatorContainer {
	if x != nil {
		return x.ValidatorList
	}
	return nil
}

func (x *Validators) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *Validators) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

type GetValidatorActiveSetChangesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to QueryFilter:
	//	*GetValidatorActiveSetChangesRequest_Epoch
	//	*GetValidatorActiveSetChangesRequest_Genesis
	QueryFilter isGetValidatorActiveSetChangesRequest_QueryFilter `protobuf_oneof:"query_filter"`
}

func (x *GetValidatorActiveSetChangesRequest) Reset() {
	*x = GetValidatorActiveSetChangesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_node_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetValidatorActiveSetChangesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidatorActiveSetChangesRequest) ProtoMessage() {}

func (x *GetValidatorActiveSetChangesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_node_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidatorActiveSetChangesRequest.ProtoReflect.Descriptor instead.
func (*GetValidatorActiveSetChangesRequest) Descriptor() ([]byte, []int) {
	return file_consensus_node_proto_rawDescGZIP(), []int{16}
}

func (m *GetValidatorActiveSetChangesRequest) GetQueryFilter() isGetValidatorActiveSetChangesRequest_QueryFilter {
	if m != nil {
		return m.QueryFilter
	}
	return nil
}

func (x *GetValidatorActiveSetChangesRequest) GetEpoch() Epoch {
	if x, ok := x.GetQueryFilter().(*GetValidatorActiveSetChangesRequest_Epoch); ok {
		return x.Epoch
	}
	return Epoch(0)
}

func (x *GetValidatorActiveSetChangesRequest) GetGenesis() bool {
	if x, ok := x.GetQueryFilter().(*GetValidatorActiveSetChangesRequest_Genesis); ok {
		return x.Genesis
	}
	return false
}

type isGetValidatorActiveSetChangesRequest_QueryFilter interface {
	isGetValidatorActiveSetChangesRequest_QueryFilter()
}

type GetValidatorActiveSetChangesRequest_Epoch struct {
	// Optional criteria to retrieve balances at a specific epoch.
	Epoch Epoch `protobuf:"varint,1,opt,name=epoch,proto3,oneof" cast-type:"Epoch"`
}

type GetValidatorActiveSetChangesRequest_Genesis struct {
	// Optional criteria to retrieve the genesis list of balances.
	Genesis bool `protobuf:"varint,2,opt,name=genesis,proto3,oneof"`
}

func (*GetValidatorActiveSetChangesRequest_Epoch) isGetValidatorActiveSetChangesRequest_QueryFilter() {
}

func (*GetValidatorActiveSetChangesRequest_Genesis) isGetValidatorActiveSetChangesRequest_QueryFilter() {
}

type ActiveSetChanges struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Epoch which the state was considered to determine the active validator
	// set.
	Epoch Epoch `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty" cast-type:"Epoch"`
	// 48 byte validator public keys that have been activated in the given epoch.
	ActivatedPublicKeys [][]byte `protobuf:"bytes,2,rep,name=activated_public_keys,json=activatedPublicKeys,proto3" json:"activated_public_keys,omitempty" ssz-size:"?,48"`
	// Indices of validators activated in the given epoch.
	ActivatedIndices []ValidatorIndex `protobuf:"varint,3,rep,packed,name=activated_indices,json=activatedIndices,proto3" json:"activated_indices,omitempty" cast-type:"ValidatorIndex"`
	// 48 byte validator public keys that have been voluntarily exited in the given epoch.
	ExitedPublicKeys [][]byte `protobuf:"bytes,4,rep,name=exited_public_keys,json=exitedPublicKeys,proto3" json:"exited_public_keys,omitempty" ssz-size:"?,48"`
	// Indices of validators exited in the given epoch.
	ExitedIndices []ValidatorIndex `protobuf:"varint,5,rep,packed,name=exited_indices,json=exitedIndices,proto3" json:"exited_indices,omitempty" cast-type:"ValidatorIndex"`
	// 48 byte validator public keys that have been slashed in the given epoch.
	SlashedPublicKeys [][]byte `protobuf:"bytes,6,rep,name=slashed_public_keys,json=slashedPublicKeys,proto3" json:"slashed_public_keys,omitempty" ssz-size:"?,48"`
	// Indices of validators slashed in the given epoch.
	SlashedIndices []ValidatorIndex `protobuf:"varint,7,rep,packed,name=slashed_indices,json=slashedIndices,proto3" json:"slashed_indices,omitempty" cast-type:"ValidatorIndex"`
	// 48 byte validator public keys that have been involuntarily ejected in this epoch.
	EjectedPublicKeys [][]byte `protobuf:"bytes,8,rep,name=ejected_public_keys,json=ejectedPublicKeys,proto3" json:"ejected_public_keys,omitempty" ssz-size:"?,48"`
	// Indices of validators ejected in the given epoch.
	EjectedIndices []ValidatorIndex `protobuf:"varint,9,rep,packed,name=ejected_indices,json=ejectedIndices,proto3" json:"ejected_indices,omitempty" cast-type:"ValidatorIndex"`
}

func (x *ActiveSetChanges) Reset() {
	*x = ActiveSetChanges{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_node_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActiveSetChanges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActiveSetChanges) ProtoMessage() {}

func (x *ActiveSetChanges) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_node_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActiveSetChanges.ProtoReflect.Descriptor instead.
func (*ActiveSetChanges) Descriptor() ([]byte, []int) {
	return file_consensus_node_proto_rawDescGZIP(), []int{17}
}

func (x *ActiveSetChanges) GetEpoch() Epoch {
	if x != nil {
		return x.Epoch
	}
	return Epoch(0)
}

func (x *ActiveSetChanges) GetActivatedPublicKeys() [][]byte {
	if x != nil {
		return x.ActivatedPublicKeys
	}
	return nil
}

func (x *ActiveSetChanges) GetActivatedIndices() []ValidatorIndex {
	if x != nil {
		return x.ActivatedIndices
	}
	return []ValidatorIndex(nil)
}

func (x *ActiveSetChanges) GetExitedPublicKeys() [][]byte {
	if x != nil {
		return x.ExitedPublicKeys
	}
	return nil
}

func (x *ActiveSetChanges) GetExitedIndices() []ValidatorIndex {
	if x != nil {
		return x.ExitedIndices
	}
	return []ValidatorIndex(nil)
}

func (x *ActiveSetChanges) GetSlashedPublicKeys() [][]byte {
	if x != nil {
		return x.SlashedPublicKeys
	}
	return nil
}

func (x *ActiveSetChanges) GetSlashedIndices() []ValidatorIndex {
	if x != nil {
		return x.SlashedIndices
	}
	return []ValidatorIndex(nil)
}

func (x *ActiveSetChanges) GetEjectedPublicKeys() [][]byte {
	if x != nil {
		return x.EjectedPublicKeys
	}
	return nil
}

func (x *ActiveSetChanges) GetEjectedIndices() []ValidatorIndex {
	if x != nil {
		return x.EjectedIndices
	}
	return []ValidatorIndex(nil)
}

type ValidatorPerformanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 48 byte validator public keys.
	//
	// Deprecated: Do not use.
	PublicKeys [][]byte `protobuf:"bytes,1,rep,name=public_keys,json=publicKeys,proto3" json:"public_keys,omitempty"`
	// A list of validator indices to retrieve performance by their indices.
	Indices []ValidatorIndex `protobuf:"varint,2,rep,packed,name=indices,proto3" json:"indices,omitempty" cast-type:"ValidatorIndex"`
}

func (x *ValidatorPerformanceRequest) Reset() {
	*x = ValidatorPerformanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_node_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatorPerformanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorPerformanceRequest) ProtoMessage() {}

func (x *ValidatorPerformanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_node_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorPerformanceRequest.ProtoReflect.Descriptor instead.
func (*ValidatorPerformanceRequest) Descriptor() ([]byte, []int) {
	return file_consensus_node_proto_rawDescGZIP(), []int{18}
}

// Deprecated: Do not use.
func (x *ValidatorPerformanceRequest) GetPublicKeys() [][]byte {
	if x != nil {
		return x.PublicKeys
	}
	return nil
}

func (x *ValidatorPerformanceRequest) GetIndices() []ValidatorIndex {
	if x != nil {
		return x.Indices
	}
	return []ValidatorIndex(nil)
}

type ValidatorPerformanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of validator effective balances mapped 1-to-1 with the request's
	// public keys.
	CurrentEffectiveBalances []uint64 `protobuf:"varint,1,rep,packed,name=current_effective_balances,json=currentEffectiveBalances,proto3" json:"current_effective_balances,omitempty"`
	// The slot of when validator's attestation got included in the chain at previous epoch, the slot
	// is mapped 1-to-1 with the request's public keys.
	// Deprecated: This field can no longer be fetched from the state after the Altair hard fork.
	//
	// Deprecated: Do not use.
	InclusionSlots []Slot `protobuf:"varint,2,rep,packed,name=inclusion_slots,json=inclusionSlots,proto3" json:"inclusion_slots,omitempty" cast-type:"Slot"`
	// The distance of when validator submitted and got included in the chain, the distance
	// is mapped 1-to-1 with the request's public keys.
	// Deprecated: This field can no longer be fetched from the state after the Altair hard fork.
	//
	// Deprecated: Do not use.
	InclusionDistances []Slot `protobuf:"varint,3,rep,packed,name=inclusion_distances,json=inclusionDistances,proto3" json:"inclusion_distances,omitempty" cast-type:"Slot"`
	// Whether the list of validator recently correctly voted for source at previous epoch, the result
	// is mapped 1-to-1 with the request's public keys.
	CorrectlyVotedSource []bool `protobuf:"varint,4,rep,packed,name=correctly_voted_source,json=correctlyVotedSource,proto3" json:"correctly_voted_source,omitempty"`
	// Whether the list of validator recently correctly voted for target at previous epoch, the result
	// is mapped 1-to-1 with the request's public keys.
	CorrectlyVotedTarget []bool `protobuf:"varint,5,rep,packed,name=correctly_voted_target,json=correctlyVotedTarget,proto3" json:"correctly_voted_target,omitempty"`
	// Whether the list of validator recently correctly voted for head at previous epoch, the result
	// is mapped 1-to-1 with the request's public keys.
	CorrectlyVotedHead []bool `protobuf:"varint,6,rep,packed,name=correctly_voted_head,json=correctlyVotedHead,proto3" json:"correctly_voted_head,omitempty"`
	// The balance of validators before epoch transition, the balance is mapped 1-to-1 with the requests'
	// public keys.
	BalancesBeforeEpochTransition []uint64 `protobuf:"varint,7,rep,packed,name=balances_before_epoch_transition,json=balancesBeforeEpochTransition,proto3" json:"balances_before_epoch_transition,omitempty"`
	// The balance of validators after epoch transition, the balance is mapped 1-to-1 with the requests'
	// public keys.
	BalancesAfterEpochTransition []uint64 `protobuf:"varint,8,rep,packed,name=balances_after_epoch_transition,json=balancesAfterEpochTransition,proto3" json:"balances_after_epoch_transition,omitempty"`
	// The total number of validators from the request not found in the chain.
	MissingValidators [][]byte `protobuf:"bytes,9,rep,name=missing_validators,json=missingValidators,proto3" json:"missing_validators,omitempty"`
	// The average active validator balance in the chain.
	AverageActiveValidatorBalance float32 `protobuf:"fixed32,10,opt,name=average_active_validator_balance,json=averageActiveValidatorBalance,proto3" json:"average_active_validator_balance,omitempty"`
	// The public keys in the order they are in of the response.
	PublicKeys [][]byte `protobuf:"bytes,11,rep,name=public_keys,json=publicKeys,proto3" json:"public_keys,omitempty" ssz-size:"?,48"`
	// The inactivity score of the validator tracks validator participation. [New in Altair]
	InactivityScores []uint64 `protobuf:"varint,12,rep,packed,name=inactivity_scores,json=inactivityScores,proto3" json:"inactivity_scores,omitempty"`
}

func (x *ValidatorPerformanceResponse) Reset() {
	*x = ValidatorPerformanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_node_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatorPerformanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorPerformanceResponse) ProtoMessage() {}

func (x *ValidatorPerformanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_node_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorPerformanceResponse.ProtoReflect.Descriptor instead.
func (*ValidatorPerformanceResponse) Descriptor() ([]byte, []int) {
	return file_consensus_node_proto_rawDescGZIP(), []int{19}
}

func (x *ValidatorPerformanceResponse) GetCurrentEffectiveBalances() []uint64 {
	if x != nil {
		return x.CurrentEffectiveBalances
	}
	return nil
}

// Deprecated: Do not use.
func (x *ValidatorPerformanceResponse) GetInclusionSlots() []Slot {
	if x != nil {
		return x.InclusionSlots
	}
	return []Slot(nil)
}

// Deprecated: Do not use.
func (x *ValidatorPerformanceResponse) GetInclusionDistances() []Slot {
	if x != nil {
		return x.InclusionDistances
	}
	return []Slot(nil)
}

func (x *ValidatorPerformanceResponse) GetCorrectlyVotedSource() []bool {
	if x != nil {
		return x.CorrectlyVotedSource
	}
	return nil
}

func (x *ValidatorPerformanceResponse) GetCorrectlyVotedTarget() []bool {
	if x != nil {
		return x.CorrectlyVotedTarget
	}
	return nil
}

func (x *ValidatorPerformanceResponse) GetCorrectlyVotedHead() []bool {
	if x != nil {
		return x.CorrectlyVotedHead
	}
	return nil
}

func (x *ValidatorPerformanceResponse) GetBalancesBeforeEpochTransition() []uint64 {
	if x != nil {
		return x.BalancesBeforeEpochTransition
	}
	return nil
}

func (x *ValidatorPerformanceResponse) GetBalancesAfterEpochTransition() []uint64 {
	if x != nil {
		return x.BalancesAfterEpochTransition
	}
	return nil
}

func (x *ValidatorPerformanceResponse) GetMissingValidators() [][]byte {
	if x != nil {
		return x.MissingValidators
	}
	return nil
}

func (x *ValidatorPerformanceResponse) GetAverageActiveValidatorBalance() float32 {
	if x != nil {
		return x.AverageActiveValidatorBalance
	}
	return 0
}

func (x *ValidatorPerformanceResponse) GetPublicKeys() [][]byte {
	if x != nil {
		return x.PublicKeys
	}
	return nil
}

func (x *ValidatorPerformanceResponse) GetInactivityScores() []uint64 {
	if x != nil {
		return x.InactivityScores
	}
	return nil
}

type ValidatorQueue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The amount of ether in gwei allowed to enter or exit the active
	// validator set.
	ChurnLimit uint64 `protobuf:"varint,1,opt,name=churn_limit,json=churnLimit,proto3" json:"churn_limit,omitempty"`
	// Ordered list of 48 byte public keys awaiting activation. 0th index is the
	// next key to be processed.
	//
	// Deprecated: Do not use.
	ActivationPublicKeys [][]byte `protobuf:"bytes,2,rep,name=activation_public_keys,json=activationPublicKeys,proto3" json:"activation_public_keys,omitempty" ssz-size:"?,48"`
	// Ordered list of public keys awaiting exit. 0th index is the next key to
	// be processed.
	//
	// Deprecated: Do not use.
	ExitPublicKeys [][]byte `protobuf:"bytes,3,rep,name=exit_public_keys,json=exitPublicKeys,proto3" json:"exit_public_keys,omitempty" ssz-size:"?,48"`
	// Ordered list of validator indices awaiting activation. 0th item in the list is the
	// next validator index to be processed.
	ActivationValidatorIndices []ValidatorIndex `protobuf:"varint,4,rep,packed,name=activation_validator_indices,json=activationValidatorIndices,proto3" json:"activation_validator_indices,omitempty" cast-type:"ValidatorIndex"`
	// Ordered list of validator indices awaiting exit. 0th item in the list is the
	// next validator index to be processed.
	ExitValidatorIndices []ValidatorIndex `protobuf:"varint,5,rep,packed,name=exit_validator_indices,json=exitValidatorIndices,proto3" json:"exit_validator_indices,omitempty" cast-type:"ValidatorIndex"`
}

func (x *ValidatorQueue) Reset() {
	*x = ValidatorQueue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_node_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatorQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorQueue) ProtoMessage() {}

func (x *ValidatorQueue) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_node_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorQueue.ProtoReflect.Descriptor instead.
func (*ValidatorQueue) Descriptor() ([]byte, []int) {
	return file_consensus_node_proto_rawDescGZIP(), []int{20}
}

func (x *ValidatorQueue) GetChurnLimit() uint64 {
	if x != nil {
		return x.ChurnLimit
	}
	return 0
}

// Deprecated: Do not use.
func (x *ValidatorQueue) GetActivationPublicKeys() [][]byte {
	if x != nil {
		return x.ActivationPublicKeys
	}
	return nil
}

// Deprecated: Do not use.
func (x *ValidatorQueue) GetExitPublicKeys() [][]byte {
	if x != nil {
		return x.ExitPublicKeys
	}
	return nil
}

func (x *ValidatorQueue) GetActivationValidatorIndices() []ValidatorIndex {
	if x != nil {
		return x.ActivationValidatorIndices
	}
	return []ValidatorIndex(nil)
}

func (x *ValidatorQueue) GetExitValidatorIndices() []ValidatorIndex {
	if x != nil {
		return x.ExitValidatorIndices
	}
	return []ValidatorIndex(nil)
}

type ListValidatorAssignmentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to QueryFilter:
	//	*ListValidatorAssignmentsRequest_Epoch
	//	*ListValidatorAssignmentsRequest_Genesis
	QueryFilter isListValidatorAssignmentsRequest_QueryFilter `protobuf_oneof:"query_filter"`
	// 48 byte validator public keys to filter assignments for the given epoch.
	PublicKeys [][]byte `protobuf:"bytes,3,rep,name=public_keys,json=publicKeys,proto3" json:"public_keys,omitempty" ssz-size:"?,48"`
	// Validator indicies to filter assignments for the given epoch.
	Indices []ValidatorIndex `protobuf:"varint,4,rep,packed,name=indices,proto3" json:"indices,omitempty" cast-type:"ValidatorIndex"`
	// The maximum number of ValidatorAssignments to return in the response.
	// This field is optional.
	PageSize int32 `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A pagination token returned from a previous call to `ListValidatorAssignments`
	// that indicates where this listing should continue from.
	// This field is optional.
	PageToken string `protobuf:"bytes,6,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListValidatorAssignmentsRequest) Reset() {
	*x = ListValidatorAssignmentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_node_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListValidatorAssignmentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListValidatorAssignmentsRequest) ProtoMessage() {}

func (x *ListValidatorAssignmentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_node_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListValidatorAssignmentsRequest.ProtoReflect.Descriptor instead.
func (*ListValidatorAssignmentsRequest) Descriptor() ([]byte, []int) {
	return file_consensus_node_proto_rawDescGZIP(), []int{21}
}

func (m *ListValidatorAssignmentsRequest) GetQueryFilter() isListValidatorAssignmentsRequest_QueryFilter {
	if m != nil {
		return m.QueryFilter
	}
	return nil
}

func (x *ListValidatorAssignmentsRequest) GetEpoch() Epoch {
	if x, ok := x.GetQueryFilter().(*ListValidatorAssignmentsRequest_Epoch); ok {
		return x.Epoch
	}
	return Epoch(0)
}

func (x *ListValidatorAssignmentsRequest) GetGenesis() bool {
	if x, ok := x.GetQueryFilter().(*ListValidatorAssignmentsRequest_Genesis); ok {
		return x.Genesis
	}
	return false
}

func (x *ListValidatorAssignmentsRequest) GetPublicKeys() [][]byte {
	if x != nil {
		return x.PublicKeys
	}
	return nil
}

func (x *ListValidatorAssignmentsRequest) GetIndices() []ValidatorIndex {
	if x != nil {
		return x.Indices
	}
	return []ValidatorIndex(nil)
}

func (x *ListValidatorAssignmentsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListValidatorAssignmentsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type isListValidatorAssignmentsRequest_QueryFilter interface {
	isListValidatorAssignmentsRequest_QueryFilter()
}

type ListValidatorAssignmentsRequest_Epoch struct {
	// Epoch to validator assignments for.
	Epoch Epoch `protobuf:"varint,1,opt,name=epoch,proto3,oneof" cast-type:"Epoch"`
}

type ListValidatorAssignmentsRequest_Genesis struct {
	// Whether or not to query for the genesis information.
	Genesis bool `protobuf:"varint,2,opt,name=genesis,proto3,oneof"`
}

func (*ListValidatorAssignmentsRequest_Epoch) isListValidatorAssignmentsRequest_QueryFilter() {}

func (*ListValidatorAssignmentsRequest_Genesis) isListValidatorAssignmentsRequest_QueryFilter() {}

type ValidatorAssignments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The epoch for which this set of validator assignments is valid.
	Epoch       Epoch                                       `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty" cast-type:"Epoch"`
	Assignments []*ValidatorAssignments_CommitteeAssignment `protobuf:"bytes,2,rep,name=assignments,proto3" json:"assignments,omitempty"`
	// A pagination token returned from a previous call to `ListValidatorAssignmentsRequest`
	// that indicates where this listing should continue from.
	// This field is optional.
	NextPageToken string `protobuf:"bytes,3,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Total count of CommitteeAssignments matching the request filter.
	TotalSize int32 `protobuf:"varint,4,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
}

func (x *ValidatorAssignments) Reset() {
	*x = ValidatorAssignments{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_node_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatorAssignments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorAssignments) ProtoMessage() {}

func (x *ValidatorAssignments) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_node_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorAssignments.ProtoReflect.Descriptor instead.
func (*ValidatorAssignments) Descriptor() ([]byte, []int) {
	return file_consensus_node_proto_rawDescGZIP(), []int{22}
}

func (x *ValidatorAssignments) GetEpoch() Epoch {
	if x != nil {
		return x.Epoch
	}
	return Epoch(0)
}

func (x *ValidatorAssignments) GetAssignments() []*ValidatorAssignments_CommitteeAssignment {
	if x != nil {
		return x.Assignments
	}
	return nil
}

func (x *ValidatorAssignments) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ValidatorAssignments) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

type GetValidatorParticipationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to QueryFilter:
	//	*GetValidatorParticipationRequest_Epoch
	//	*GetValidatorParticipationRequest_Genesis
	QueryFilter isGetValidatorParticipationRequest_QueryFilter `protobuf_oneof:"query_filter"`
}

func (x *GetValidatorParticipationRequest) Reset() {
	*x = GetValidatorParticipationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_node_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetValidatorParticipationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidatorParticipationRequest) ProtoMessage() {}

func (x *GetValidatorParticipationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_node_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidatorParticipationRequest.ProtoReflect.Descriptor instead.
func (*GetValidatorParticipationRequest) Descriptor() ([]byte, []int) {
	return file_consensus_node_proto_rawDescGZIP(), []int{23}
}

func (m *GetValidatorParticipationRequest) GetQueryFilter() isGetValidatorParticipationRequest_QueryFilter {
	if m != nil {
		return m.QueryFilter
	}
	return nil
}

func (x *GetValidatorParticipationRequest) GetEpoch() Epoch {
	if x, ok := x.GetQueryFilter().(*GetValidatorParticipationRequest_Epoch); ok {
		return x.Epoch
	}
	return Epoch(0)
}

func (x *GetValidatorParticipationRequest) GetGenesis() bool {
	if x, ok := x.GetQueryFilter().(*GetValidatorParticipationRequest_Genesis); ok {
		return x.Genesis
	}
	return false
}

type isGetValidatorParticipationRequest_QueryFilter interface {
	isGetValidatorParticipationRequest_QueryFilter()
}

type GetValidatorParticipationRequest_Epoch struct {
	// Epoch to request participation information.
	Epoch Epoch `protobuf:"varint,1,opt,name=epoch,proto3,oneof" cast-type:"Epoch"`
}

type GetValidatorParticipationRequest_Genesis struct {
	// Whether or not to query for the genesis information.
	Genesis bool `protobuf:"varint,2,opt,name=genesis,proto3,oneof"`
}

func (*GetValidatorParticipationRequest_Epoch) isGetValidatorParticipationRequest_QueryFilter() {}

func (*GetValidatorParticipationRequest_Genesis) isGetValidatorParticipationRequest_QueryFilter() {}

type ValidatorParticipationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Epoch which this message is applicable.
	Epoch Epoch `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty" cast-type:"Epoch"`
	// Whether or not epoch has been finalized.
	Finalized bool `protobuf:"varint,2,opt,name=finalized,proto3" json:"finalized,omitempty"`
	// The actual validator participation metrics.
	Participation *ValidatorParticipation `protobuf:"bytes,3,opt,name=participation,proto3" json:"participation,omitempty"`
}

func (x *ValidatorParticipationResponse) Reset() {
	*x = ValidatorParticipationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_node_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatorParticipationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorParticipationResponse) ProtoMessage() {}

func (x *ValidatorParticipationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_node_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorParticipationResponse.ProtoReflect.Descriptor instead.
func (*ValidatorParticipationResponse) Descriptor() ([]byte, []int) {
	return file_consensus_node_proto_rawDescGZIP(), []int{24}
}

func (x *ValidatorParticipationResponse) GetEpoch() Epoch {
	if x != nil {
		return x.Epoch
	}
	return Epoch(0)
}

func (x *ValidatorParticipationResponse) GetFinalized() bool {
	if x != nil {
		return x.Finalized
	}
	return false
}

func (x *ValidatorParticipationResponse) GetParticipation() *ValidatorParticipation {
	if x != nil {
		return x.Participation
	}
	return nil
}

type AttestationPoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of objects to return in the response.
	// This field is optional.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A pagination token returned from a previous call
	// that indicates where this listing should continue from.
	// This field is optional.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *AttestationPoolRequest) Reset() {
	*x = AttestationPoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_node_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttestationPoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttestationPoolRequest) ProtoMessage() {}

func (x *AttestationPoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_node_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttestationPoolRequest.ProtoReflect.Descriptor instead.
func (*AttestationPoolRequest) Descriptor() ([]byte, []int) {
	return file_consensus_node_proto_rawDescGZIP(), []int{25}
}

func (x *AttestationPoolRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *AttestationPoolRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type AttestationPoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of attestations currently in the pool of the chain.
	Attestations []*Attestation `protobuf:"bytes,1,rep,name=attestations,proto3" json:"attestations,omitempty"`
	// A pagination token returned from a previous call
	// that indicates where this listing should continue from.
	// This field is optional.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Total count of objects matching the request filter.
	TotalSize int32 `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
}

func (x *AttestationPoolResponse) Reset() {
	*x = AttestationPoolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_node_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttestationPoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttestationPoolResponse) ProtoMessage() {}

func (x *AttestationPoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_node_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttestationPoolResponse.ProtoReflect.Descriptor instead.
func (*AttestationPoolResponse) Descriptor() ([]byte, []int) {
	return file_consensus_node_proto_rawDescGZIP(), []int{26}
}

func (x *AttestationPoolResponse) GetAttestations() []*Attestation {
	if x != nil {
		return x.Attestations
	}
	return nil
}

func (x *AttestationPoolResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *AttestationPoolResponse) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

// Information about the configuration parameters of the node, such
// as the slots per epoch, slots per eth1 voting period, and more.
type ChainConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config map[string]string `protobuf:"bytes,1,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ChainConfig) Reset() {
	*x = ChainConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_node_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainConfig) ProtoMessage() {}

func (x *ChainConfig) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_node_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainConfig.ProtoReflect.Descriptor instead.
func (*ChainConfig) Descriptor() ([]byte, []int) {
	return file_consensus_node_proto_rawDescGZIP(), []int{27}
}

func (x *ChainConfig) GetConfig() map[string]string {
	if x != nil {
		return x.Config
	}
	return nil
}

type AccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *AccountRequest) Reset() {
	*x = AccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_node_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountRequest) ProtoMessage() {}

func (x *AccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_node_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountRequest.ProtoReflect.Descriptor instead.
func (*AccountRequest) Descriptor() ([]byte, []int) {
	return file_consensus_node_proto_rawDescGZIP(), []int{28}
}

func (x *AccountRequest) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

type SubmitSlashingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indices of the validators to be slashed by the submitted
	// proposer/attester slashing object.
	SlashedIndices []ValidatorIndex `protobuf:"varint,1,rep,packed,name=slashed_indices,json=slashedIndices,proto3" json:"slashed_indices,omitempty" cast-type:"ValidatorIndex"`
}

func (x *SubmitSlashingResponse) Reset() {
	*x = SubmitSlashingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_node_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitSlashingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitSlashingResponse) ProtoMessage() {}

func (x *SubmitSlashingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_node_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitSlashingResponse.ProtoReflect.Descriptor instead.
func (*SubmitSlashingResponse) Descriptor() ([]byte, []int) {
	return file_consensus_node_proto_rawDescGZIP(), []int{29}
}

func (x *SubmitSlashingResponse) GetSlashedIndices() []ValidatorIndex {
	if x != nil {
		return x.SlashedIndices
	}
	return []ValidatorIndex(nil)
}

type IndividualVotesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Epoch of the request.
	Epoch Epoch `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty" cast-type:"Epoch"`
	// Validator 48 byte BLS public keys to filter validators for the given epoch.
	PublicKeys [][]byte `protobuf:"bytes,2,rep,name=public_keys,json=publicKeys,proto3" json:"public_keys,omitempty"`
	// Validator indices to filter validators for the given epoch.
	Indices []ValidatorIndex `protobuf:"varint,3,rep,packed,name=indices,proto3" json:"indices,omitempty" cast-type:"ValidatorIndex"`
}

func (x *IndividualVotesRequest) Reset() {
	*x = IndividualVotesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_node_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndividualVotesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndividualVotesRequest) ProtoMessage() {}

func (x *IndividualVotesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_node_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndividualVotesRequest.ProtoReflect.Descriptor instead.
func (*IndividualVotesRequest) Descriptor() ([]byte, []int) {
	return file_consensus_node_proto_rawDescGZIP(), []int{30}
}

func (x *IndividualVotesRequest) GetEpoch() Epoch {
	if x != nil {
		return x.Epoch
	}
	return Epoch(0)
}

func (x *IndividualVotesRequest) GetPublicKeys() [][]byte {
	if x != nil {
		return x.PublicKeys
	}
	return nil
}

func (x *IndividualVotesRequest) GetIndices() []ValidatorIndex {
	if x != nil {
		return x.Indices
	}
	return []ValidatorIndex(nil)
}

type IndividualVotesRespond struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndividualVotes []*IndividualVotesRespond_IndividualVote `protobuf:"bytes,1,rep,name=individual_votes,json=individualVotes,proto3" json:"individual_votes,omitempty"`
}

func (x *IndividualVotesRespond) Reset() {
	*x = IndividualVotesRespond{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_node_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndividualVotesRespond) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndividualVotesRespond) ProtoMessage() {}

func (x *IndividualVotesRespond) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_node_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndividualVotesRespond.ProtoReflect.Descriptor instead.
func (*IndividualVotesRespond) Descriptor() ([]byte, []int) {
	return file_consensus_node_proto_rawDescGZIP(), []int{31}
}

func (x *IndividualVotesRespond) GetIndividualVotes() []*IndividualVotesRespond_IndividualVote {
	if x != nil {
		return x.IndividualVotes
	}
	return nil
}

type WeakSubjectivityCheckpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The block root of weak subjectivity checkpoint.
	BlockRoot []byte `protobuf:"bytes,1,opt,name=block_root,json=blockRoot,proto3" json:"block_root,omitempty"`
	// The state root of weak subjectivity checkpoint.
	StateRoot []byte `protobuf:"bytes,2,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`
	// The epoch of weak subjectivity checkpoint.
	Epoch Epoch `protobuf:"varint,3,opt,name=epoch,proto3" json:"epoch,omitempty" cast-type:"Epoch"`
}

func (x *WeakSubjectivityCheckpoint) Reset() {
	*x = WeakSubjectivityCheckpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_node_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeakSubjectivityCheckpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeakSubjectivityCheckpoint) ProtoMessage() {}

func (x *WeakSubjectivityCheckpoint) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_node_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeakSubjectivityCheckpoint.ProtoReflect.Descriptor instead.
func (*WeakSubjectivityCheckpoint) Descriptor() ([]byte, []int) {
	return file_consensus_node_proto_rawDescGZIP(), []int{32}
}

func (x *WeakSubjectivityCheckpoint) GetBlockRoot() []byte {
	if x != nil {
		return x.BlockRoot
	}
	return nil
}

func (x *WeakSubjectivityCheckpoint) GetStateRoot() []byte {
	if x != nil {
		return x.StateRoot
	}
	return nil
}

func (x *WeakSubjectivityCheckpoint) GetEpoch() Epoch {
	if x != nil {
		return x.Epoch
	}
	return Epoch(0)
}

type StreamFinalizedEpochRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of tx types to filter txs.
	TxTypes []uint32 `protobuf:"varint,1,rep,packed,name=tx_types,json=txTypes,proto3" json:"tx_types,omitempty"`
	// A list of storage event types to filter events.
	StorageEventTypes []uint32 `protobuf:"varint,2,rep,packed,name=storage_event_types,json=storageEventTypes,proto3" json:"storage_event_types,omitempty"`
	// A list of 48 byte relevant public keys to filter txs and events.
	PublicKeys [][]byte `protobuf:"bytes,3,rep,name=public_keys,json=publicKeys,proto3" json:"public_keys,omitempty" ssz-size:"?,48"`
}

func (x *StreamFinalizedEpochRequest) Reset() {
	*x = StreamFinalizedEpochRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_node_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamFinalizedEpochRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamFinalizedEpochRequest) ProtoMessage() {}

func (x *StreamFinalizedEpochRequest) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_node_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamFinalizedEpochRequest.ProtoReflect.Descriptor instead.
func (*StreamFinalizedEpochRequest) Descriptor() ([]byte, []int) {
	return file_consensus_node_proto_rawDescGZIP(), []int{33}
}

func (x *StreamFinalizedEpochRequest) GetTxTypes() []uint32 {
	if x != nil {
		return x.TxTypes
	}
	return nil
}

func (x *StreamFinalizedEpochRequest) GetStorageEventTypes() []uint32 {
	if x != nil {
		return x.StorageEventTypes
	}
	return nil
}

func (x *StreamFinalizedEpochRequest) GetPublicKeys() [][]byte {
	if x != nil {
		return x.PublicKeys
	}
	return nil
}

type FinalizedEpochRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Epoch to query.
	Epoch Epoch `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty" cast-type:"Epoch"`
	// A list of tx types to filter txs.
	TxTypes []uint32 `protobuf:"varint,2,rep,packed,name=tx_types,json=txTypes,proto3" json:"tx_types,omitempty"`
	// A list of storage event types to filter events.
	StorageEventTypes []uint32 `protobuf:"varint,3,rep,packed,name=storage_event_types,json=storageEventTypes,proto3" json:"storage_event_types,omitempty"`
	// A list of 48 byte relevant public keys to filter txs and events.
	PublicKeys [][]byte `protobuf:"bytes,4,rep,name=public_keys,json=publicKeys,proto3" json:"public_keys,omitempty" ssz-size:"?,48"`
}

func (x *FinalizedEpochRequest) Reset() {
	*x = FinalizedEpochRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_node_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinalizedEpochRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizedEpochRequest) ProtoMessage() {}

func (x *FinalizedEpochRequest) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_node_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizedEpochRequest.ProtoReflect.Descriptor instead.
func (*FinalizedEpochRequest) Descriptor() ([]byte, []int) {
	return file_consensus_node_proto_rawDescGZIP(), []int{34}
}

func (x *FinalizedEpochRequest) GetEpoch() Epoch {
	if x != nil {
		return x.Epoch
	}
	return Epoch(0)
}

func (x *FinalizedEpochRequest) GetTxTypes() []uint32 {
	if x != nil {
		return x.TxTypes
	}
	return nil
}

func (x *FinalizedEpochRequest) GetStorageEventTypes() []uint32 {
	if x != nil {
		return x.StorageEventTypes
	}
	return nil
}

func (x *FinalizedEpochRequest) GetPublicKeys() [][]byte {
	if x != nil {
		return x.PublicKeys
	}
	return nil
}

type FinalizedBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slot Slot `protobuf:"varint,1,opt,name=Slot,proto3" json:"Slot,omitempty" cast-type:"Slot"`
	// FinalizedTxs within the slot.
	Txs []*SignedTransaction `protobuf:"bytes,2,rep,name=txs,proto3" json:"txs,omitempty"`
}

func (x *FinalizedBlock) Reset() {
	*x = FinalizedBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_node_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinalizedBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizedBlock) ProtoMessage() {}

func (x *FinalizedBlock) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_node_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizedBlock.ProtoReflect.Descriptor instead.
func (*FinalizedBlock) Descriptor() ([]byte, []int) {
	return file_consensus_node_proto_rawDescGZIP(), []int{35}
}

func (x *FinalizedBlock) GetSlot() Slot {
	if x != nil {
		return x.Slot
	}
	return Slot(0)
}

func (x *FinalizedBlock) GetTxs() []*SignedTransaction {
	if x != nil {
		return x.Txs
	}
	return nil
}

type FinalizedEpochResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Epoch of the update.
	Epoch Epoch `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty" cast-type:"Epoch"`
	// FinalizedBlocks within the epoch.
	Blocks []*FinalizedBlock `protobuf:"bytes,2,rep,name=blocks,proto3" json:"blocks,omitempty"`
	// StorageEvents within the epoch.
	StorageEvents []*StorageEvent `protobuf:"bytes,3,rep,name=storage_events,json=storageEvents,proto3" json:"storage_events,omitempty"`
}

func (x *FinalizedEpochResponse) Reset() {
	*x = FinalizedEpochResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_node_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinalizedEpochResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizedEpochResponse) ProtoMessage() {}

func (x *FinalizedEpochResponse) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_node_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizedEpochResponse.ProtoReflect.Descriptor instead.
func (*FinalizedEpochResponse) Descriptor() ([]byte, []int) {
	return file_consensus_node_proto_rawDescGZIP(), []int{36}
}

func (x *FinalizedEpochResponse) GetEpoch() Epoch {
	if x != nil {
		return x.Epoch
	}
	return Epoch(0)
}

func (x *FinalizedEpochResponse) GetBlocks() []*FinalizedBlock {
	if x != nil {
		return x.Blocks
	}
	return nil
}

func (x *FinalizedEpochResponse) GetStorageEvents() []*StorageEvent {
	if x != nil {
		return x.StorageEvents
	}
	return nil
}

type Committees_CommitteeItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A committee is a list of validator indices participating in consensus at a slot.
	ValidatorIndices []ValidatorIndex `protobuf:"varint,1,rep,packed,name=validator_indices,json=validatorIndices,proto3" json:"validator_indices,omitempty" cast-type:"ValidatorIndex"`
}

func (x *Committees_CommitteeItem) Reset() {
	*x = Committees_CommitteeItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_node_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Committees_CommitteeItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Committees_CommitteeItem) ProtoMessage() {}

func (x *Committees_CommitteeItem) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_node_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Committees_CommitteeItem.ProtoReflect.Descriptor instead.
func (*Committees_CommitteeItem) Descriptor() ([]byte, []int) {
	return file_consensus_node_proto_rawDescGZIP(), []int{10, 0}
}

func (x *Committees_CommitteeItem) GetValidatorIndices() []ValidatorIndex {
	if x != nil {
		return x.ValidatorIndices
	}
	return []ValidatorIndex(nil)
}

type Committees_CommitteesList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of committees.
	Committees []*Committees_CommitteeItem `protobuf:"bytes,1,rep,name=committees,proto3" json:"committees,omitempty"`
}

func (x *Committees_CommitteesList) Reset() {
	*x = Committees_CommitteesList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_node_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Committees_CommitteesList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Committees_CommitteesList) ProtoMessage() {}

func (x *Committees_CommitteesList) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_node_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Committees_CommitteesList.ProtoReflect.Descriptor instead.
func (*Committees_CommitteesList) Descriptor() ([]byte, []int) {
	return file_consensus_node_proto_rawDescGZIP(), []int{10, 1}
}

func (x *Committees_CommitteesList) GetCommittees() []*Committees_CommitteeItem {
	if x != nil {
		return x.Committees
	}
	return nil
}

type ValidatorBalances_Balance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Validator's 48 byte BLS public key.
	PublicKey []byte `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty" ssz-size:"48"`
	// Validator's index in the validator set.
	Index ValidatorIndex `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty" cast-type:"ValidatorIndex"`
	// Validator's balance in gwei.
	Balance uint64 `protobuf:"varint,3,opt,name=balance,proto3" json:"balance,omitempty"`
	// Validator's status, UNKNOWN if not found.
	Status string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ValidatorBalances_Balance) Reset() {
	*x = ValidatorBalances_Balance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_node_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatorBalances_Balance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorBalances_Balance) ProtoMessage() {}

func (x *ValidatorBalances_Balance) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_node_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorBalances_Balance.ProtoReflect.Descriptor instead.
func (*ValidatorBalances_Balance) Descriptor() ([]byte, []int) {
	return file_consensus_node_proto_rawDescGZIP(), []int{12, 0}
}

func (x *ValidatorBalances_Balance) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *ValidatorBalances_Balance) GetIndex() ValidatorIndex {
	if x != nil {
		return x.Index
	}
	return ValidatorIndex(0)
}

func (x *ValidatorBalances_Balance) GetBalance() uint64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *ValidatorBalances_Balance) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type Validators_ValidatorContainer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index     ValidatorIndex `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty" cast-type:"ValidatorIndex"`
	Validator *Validator     `protobuf:"bytes,2,opt,name=validator,proto3" json:"validator,omitempty"`
}

func (x *Validators_ValidatorContainer) Reset() {
	*x = Validators_ValidatorContainer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_node_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Validators_ValidatorContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Validators_ValidatorContainer) ProtoMessage() {}

func (x *Validators_ValidatorContainer) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_node_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Validators_ValidatorContainer.ProtoReflect.Descriptor instead.
func (*Validators_ValidatorContainer) Descriptor() ([]byte, []int) {
	return file_consensus_node_proto_rawDescGZIP(), []int{15, 0}
}

func (x *Validators_ValidatorContainer) GetIndex() ValidatorIndex {
	if x != nil {
		return x.Index
	}
	return ValidatorIndex(0)
}

func (x *Validators_ValidatorContainer) GetValidator() *Validator {
	if x != nil {
		return x.Validator
	}
	return nil
}

type ValidatorAssignments_CommitteeAssignment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Committees are responsible for crosslinking committee data back to the chain,
	// they also attest and produce chain blocks. This is a list of validator indices that
	// are in the same committee as requested validator, everyone in the committee is assigned to the
	// same slot and same committee.
	Committee []ValidatorIndex `protobuf:"varint,1,rep,packed,name=committee,proto3" json:"committee,omitempty" cast-type:"ValidatorIndex"`
	// Committee index represents the committee of validator that's in.
	CommitteeIndex CommitteeIndex `protobuf:"varint,2,opt,name=committee_index,json=committeeIndex,proto3" json:"committee_index,omitempty" cast-type:"CommitteeIndex"`
	// Chain slot in which the validator must perform its assigned
	// duty as an attester.
	AttesterSlot Slot `protobuf:"varint,3,opt,name=attester_slot,json=attesterSlot,proto3" json:"attester_slot,omitempty" cast-type:"Slot"`
	// Chain slots in which the validator must perform its assigned
	// duty as a proposer.
	ProposerSlots []Slot `protobuf:"varint,4,rep,packed,name=proposer_slots,json=proposerSlots,proto3" json:"proposer_slots,omitempty" cast-type:"Slot"`
	// 48 byte BLS public key.
	//
	// Deprecated: Do not use.
	PublicKey []byte `protobuf:"bytes,5,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty" ssz-size:"48"`
	// Validator index in the state.
	ValidatorIndex ValidatorIndex `protobuf:"varint,6,opt,name=validator_index,json=validatorIndex,proto3" json:"validator_index,omitempty" cast-type:"ValidatorIndex"`
}

func (x *ValidatorAssignments_CommitteeAssignment) Reset() {
	*x = ValidatorAssignments_CommitteeAssignment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_node_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatorAssignments_CommitteeAssignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorAssignments_CommitteeAssignment) ProtoMessage() {}

func (x *ValidatorAssignments_CommitteeAssignment) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_node_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorAssignments_CommitteeAssignment.ProtoReflect.Descriptor instead.
func (*ValidatorAssignments_CommitteeAssignment) Descriptor() ([]byte, []int) {
	return file_consensus_node_proto_rawDescGZIP(), []int{22, 0}
}

func (x *ValidatorAssignments_CommitteeAssignment) GetCommittee() []ValidatorIndex {
	if x != nil {
		return x.Committee
	}
	return []ValidatorIndex(nil)
}

func (x *ValidatorAssignments_CommitteeAssignment) GetCommitteeIndex() CommitteeIndex {
	if x != nil {
		return x.CommitteeIndex
	}
	return CommitteeIndex(0)
}

func (x *ValidatorAssignments_CommitteeAssignment) GetAttesterSlot() Slot {
	if x != nil {
		return x.AttesterSlot
	}
	return Slot(0)
}

func (x *ValidatorAssignments_CommitteeAssignment) GetProposerSlots() []Slot {
	if x != nil {
		return x.ProposerSlots
	}
	return []Slot(nil)
}

// Deprecated: Do not use.
func (x *ValidatorAssignments_CommitteeAssignment) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *ValidatorAssignments_CommitteeAssignment) GetValidatorIndex() ValidatorIndex {
	if x != nil {
		return x.ValidatorIndex
	}
	return ValidatorIndex(0)
}

type IndividualVotesRespond_IndividualVote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The epoch of the vote status request.
	Epoch Epoch `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty" cast-type:"Epoch"`
	// The public key of the vote status request.
	PublicKey []byte `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// The validator index of the request.
	ValidatorIndex ValidatorIndex `protobuf:"varint,3,opt,name=validator_index,json=validatorIndex,proto3" json:"validator_index,omitempty" cast-type:"ValidatorIndex"`
	// Has the validator been slashed.
	IsSlashed bool `protobuf:"varint,4,opt,name=is_slashed,json=isSlashed,proto3" json:"is_slashed,omitempty"`
	// Is the validator withdrawable.
	IsWithdrawableInCurrentEpoch bool `protobuf:"varint,5,opt,name=is_withdrawable_in_current_epoch,json=isWithdrawableInCurrentEpoch,proto3" json:"is_withdrawable_in_current_epoch,omitempty"`
	// Is the validator active in current epoch.
	IsActiveInCurrentEpoch bool `protobuf:"varint,6,opt,name=is_active_in_current_epoch,json=isActiveInCurrentEpoch,proto3" json:"is_active_in_current_epoch,omitempty"`
	// Was the validator active in previous epoch.
	IsActiveInPreviousEpoch bool `protobuf:"varint,7,opt,name=is_active_in_previous_epoch,json=isActiveInPreviousEpoch,proto3" json:"is_active_in_previous_epoch,omitempty"`
	// Did validator attest for current epoch.
	IsCurrentEpochAttester bool `protobuf:"varint,8,opt,name=is_current_epoch_attester,json=isCurrentEpochAttester,proto3" json:"is_current_epoch_attester,omitempty"`
	// Did validator attest target for current epoch.
	IsCurrentEpochTargetAttester bool `protobuf:"varint,9,opt,name=is_current_epoch_target_attester,json=isCurrentEpochTargetAttester,proto3" json:"is_current_epoch_target_attester,omitempty"`
	// Did validator attest for previous epoch.
	IsPreviousEpochAttester bool `protobuf:"varint,10,opt,name=is_previous_epoch_attester,json=isPreviousEpochAttester,proto3" json:"is_previous_epoch_attester,omitempty"`
	// Did validator attest target for previous epoch.
	IsPreviousEpochTargetAttester bool `protobuf:"varint,11,opt,name=is_previous_epoch_target_attester,json=isPreviousEpochTargetAttester,proto3" json:"is_previous_epoch_target_attester,omitempty"`
	// Did validator attest head for previous epoch.
	IsPreviousEpochHeadAttester bool `protobuf:"varint,12,opt,name=is_previous_epoch_head_attester,json=isPreviousEpochHeadAttester,proto3" json:"is_previous_epoch_head_attester,omitempty"`
	// The current effective balance of the validator.
	CurrentEpochEffectiveBalanceGwei uint64 `protobuf:"varint,13,opt,name=current_epoch_effective_balance_gwei,json=currentEpochEffectiveBalanceGwei,proto3" json:"current_epoch_effective_balance_gwei,omitempty"`
	// The slots of when the validator's attestation got included in the block. Only available in phase0.
	//
	// Deprecated: Do not use.
	InclusionSlot Slot `protobuf:"varint,14,opt,name=inclusion_slot,json=inclusionSlot,proto3" json:"inclusion_slot,omitempty" cast-type:"Slot"`
	// How many slots have passed until the validator's attestation got included in the block. Only available in phase0.
	//
	// Deprecated: Do not use.
	InclusionDistance Slot `protobuf:"varint,15,opt,name=inclusion_distance,json=inclusionDistance,proto3" json:"inclusion_distance,omitempty" cast-type:"Slot"`
	// The inactivity score of the validator tracks validator participation. [New in Altair]
	InactivityScore uint64 `protobuf:"varint,16,opt,name=inactivity_score,json=inactivityScore,proto3" json:"inactivity_score,omitempty"`
}

func (x *IndividualVotesRespond_IndividualVote) Reset() {
	*x = IndividualVotesRespond_IndividualVote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_node_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndividualVotesRespond_IndividualVote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndividualVotesRespond_IndividualVote) ProtoMessage() {}

func (x *IndividualVotesRespond_IndividualVote) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_node_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndividualVotesRespond_IndividualVote.ProtoReflect.Descriptor instead.
func (*IndividualVotesRespond_IndividualVote) Descriptor() ([]byte, []int) {
	return file_consensus_node_proto_rawDescGZIP(), []int{31, 0}
}

func (x *IndividualVotesRespond_IndividualVote) GetEpoch() Epoch {
	if x != nil {
		return x.Epoch
	}
	return Epoch(0)
}

func (x *IndividualVotesRespond_IndividualVote) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *IndividualVotesRespond_IndividualVote) GetValidatorIndex() ValidatorIndex {
	if x != nil {
		return x.ValidatorIndex
	}
	return ValidatorIndex(0)
}

func (x *IndividualVotesRespond_IndividualVote) GetIsSlashed() bool {
	if x != nil {
		return x.IsSlashed
	}
	return false
}

func (x *IndividualVotesRespond_IndividualVote) GetIsWithdrawableInCurrentEpoch() bool {
	if x != nil {
		return x.IsWithdrawableInCurrentEpoch
	}
	return false
}

func (x *IndividualVotesRespond_IndividualVote) GetIsActiveInCurrentEpoch() bool {
	if x != nil {
		return x.IsActiveInCurrentEpoch
	}
	return false
}

func (x *IndividualVotesRespond_IndividualVote) GetIsActiveInPreviousEpoch() bool {
	if x != nil {
		return x.IsActiveInPreviousEpoch
	}
	return false
}

func (x *IndividualVotesRespond_IndividualVote) GetIsCurrentEpochAttester() bool {
	if x != nil {
		return x.IsCurrentEpochAttester
	}
	return false
}

func (x *IndividualVotesRespond_IndividualVote) GetIsCurrentEpochTargetAttester() bool {
	if x != nil {
		return x.IsCurrentEpochTargetAttester
	}
	return false
}

func (x *IndividualVotesRespond_IndividualVote) GetIsPreviousEpochAttester() bool {
	if x != nil {
		return x.IsPreviousEpochAttester
	}
	return false
}

func (x *IndividualVotesRespond_IndividualVote) GetIsPreviousEpochTargetAttester() bool {
	if x != nil {
		return x.IsPreviousEpochTargetAttester
	}
	return false
}

func (x *IndividualVotesRespond_IndividualVote) GetIsPreviousEpochHeadAttester() bool {
	if x != nil {
		return x.IsPreviousEpochHeadAttester
	}
	return false
}

func (x *IndividualVotesRespond_IndividualVote) GetCurrentEpochEffectiveBalanceGwei() uint64 {
	if x != nil {
		return x.CurrentEpochEffectiveBalanceGwei
	}
	return 0
}

// Deprecated: Do not use.
func (x *IndividualVotesRespond_IndividualVote) GetInclusionSlot() Slot {
	if x != nil {
		return x.InclusionSlot
	}
	return Slot(0)
}

// Deprecated: Do not use.
func (x *IndividualVotesRespond_IndividualVote) GetInclusionDistance() Slot {
	if x != nil {
		return x.InclusionDistance
	}
	return Slot(0)
}

func (x *IndividualVotesRespond_IndividualVote) GetInactivityScore() uint64 {
	if x != nil {
		return x.InactivityScore
	}
	return 0
}

var File_consensus_node_proto protoreflect.FileDescriptor

var file_consensus_node_proto_rawDesc = []byte{
	0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2f, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x65, 0x78, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x15, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6a,
	0x0a, 0x12, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x53, 0x65, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x22, 0xb6, 0x01, 0x0a, 0x1e, 0x4c,
	0x69, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x09, 0x82, 0xb5,
	0x18, 0x05, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x48, 0x00, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x12, 0x25, 0x0a, 0x0d, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x73,
	0x69, 0x73, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x22, 0xaf, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x09,
	0x82, 0xb5, 0x18, 0x05, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x48, 0x00, 0x52, 0x05, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x12, 0x25, 0x0a, 0x0d, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0c, 0x67, 0x65, 0x6e,
	0x65, 0x73, 0x69, 0x73, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xa4, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f,
	0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xc1, 0x01, 0x0a,
	0x1f, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x41, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x57, 0x0a, 0x14, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x41, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65,
	0x22, 0xd4, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x12, 0x1e, 0x0a, 0x04,
	0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04,
	0x53, 0x6c, 0x6f, 0x74, 0x48, 0x00, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x21, 0x0a, 0x05,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x09, 0x82, 0xb5, 0x18,
	0x05, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x48, 0x00, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12,
	0x1a, 0x0a, 0x07, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x07, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xa8, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b,
	0x0a, 0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f,
	0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x0f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69,
	0x7a, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x0e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72,
	0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63,
	0x61, 0x6c, 0x12, 0x42, 0x0a, 0x0c, 0x61, 0x6c, 0x74, 0x61, 0x69, 0x72, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f,
	0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x6c, 0x74, 0x61, 0x69,
	0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x07, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22,
	0x9c, 0x05, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x12, 0x25, 0x0a,
	0x09, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x08, 0x68, 0x65, 0x61, 0x64,
	0x53, 0x6c, 0x6f, 0x74, 0x12, 0x28, 0x0a, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x09, 0x82, 0xb5, 0x18, 0x05, 0x45, 0x70,
	0x6f, 0x63, 0x68, 0x52, 0x09, 0x68, 0x65, 0x61, 0x64, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x2e,
	0x0a, 0x0f, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x6f, 0x6f,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0x8a, 0xb5, 0x18, 0x02, 0x33, 0x32, 0x52,
	0x0d, 0x68, 0x65, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x2f,
	0x0a, 0x0e, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x73, 0x6c, 0x6f, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x53, 0x6c, 0x6f, 0x74,
	0x52, 0x0d, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x12,
	0x32, 0x0a, 0x0f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x42, 0x09, 0x82, 0xb5, 0x18, 0x05, 0x45, 0x70,
	0x6f, 0x63, 0x68, 0x52, 0x0e, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x45, 0x70,
	0x6f, 0x63, 0x68, 0x12, 0x38, 0x0a, 0x14, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0c, 0x42, 0x06, 0x8a, 0xb5, 0x18, 0x02, 0x33, 0x32, 0x52, 0x12, 0x66, 0x69, 0x6e, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x2f, 0x0a,
	0x0e, 0x6a, 0x75, 0x73, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x53, 0x6c, 0x6f, 0x74, 0x52,
	0x0d, 0x6a, 0x75, 0x73, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x32,
	0x0a, 0x0f, 0x6a, 0x75, 0x73, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x42, 0x09, 0x82, 0xb5, 0x18, 0x05, 0x45, 0x70, 0x6f,
	0x63, 0x68, 0x52, 0x0e, 0x6a, 0x75, 0x73, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x45, 0x70, 0x6f,
	0x63, 0x68, 0x12, 0x38, 0x0a, 0x14, 0x6a, 0x75, 0x73, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c,
	0x42, 0x06, 0x8a, 0xb5, 0x18, 0x02, 0x33, 0x32, 0x52, 0x12, 0x6a, 0x75, 0x73, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x40, 0x0a, 0x17,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x6a, 0x75, 0x73, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x42, 0x08, 0x82,
	0xb5, 0x18, 0x04, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x15, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x4a, 0x75, 0x73, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x43,
	0x0a, 0x18, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x6a, 0x75, 0x73, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x09, 0x82, 0xb5, 0x18, 0x05, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x52, 0x16, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x4a, 0x75, 0x73, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x45, 0x70,
	0x6f, 0x63, 0x68, 0x12, 0x49, 0x0a, 0x1d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f,
	0x6a, 0x75, 0x73, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x72, 0x6f, 0x6f, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0x8a, 0xb5, 0x18, 0x02,
	0x33, 0x32, 0x52, 0x1a, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x4a, 0x75, 0x73, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x6f, 0x6f, 0x74, 0x22, 0x66,
	0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x09, 0x82, 0xb5, 0x18, 0x05, 0x45, 0x70, 0x6f, 0x63,
	0x68, 0x48, 0x00, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x07, 0x67, 0x65,
	0x6e, 0x65, 0x73, 0x69, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x67,
	0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xcd, 0x03, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x09, 0x82, 0xb5, 0x18, 0x05, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x52,
	0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x4c, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x68, 0x6f,
	0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x50, 0x0a, 0x0d, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x3f, 0x0a, 0x11, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x42, 0x12, 0x82, 0xb5, 0x18, 0x0e, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x10, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x5c, 0x0a, 0x0e,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4a,
	0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x73,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x73, 0x1a, 0x6a, 0x0a, 0x0f, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x41, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x82, 0x02, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x09, 0x82, 0xb5, 0x18, 0x05, 0x45, 0x70, 0x6f, 0x63,
	0x68, 0x48, 0x00, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x07, 0x67, 0x65,
	0x6e, 0x65, 0x73, 0x69, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x67,
	0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x42, 0x08, 0x8a, 0xb5, 0x18,
	0x04, 0x3f, 0x2c, 0x34, 0x38, 0x52, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x73, 0x12, 0x2c, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x04, 0x42, 0x12, 0x82, 0xb5, 0x18, 0x0e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xd3, 0x02, 0x0a, 0x11,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x12, 0x1f, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x09, 0x82, 0xb5, 0x18, 0x05, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x52, 0x05, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x12, 0x47, 0x0a, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69,
	0x7a, 0x65, 0x1a, 0x8c, 0x01, 0x0a, 0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x25,
	0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x42, 0x06, 0x8a, 0xb5, 0x18, 0x02, 0x34, 0x38, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x12, 0x82, 0xb5, 0x18, 0x0e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x89, 0x02, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x05, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x09, 0x82, 0xb5, 0x18, 0x05,
	0x45, 0x70, 0x6f, 0x63, 0x68, 0x48, 0x00, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x1a,
	0x0a, 0x07, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x07, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x12,
	0x2c, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x04,
	0x42, 0x12, 0x82, 0xb5, 0x18, 0x0e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x42, 0x0e, 0x0a,
	0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x7a, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x12, 0x82, 0xb5, 0x18, 0x0e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x27, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0x8a, 0xb5, 0x18, 0x02, 0x34, 0x38, 0x48, 0x00, 0x52, 0x09,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xc7, 0x02, 0x0a, 0x0a, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x09, 0x82, 0xb5, 0x18, 0x05, 0x45, 0x70, 0x6f,
	0x63, 0x68, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x56, 0x0a, 0x0e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x1a, 0x79, 0x0a, 0x12, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x28,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x12, 0x82,
	0xb5, 0x18, 0x0e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x39, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x68,
	0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x22, 0x74, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x09, 0x82, 0xb5, 0x18, 0x05, 0x45,
	0x70, 0x6f, 0x63, 0x68, 0x48, 0x00, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x1a, 0x0a,
	0x07, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x07, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x93, 0x04, 0x0a, 0x10, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x1f,
	0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x09, 0x82,
	0xb5, 0x18, 0x05, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12,
	0x3c, 0x0a, 0x15, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x42, 0x08,
	0x8a, 0xb5, 0x18, 0x04, 0x3f, 0x2c, 0x34, 0x38, 0x52, 0x13, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x3f, 0x0a,
	0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x42, 0x12, 0x82, 0xb5, 0x18, 0x0e, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x10, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x36,
	0x0a, 0x12, 0x65, 0x78, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f,
	0x6b, 0x65, 0x79, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0c, 0x42, 0x08, 0x8a, 0xb5, 0x18, 0x04,
	0x3f, 0x2c, 0x34, 0x38, 0x52, 0x10, 0x65, 0x78, 0x69, 0x74, 0x65, 0x64, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x39, 0x0a, 0x0e, 0x65, 0x78, 0x69, 0x74, 0x65, 0x64,
	0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x04, 0x42, 0x12,
	0x82, 0xb5, 0x18, 0x0e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x0d, 0x65, 0x78, 0x69, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65,
	0x73, 0x12, 0x38, 0x0a, 0x13, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0c, 0x42, 0x08,
	0x8a, 0xb5, 0x18, 0x04, 0x3f, 0x2c, 0x34, 0x38, 0x52, 0x11, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x65,
	0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x3b, 0x0a, 0x0f, 0x73,
	0x6c, 0x61, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x04, 0x42, 0x12, 0x82, 0xb5, 0x18, 0x0e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x0e, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x65,
	0x64, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x13, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0c, 0x42, 0x08, 0x8a, 0xb5, 0x18, 0x04, 0x3f, 0x2c, 0x34, 0x38, 0x52,
	0x11, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x73, 0x12, 0x3b, 0x0a, 0x0f, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x04, 0x42, 0x12, 0x82, 0xb5, 0x18,
	0x0e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x0e, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x22,
	0x70, 0x0a, 0x1b, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23,
	0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0c, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x73, 0x12, 0x2c, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x04, 0x42, 0x12, 0x82, 0xb5, 0x18, 0x0e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65,
	0x73, 0x22, 0xcc, 0x05, 0x0a, 0x1c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x50,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x18, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x12, 0x33, 0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6c,
	0x6f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x42, 0x0a, 0x18, 0x01, 0x82, 0xb5, 0x18,
	0x04, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x13, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x04, 0x42, 0x0a, 0x18, 0x01, 0x82, 0xb5, 0x18, 0x04, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x12,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x6c, 0x79, 0x5f,
	0x76, 0x6f, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x08, 0x52, 0x14, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x6c, 0x79, 0x56, 0x6f, 0x74,
	0x65, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x6c, 0x79, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x08, 0x52, 0x14, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x6c, 0x79, 0x56, 0x6f, 0x74, 0x65, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x30,
	0x0a, 0x14, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x6c, 0x79, 0x5f, 0x76, 0x6f, 0x74, 0x65,
	0x64, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x08, 0x52, 0x12, 0x63, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x6c, 0x79, 0x56, 0x6f, 0x74, 0x65, 0x64, 0x48, 0x65, 0x61, 0x64,
	0x12, 0x47, 0x0a, 0x20, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x62, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x04, 0x52, 0x1d, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x1f, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x1c, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2d, 0x0a, 0x12, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x11, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12,
	0x47, 0x0a, 0x20, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1d, 0x61, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0c, 0x42, 0x08, 0x8a,
	0xb5, 0x18, 0x04, 0x3f, 0x2c, 0x34, 0x38, 0x52, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x04, 0x52, 0x10,
	0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x22, 0xc9, 0x02, 0x0a, 0x0e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x75, 0x72, 0x6e, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x68, 0x75, 0x72, 0x6e, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x40, 0x0a, 0x16, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0c, 0x42, 0x0a, 0x18, 0x01, 0x8a, 0xb5, 0x18, 0x04, 0x3f, 0x2c, 0x34, 0x38,
	0x52, 0x14, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x34, 0x0a, 0x10, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c,
	0x42, 0x0a, 0x18, 0x01, 0x8a, 0xb5, 0x18, 0x04, 0x3f, 0x2c, 0x34, 0x38, 0x52, 0x0e, 0x65, 0x78,
	0x69, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x54, 0x0a, 0x1c,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x04, 0x42, 0x12, 0x82, 0xb5, 0x18, 0x0e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x1a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x65, 0x73, 0x12, 0x48, 0x0a, 0x16, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x04, 0x42, 0x12, 0x82, 0xb5, 0x18, 0x0e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x14, 0x65, 0x78, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x22, 0x85, 0x02, 0x0a,
	0x1f, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x09, 0x82, 0xb5, 0x18, 0x05, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x48, 0x00, 0x52, 0x05, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x07, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x12,
	0x29, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0c, 0x42, 0x08, 0x8a, 0xb5, 0x18, 0x04, 0x3f, 0x2c, 0x34, 0x38, 0x52, 0x0a,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x2c, 0x0a, 0x07, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x04, 0x42, 0x12, 0x82, 0xb5, 0x18,
	0x0e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x07, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x22, 0xa9, 0x04, 0x0a, 0x14, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a,
	0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x09, 0x82, 0xb5,
	0x18, 0x05, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x5c,
	0x0a, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x0b, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53,
	0x69, 0x7a, 0x65, 0x1a, 0xca, 0x02, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x09, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x42, 0x12,
	0x82, 0xb5, 0x18, 0x0e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x12, 0x3b, 0x0a,
	0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x12, 0x82, 0xb5, 0x18, 0x0e, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2d, 0x0a, 0x0d, 0x61, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x0c, 0x61, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x2f, 0x0a, 0x0e, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x04, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x0d, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0a, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x08,
	0x18, 0x01, 0x8a, 0xb5, 0x18, 0x02, 0x34, 0x38, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x12, 0x3b, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x42, 0x12, 0x82, 0xb5,
	0x18, 0x0e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x52, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x22, 0x71, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x09, 0x82, 0xb5, 0x18, 0x05, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x48, 0x00,
	0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x07, 0x67, 0x65, 0x6e, 0x65, 0x73,
	0x69, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x67, 0x65, 0x6e, 0x65,
	0x73, 0x69, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x22, 0xaf, 0x01, 0x0a, 0x1e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x09, 0x82, 0xb5, 0x18, 0x05, 0x45, 0x70, 0x6f, 0x63, 0x68,
	0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x6e, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x69, 0x6e, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x4e, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70,
	0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x54, 0x0a, 0x16, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xa3, 0x01, 0x0a, 0x17,
	0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x61, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x61, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a,
	0x65, 0x22, 0x8b, 0x01, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x41, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x1a, 0x39, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x2a, 0x0a, 0x0e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x55, 0x0a, 0x16, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0f, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x64,
	0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x42, 0x12,
	0x82, 0xb5, 0x18, 0x0e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x0e, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x65, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x16, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61,
	0x6c, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x09, 0x82, 0xb5,
	0x18, 0x05, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x12,
	0x2c, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04,
	0x42, 0x12, 0x82, 0xb5, 0x18, 0x0e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x22, 0xa6, 0x08,
	0x0a, 0x16, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x56, 0x6f, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x12, 0x62, 0x0a, 0x10, 0x69, 0x6e, 0x64, 0x69,
	0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c,
	0x56, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x2e, 0x49, 0x6e, 0x64,
	0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x0f, 0x69, 0x6e, 0x64,
	0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x1a, 0xa7, 0x07, 0x0a,
	0x0e, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x56, 0x6f, 0x74, 0x65, 0x12,
	0x1f, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x09,
	0x82, 0xb5, 0x18, 0x05, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12,
	0x3b, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x12, 0x82, 0xb5, 0x18, 0x0e, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x0e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x73, 0x5f, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x69, 0x73, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x64, 0x12, 0x46, 0x0a, 0x20, 0x69,
	0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69,
	0x6e, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x69, 0x73, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x70,
	0x6f, 0x63, 0x68, 0x12, 0x3a, 0x0a, 0x1a, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x49, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12,
	0x3c, 0x0a, 0x1b, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x5f,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x39, 0x0a,
	0x19, 0x69, 0x73, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x16, 0x69, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68,
	0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x20, 0x69, 0x73, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1c, 0x69, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x70, 0x6f,
	0x63, 0x68, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x3b, 0x0a, 0x1a, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x72, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x69, 0x73, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x45, 0x70, 0x6f, 0x63, 0x68, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0x48, 0x0a,
	0x21, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x69, 0x73, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x6f, 0x75, 0x73, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x1f, 0x69, 0x73, 0x5f, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x68, 0x65, 0x61,
	0x64, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1b, 0x69, 0x73, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x45, 0x70, 0x6f, 0x63,
	0x68, 0x48, 0x65, 0x61, 0x64, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0x4e, 0x0a,
	0x24, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x67, 0x77, 0x65, 0x69, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x20, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x77, 0x65, 0x69, 0x12, 0x31, 0x0a,
	0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0a, 0x18, 0x01, 0x82, 0xb5, 0x18, 0x04, 0x53, 0x6c, 0x6f,
	0x74, 0x52, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74,
	0x12, 0x39, 0x0a, 0x12, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0a, 0x18, 0x01,
	0x82, 0xb5, 0x18, 0x04, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73,
	0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x69,
	0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x7b, 0x0a, 0x1a, 0x57, 0x65, 0x61, 0x6b, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x6f,
	0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x6f, 0x6f, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x6f,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f,
	0x6f, 0x74, 0x12, 0x1f, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x09, 0x82, 0xb5, 0x18, 0x05, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x52, 0x05, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x22, 0x93, 0x01, 0x0a, 0x1b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x69,
	0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x78, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x2e,
	0x0a, 0x13, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x29,
	0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0c, 0x42, 0x08, 0x8a, 0xb5, 0x18, 0x04, 0x3f, 0x2c, 0x34, 0x38, 0x52, 0x0a, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x22, 0xae, 0x01, 0x0a, 0x15, 0x46, 0x69,
	0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x09, 0x82, 0xb5, 0x18, 0x05, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x52, 0x05, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x78, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x2e, 0x0a, 0x13, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x29, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0c, 0x42, 0x08, 0x8a, 0xb5, 0x18, 0x04, 0x3f, 0x2c, 0x34, 0x38, 0x52, 0x0a,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x22, 0x65, 0x0a, 0x0e, 0x46, 0x69,
	0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1c, 0x0a, 0x04,
	0x53, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04,
	0x53, 0x6c, 0x6f, 0x74, 0x52, 0x04, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x35, 0x0a, 0x03, 0x74, 0x78,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e,
	0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x74, 0x78,
	0x73, 0x22, 0xba, 0x01, 0x0a, 0x16, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x45,
	0x70, 0x6f, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x05,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x09, 0x82, 0xb5, 0x18,
	0x05, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x38, 0x0a,
	0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x45, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2a, 0x56,
	0x0a, 0x09, 0x53, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x12, 0x41,
	0x44, 0x44, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4b, 0x45, 0x59,
	0x53, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x10, 0x01, 0x12, 0x16,
	0x0a, 0x12, 0x53, 0x45, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x4f, 0x52, 0x5f,
	0x4b, 0x45, 0x59, 0x53, 0x10, 0x02, 0x32, 0xab, 0x2f, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x85, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2a, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xa2, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x30, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x65, 0x64, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x65, 0x64, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c,
	0x12, 0x1a, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x12, 0x70, 0x0a, 0x12,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1d, 0x2e, 0x70, 0x68, 0x6f,
	0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x41, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1b, 0x12, 0x19, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x30, 0x01, 0x12, 0x86,
	0x01, 0x0a, 0x19, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64,
	0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x24, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x41,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x23, 0x12, 0x21, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x2f, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x30, 0x01, 0x12, 0x87, 0x01, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x28, 0x2e, 0x70, 0x68,
	0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x41,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f,
	0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x6f,
	0x6c, 0x12, 0x72, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12,
	0x23, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x13, 0x12, 0x11, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x73, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x25, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70,
	0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x1b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x30, 0x01, 0x12, 0x68, 0x0a, 0x0f, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x48, 0x65,
	0x61, 0x64, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x6e, 0x6f, 0x64,
	0x65, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x68, 0x65, 0x61, 0x64, 0x2f, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x30, 0x01, 0x12, 0x5c, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x48, 0x65, 0x61, 0x64, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x70,
	0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x11, 0x12, 0x0f, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x68, 0x65,
	0x61, 0x64, 0x12, 0x91, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x57, 0x65, 0x61, 0x6b, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2c, 0x2e, 0x70,
	0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e,
	0x57, 0x65, 0x61, 0x6b, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x24, 0x12, 0x22, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x77, 0x65, 0x61, 0x6b, 0x5f, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x71, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f,
	0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x73, 0x22,
	0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x73, 0x12, 0x8f, 0x01, 0x0a, 0x15, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x12, 0x2e, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b,
	0x12, 0x19, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x2f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x71, 0x0a, 0x0e, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x27, 0x2e,
	0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x73, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x6e,
	0x6f, 0x64, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x6b,
	0x0a, 0x0c, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x25,
	0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x6e, 0x6f, 0x64,
	0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x12, 0xa4, 0x01, 0x0a, 0x1c,
	0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x35, 0x2e, 0x70,
	0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12,
	0x21, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x65, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x12, 0x6d, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x20, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x6e, 0x6f, 0x64, 0x65,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x12, 0x9e, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2d, 0x2e,
	0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x70,
	0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x9b, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x31, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x73, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0xa9, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32,
	0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x30, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x6e,
	0x6f, 0x64, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1d, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c, 0x2f,
	0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x87, 0x01, 0x0a, 0x14,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x68, 0x6f,
	0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x24, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x28, 0x01, 0x30, 0x01, 0x12, 0x8f, 0x01, 0x0a, 0x16, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x12, 0x22, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x73,
	0x68, 0x69, 0x6e, 0x67, 0x1a, 0x28, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x6c,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x73, 0x6c,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x72,
	0x2f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x12, 0x8f, 0x01, 0x0a, 0x16, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x12, 0x22, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x53, 0x6c,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x1a, 0x28, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x53, 0x6c, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f,
	0x73, 0x6c, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x65, 0x72, 0x2f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x12, 0x88, 0x01, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x56, 0x6f, 0x74, 0x65, 0x73,
	0x12, 0x28, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x56, 0x6f,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x70, 0x68, 0x6f,
	0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x49, 0x6e,
	0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x64, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x6e,
	0x6f, 0x64, 0x65, 0x2f, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x5f, 0x76,
	0x6f, 0x74, 0x65, 0x73, 0x12, 0x6f, 0x0a, 0x08, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x78,
	0x12, 0x23, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x22, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54,
	0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x14, 0x22, 0x0f, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x74, 0x78, 0x2f, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x96, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x2b, 0x2e, 0x70,
	0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x70, 0x68, 0x6f, 0x74,
	0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22,
	0x1a, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x82,
	0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x45,
	0x70, 0x6f, 0x63, 0x68, 0x12, 0x27, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x22,
	0x0f, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x2f, 0x67, 0x65, 0x74,
	0x3a, 0x01, 0x2a, 0x12, 0x8d, 0x01, 0x0a, 0x14, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x69,
	0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x2d, 0x2e, 0x70,
	0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x45,
	0x70, 0x6f, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x70, 0x68,
	0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x46,
	0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f,
	0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x30, 0x01, 0x12, 0x63, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x20, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x18,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x22, 0x0d, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x6e, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x44,
	0x75, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1f, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x44, 0x75, 0x74, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x44, 0x75, 0x74, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18,
	0x12, 0x16, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x2f, 0x64, 0x75, 0x74, 0x69, 0x65, 0x73, 0x12, 0x7a, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x44, 0x75, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1f, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f,
	0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x44, 0x75, 0x74, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x68, 0x6f, 0x74,
	0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x44, 0x75, 0x74,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x2f, 0x64, 0x75, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x30, 0x01, 0x12, 0x81, 0x01, 0x0a, 0x11, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x24, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x88, 0x02, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2f,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x30, 0x01, 0x12, 0x9d, 0x01, 0x0a, 0x11, 0x57, 0x61, 0x69,
	0x74, 0x46, 0x6f, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c,
	0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x70,
	0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x30, 0x01, 0x12, 0x82, 0x01, 0x0a, 0x0e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x27, 0x2e, 0x70, 0x68,
	0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x86, 0x01,
	0x0a, 0x0f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x28, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x70, 0x68,
	0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16,
	0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0xa0, 0x01, 0x0a, 0x17, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x30, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12,
	0x18, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x7e, 0x0a, 0x0d, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x2e, 0x70, 0x68, 0x6f,
	0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x6a, 0x0a, 0x08, 0x47, 0x65, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1e, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x25,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x65, 0x74, 0x68, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x7a, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1d, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0x21, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22,
	0x1d, 0x2f, 0x65, 0x74, 0x68, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x3a, 0x01,
	0x2a, 0x12, 0x86, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f,
	0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f,
	0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x61,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7d, 0x0a, 0x12, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x65, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1d, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x20, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x6e, 0x6f, 0x64, 0x65,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0xa0, 0x01, 0x0a, 0x1d, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x2b, 0x2e, 0x70, 0x68,
	0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f,
	0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19,
	0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2f,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0xb3, 0x01, 0x0a,
	0x23, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x12, 0x2e, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x22, 0x20, 0x2f,
	0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x3a,
	0x01, 0x2a, 0x12, 0x94, 0x01, 0x0a, 0x19, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73,
	0x12, 0x32, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2b, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x25, 0x22, 0x20, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x88, 0x01, 0x0a, 0x11, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x44, 0x6f, 0x70, 0x70, 0x65, 0x6c, 0x47, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x12,
	0x25, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x2e, 0x44, 0x6f, 0x70, 0x70, 0x65, 0x6c, 0x47, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x44, 0x6f, 0x70, 0x70, 0x65, 0x6c,
	0x47, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x64, 0x6f, 0x70, 0x70, 0x65, 0x6c, 0x67, 0x61,
	0x6e, 0x67, 0x65, 0x72, 0x42, 0x95, 0x01, 0x0a, 0x1e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x42, 0x09, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f,
	0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x3b, 0x70, 0x62, 0x63, 0xaa, 0x02, 0x16, 0x70, 0x68, 0x6f,
	0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0xca, 0x02, 0x16, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x5c, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x5c, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_consensus_node_proto_rawDescOnce sync.Once
	file_consensus_node_proto_rawDescData = file_consensus_node_proto_rawDesc
)

func file_consensus_node_proto_rawDescGZIP() []byte {
	file_consensus_node_proto_rawDescOnce.Do(func() {
		file_consensus_node_proto_rawDescData = protoimpl.X.CompressGZIP(file_consensus_node_proto_rawDescData)
	})
	return file_consensus_node_proto_rawDescData
}

var file_consensus_node_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_consensus_node_proto_msgTypes = make([]protoimpl.MessageInfo, 45)
var file_consensus_node_proto_goTypes = []interface{}{
	(SetAction)(0),                                   // 0: photon.consensus.SetAction
	(*ValidatorChangeSet)(nil),                       // 1: photon.consensus.ValidatorChangeSet
	(*ListIndexedAttestationsRequest)(nil),           // 2: photon.consensus.ListIndexedAttestationsRequest
	(*ListAttestationsRequest)(nil),                  // 3: photon.consensus.ListAttestationsRequest
	(*ListAttestationsResponse)(nil),                 // 4: photon.consensus.ListAttestationsResponse
	(*ListIndexedAttestationsResponse)(nil),          // 5: photon.consensus.ListIndexedAttestationsResponse
	(*ListBlocksRequest)(nil),                        // 6: photon.consensus.ListBlocksRequest
	(*ListBlocksResponse)(nil),                       // 7: photon.consensus.ListBlocksResponse
	(*BlockContainer)(nil),                           // 8: photon.consensus.BlockContainer
	(*ChainHead)(nil),                                // 9: photon.consensus.ChainHead
	(*ListCommitteesRequest)(nil),                    // 10: photon.consensus.ListCommitteesRequest
	(*Committees)(nil),                               // 11: photon.consensus.Committees
	(*ListValidatorBalancesRequest)(nil),             // 12: photon.consensus.ListValidatorBalancesRequest
	(*ValidatorBalances)(nil),                        // 13: photon.consensus.ValidatorBalances
	(*ListValidatorsRequest)(nil),                    // 14: photon.consensus.ListValidatorsRequest
	(*GetValidatorRequest)(nil),                      // 15: photon.consensus.GetValidatorRequest
	(*Validators)(nil),                               // 16: photon.consensus.Validators
	(*GetValidatorActiveSetChangesRequest)(nil),      // 17: photon.consensus.GetValidatorActiveSetChangesRequest
	(*ActiveSetChanges)(nil),                         // 18: photon.consensus.ActiveSetChanges
	(*ValidatorPerformanceRequest)(nil),              // 19: photon.consensus.ValidatorPerformanceRequest
	(*ValidatorPerformanceResponse)(nil),             // 20: photon.consensus.ValidatorPerformanceResponse
	(*ValidatorQueue)(nil),                           // 21: photon.consensus.ValidatorQueue
	(*ListValidatorAssignmentsRequest)(nil),          // 22: photon.consensus.ListValidatorAssignmentsRequest
	(*ValidatorAssignments)(nil),                     // 23: photon.consensus.ValidatorAssignments
	(*GetValidatorParticipationRequest)(nil),         // 24: photon.consensus.GetValidatorParticipationRequest
	(*ValidatorParticipationResponse)(nil),           // 25: photon.consensus.ValidatorParticipationResponse
	(*AttestationPoolRequest)(nil),                   // 26: photon.consensus.AttestationPoolRequest
	(*AttestationPoolResponse)(nil),                  // 27: photon.consensus.AttestationPoolResponse
	(*ChainConfig)(nil),                              // 28: photon.consensus.ChainConfig
	(*AccountRequest)(nil),                           // 29: photon.consensus.AccountRequest
	(*SubmitSlashingResponse)(nil),                   // 30: photon.consensus.SubmitSlashingResponse
	(*IndividualVotesRequest)(nil),                   // 31: photon.consensus.IndividualVotesRequest
	(*IndividualVotesRespond)(nil),                   // 32: photon.consensus.IndividualVotesRespond
	(*WeakSubjectivityCheckpoint)(nil),               // 33: photon.consensus.WeakSubjectivityCheckpoint
	(*StreamFinalizedEpochRequest)(nil),              // 34: photon.consensus.StreamFinalizedEpochRequest
	(*FinalizedEpochRequest)(nil),                    // 35: photon.consensus.FinalizedEpochRequest
	(*FinalizedBlock)(nil),                           // 36: photon.consensus.FinalizedBlock
	(*FinalizedEpochResponse)(nil),                   // 37: photon.consensus.FinalizedEpochResponse
	(*Committees_CommitteeItem)(nil),                 // 38: photon.consensus.Committees.CommitteeItem
	(*Committees_CommitteesList)(nil),                // 39: photon.consensus.Committees.CommitteesList
	nil,                                              // 40: photon.consensus.Committees.CommitteesEntry
	(*ValidatorBalances_Balance)(nil),                // 41: photon.consensus.ValidatorBalances.Balance
	(*Validators_ValidatorContainer)(nil),            // 42: photon.consensus.Validators.ValidatorContainer
	(*ValidatorAssignments_CommitteeAssignment)(nil), // 43: photon.consensus.ValidatorAssignments.CommitteeAssignment
	nil, // 44: photon.consensus.ChainConfig.ConfigEntry
	(*IndividualVotesRespond_IndividualVote)(nil), // 45: photon.consensus.IndividualVotesRespond.IndividualVote
	(*Attestation)(nil),                           // 46: photon.consensus.Attestation
	(*IndexedAttestation)(nil),                    // 47: photon.consensus.IndexedAttestation
	(*SignedBlock)(nil),                           // 48: photon.consensus.SignedBlock
	(*ValidatorParticipation)(nil),                // 49: photon.consensus.ValidatorParticipation
	(*SignedTransaction)(nil),                     // 50: photon.consensus.SignedTransaction
	(*StorageEvent)(nil),                          // 51: photon.consensus.StorageEvent
	(*Validator)(nil),                             // 52: photon.consensus.Validator
	(*emptypb.Empty)(nil),                         // 53: google.protobuf.Empty
	(*StreamBlocksRequest)(nil),                   // 54: photon.consensus.StreamBlocksRequest
	(*AttesterSlashing)(nil),                      // 55: photon.consensus.AttesterSlashing
	(*ProposerSlashing)(nil),                      // 56: photon.consensus.ProposerSlashing
	(*GetStorageContractRequest)(nil),             // 57: photon.consensus.GetStorageContractRequest
	(*DutiesRequest)(nil),                         // 58: photon.consensus.DutiesRequest
	(*ValidatorActivationRequest)(nil),            // 59: photon.consensus.ValidatorActivationRequest
	(*ValidatorIndexRequest)(nil),                 // 60: photon.consensus.ValidatorIndexRequest
	(*ValidatorStatusRequest)(nil),                // 61: photon.consensus.ValidatorStatusRequest
	(*MultipleValidatorStatusRequest)(nil),        // 62: photon.consensus.MultipleValidatorStatusRequest
	(*AuditorStatusRequest)(nil),                  // 63: photon.consensus.AuditorStatusRequest
	(*BlockRequest)(nil),                          // 64: photon.consensus.BlockRequest
	(*AttestationDataRequest)(nil),                // 65: photon.consensus.AttestationDataRequest
	(*AggregateSelectionRequest)(nil),             // 66: photon.consensus.AggregateSelectionRequest
	(*SignedAggregateSubmitRequest)(nil),          // 67: photon.consensus.SignedAggregateSubmitRequest
	(*CommitteeSubnetsSubscribeRequest)(nil),      // 68: photon.consensus.CommitteeSubnetsSubscribeRequest
	(*DoppelGangerRequest)(nil),                   // 69: photon.consensus.DoppelGangerRequest
	(*ValidatorInfo)(nil),                         // 70: photon.consensus.ValidatorInfo
	(*SubmitTxResponse)(nil),                      // 71: photon.consensus.SubmitTxResponse
	(*GetStorageContractResponse)(nil),            // 72: photon.consensus.GetStorageContractResponse
	(*Account)(nil),                               // 73: photon.consensus.Account
	(*DutiesResponse)(nil),                        // 74: photon.consensus.DutiesResponse
	(*ChainStartResponse)(nil),                    // 75: photon.consensus.ChainStartResponse
	(*ValidatorActivationResponse)(nil),           // 76: photon.consensus.ValidatorActivationResponse
	(*ValidatorIndexResponse)(nil),                // 77: photon.consensus.ValidatorIndexResponse
	(*ValidatorStatusResponse)(nil),               // 78: photon.consensus.ValidatorStatusResponse
	(*MultipleValidatorStatusResponse)(nil),       // 79: photon.consensus.MultipleValidatorStatusResponse
	(*AuditorStatusResponse)(nil),                 // 80: photon.consensus.AuditorStatusResponse
	(*Block)(nil),                                 // 81: photon.consensus.Block
	(*ProposeResponse)(nil),                       // 82: photon.consensus.ProposeResponse
	(*AttestationData)(nil),                       // 83: photon.consensus.AttestationData
	(*AttestResponse)(nil),                        // 84: photon.consensus.AttestResponse
	(*AggregateSelectionResponse)(nil),            // 85: photon.consensus.AggregateSelectionResponse
	(*SignedAggregateSubmitResponse)(nil),         // 86: photon.consensus.SignedAggregateSubmitResponse
	(*DoppelGangerResponse)(nil),                  // 87: photon.consensus.DoppelGangerResponse
}
var file_consensus_node_proto_depIdxs = []int32{
	0,  // 0: photon.consensus.ValidatorChangeSet.action:type_name -> photon.consensus.SetAction
	46, // 1: photon.consensus.ListAttestationsResponse.attestations:type_name -> photon.consensus.Attestation
	47, // 2: photon.consensus.ListIndexedAttestationsResponse.indexed_attestations:type_name -> photon.consensus.IndexedAttestation
	8,  // 3: photon.consensus.ListBlocksResponse.block_containers:type_name -> photon.consensus.BlockContainer
	48, // 4: photon.consensus.BlockContainer.altair_block:type_name -> photon.consensus.SignedBlock
	40, // 5: photon.consensus.Committees.committees:type_name -> photon.consensus.Committees.CommitteesEntry
	41, // 6: photon.consensus.ValidatorBalances.balances:type_name -> photon.consensus.ValidatorBalances.Balance
	42, // 7: photon.consensus.Validators.validator_list:type_name -> photon.consensus.Validators.ValidatorContainer
	43, // 8: photon.consensus.ValidatorAssignments.assignments:type_name -> photon.consensus.ValidatorAssignments.CommitteeAssignment
	49, // 9: photon.consensus.ValidatorParticipationResponse.participation:type_name -> photon.consensus.ValidatorParticipation
	46, // 10: photon.consensus.AttestationPoolResponse.attestations:type_name -> photon.consensus.Attestation
	44, // 11: photon.consensus.ChainConfig.config:type_name -> photon.consensus.ChainConfig.ConfigEntry
	45, // 12: photon.consensus.IndividualVotesRespond.individual_votes:type_name -> photon.consensus.IndividualVotesRespond.IndividualVote
	50, // 13: photon.consensus.FinalizedBlock.txs:type_name -> photon.consensus.SignedTransaction
	36, // 14: photon.consensus.FinalizedEpochResponse.blocks:type_name -> photon.consensus.FinalizedBlock
	51, // 15: photon.consensus.FinalizedEpochResponse.storage_events:type_name -> photon.consensus.StorageEvent
	38, // 16: photon.consensus.Committees.CommitteesList.committees:type_name -> photon.consensus.Committees.CommitteeItem
	39, // 17: photon.consensus.Committees.CommitteesEntry.value:type_name -> photon.consensus.Committees.CommitteesList
	52, // 18: photon.consensus.Validators.ValidatorContainer.validator:type_name -> photon.consensus.Validator
	3,  // 19: photon.consensus.Node.ListAttestations:input_type -> photon.consensus.ListAttestationsRequest
	2,  // 20: photon.consensus.Node.ListIndexedAttestations:input_type -> photon.consensus.ListIndexedAttestationsRequest
	53, // 21: photon.consensus.Node.StreamAttestations:input_type -> google.protobuf.Empty
	53, // 22: photon.consensus.Node.StreamIndexedAttestations:input_type -> google.protobuf.Empty
	26, // 23: photon.consensus.Node.AttestationPool:input_type -> photon.consensus.AttestationPoolRequest
	6,  // 24: photon.consensus.Node.ListBlocks:input_type -> photon.consensus.ListBlocksRequest
	54, // 25: photon.consensus.Node.StreamBlocks:input_type -> photon.consensus.StreamBlocksRequest
	53, // 26: photon.consensus.Node.StreamChainHead:input_type -> google.protobuf.Empty
	53, // 27: photon.consensus.Node.GetChainHead:input_type -> google.protobuf.Empty
	53, // 28: photon.consensus.Node.GetWeakSubjectivityCheckpoint:input_type -> google.protobuf.Empty
	10, // 29: photon.consensus.Node.ListCommittees:input_type -> photon.consensus.ListCommitteesRequest
	12, // 30: photon.consensus.Node.ListValidatorBalances:input_type -> photon.consensus.ListValidatorBalancesRequest
	14, // 31: photon.consensus.Node.ListValidators:input_type -> photon.consensus.ListValidatorsRequest
	15, // 32: photon.consensus.Node.GetValidator:input_type -> photon.consensus.GetValidatorRequest
	17, // 33: photon.consensus.Node.GetValidatorActiveSetChanges:input_type -> photon.consensus.GetValidatorActiveSetChangesRequest
	53, // 34: photon.consensus.Node.GetValidatorQueue:input_type -> google.protobuf.Empty
	19, // 35: photon.consensus.Node.GetValidatorPerformance:input_type -> photon.consensus.ValidatorPerformanceRequest
	22, // 36: photon.consensus.Node.ListValidatorAssignments:input_type -> photon.consensus.ListValidatorAssignmentsRequest
	24, // 37: photon.consensus.Node.GetValidatorParticipation:input_type -> photon.consensus.GetValidatorParticipationRequest
	53, // 38: photon.consensus.Node.GetChainConfig:input_type -> google.protobuf.Empty
	1,  // 39: photon.consensus.Node.StreamValidatorsInfo:input_type -> photon.consensus.ValidatorChangeSet
	55, // 40: photon.consensus.Node.SubmitAttesterSlashing:input_type -> photon.consensus.AttesterSlashing
	56, // 41: photon.consensus.Node.SubmitProposerSlashing:input_type -> photon.consensus.ProposerSlashing
	31, // 42: photon.consensus.Node.GetIndividualVotes:input_type -> photon.consensus.IndividualVotesRequest
	50, // 43: photon.consensus.Node.SubmitTx:input_type -> photon.consensus.SignedTransaction
	57, // 44: photon.consensus.Node.GetStorageContract:input_type -> photon.consensus.GetStorageContractRequest
	35, // 45: photon.consensus.Node.GetFinalizedEpoch:input_type -> photon.consensus.FinalizedEpochRequest
	34, // 46: photon.consensus.Node.StreamFinalizedEpoch:input_type -> photon.consensus.StreamFinalizedEpochRequest
	29, // 47: photon.consensus.Node.GetAccount:input_type -> photon.consensus.AccountRequest
	58, // 48: photon.consensus.Node.GetDuties:input_type -> photon.consensus.DutiesRequest
	58, // 49: photon.consensus.Node.StreamDuties:input_type -> photon.consensus.DutiesRequest
	53, // 50: photon.consensus.Node.WaitForChainStart:input_type -> google.protobuf.Empty
	59, // 51: photon.consensus.Node.WaitForActivation:input_type -> photon.consensus.ValidatorActivationRequest
	60, // 52: photon.consensus.Node.ValidatorIndex:input_type -> photon.consensus.ValidatorIndexRequest
	61, // 53: photon.consensus.Node.ValidatorStatus:input_type -> photon.consensus.ValidatorStatusRequest
	62, // 54: photon.consensus.Node.MultipleValidatorStatus:input_type -> photon.consensus.MultipleValidatorStatusRequest
	63, // 55: photon.consensus.Node.AuditorStatus:input_type -> photon.consensus.AuditorStatusRequest
	64, // 56: photon.consensus.Node.GetBlock:input_type -> photon.consensus.BlockRequest
	48, // 57: photon.consensus.Node.ProposeBlock:input_type -> photon.consensus.SignedBlock
	65, // 58: photon.consensus.Node.GetAttestationData:input_type -> photon.consensus.AttestationDataRequest
	46, // 59: photon.consensus.Node.ProposeAttestation:input_type -> photon.consensus.Attestation
	66, // 60: photon.consensus.Node.SubmitAggregateSelectionProof:input_type -> photon.consensus.AggregateSelectionRequest
	67, // 61: photon.consensus.Node.SubmitSignedAggregateSelectionProof:input_type -> photon.consensus.SignedAggregateSubmitRequest
	68, // 62: photon.consensus.Node.SubscribeCommitteeSubnets:input_type -> photon.consensus.CommitteeSubnetsSubscribeRequest
	69, // 63: photon.consensus.Node.CheckDoppelGanger:input_type -> photon.consensus.DoppelGangerRequest
	4,  // 64: photon.consensus.Node.ListAttestations:output_type -> photon.consensus.ListAttestationsResponse
	5,  // 65: photon.consensus.Node.ListIndexedAttestations:output_type -> photon.consensus.ListIndexedAttestationsResponse
	46, // 66: photon.consensus.Node.StreamAttestations:output_type -> photon.consensus.Attestation
	47, // 67: photon.consensus.Node.StreamIndexedAttestations:output_type -> photon.consensus.IndexedAttestation
	27, // 68: photon.consensus.Node.AttestationPool:output_type -> photon.consensus.AttestationPoolResponse
	7,  // 69: photon.consensus.Node.ListBlocks:output_type -> photon.consensus.ListBlocksResponse
	48, // 70: photon.consensus.Node.StreamBlocks:output_type -> photon.consensus.SignedBlock
	9,  // 71: photon.consensus.Node.StreamChainHead:output_type -> photon.consensus.ChainHead
	9,  // 72: photon.consensus.Node.GetChainHead:output_type -> photon.consensus.ChainHead
	33, // 73: photon.consensus.Node.GetWeakSubjectivityCheckpoint:output_type -> photon.consensus.WeakSubjectivityCheckpoint
	11, // 74: photon.consensus.Node.ListCommittees:output_type -> photon.consensus.Committees
	13, // 75: photon.consensus.Node.ListValidatorBalances:output_type -> photon.consensus.ValidatorBalances
	16, // 76: photon.consensus.Node.ListValidators:output_type -> photon.consensus.Validators
	52, // 77: photon.consensus.Node.GetValidator:output_type -> photon.consensus.Validator
	18, // 78: photon.consensus.Node.GetValidatorActiveSetChanges:output_type -> photon.consensus.ActiveSetChanges
	21, // 79: photon.consensus.Node.GetValidatorQueue:output_type -> photon.consensus.ValidatorQueue
	20, // 80: photon.consensus.Node.GetValidatorPerformance:output_type -> photon.consensus.ValidatorPerformanceResponse
	23, // 81: photon.consensus.Node.ListValidatorAssignments:output_type -> photon.consensus.ValidatorAssignments
	25, // 82: photon.consensus.Node.GetValidatorParticipation:output_type -> photon.consensus.ValidatorParticipationResponse
	28, // 83: photon.consensus.Node.GetChainConfig:output_type -> photon.consensus.ChainConfig
	70, // 84: photon.consensus.Node.StreamValidatorsInfo:output_type -> photon.consensus.ValidatorInfo
	30, // 85: photon.consensus.Node.SubmitAttesterSlashing:output_type -> photon.consensus.SubmitSlashingResponse
	30, // 86: photon.consensus.Node.SubmitProposerSlashing:output_type -> photon.consensus.SubmitSlashingResponse
	32, // 87: photon.consensus.Node.GetIndividualVotes:output_type -> photon.consensus.IndividualVotesRespond
	71, // 88: photon.consensus.Node.SubmitTx:output_type -> photon.consensus.SubmitTxResponse
	72, // 89: photon.consensus.Node.GetStorageContract:output_type -> photon.consensus.GetStorageContractResponse
	37, // 90: photon.consensus.Node.GetFinalizedEpoch:output_type -> photon.consensus.FinalizedEpochResponse
	37, // 91: photon.consensus.Node.StreamFinalizedEpoch:output_type -> photon.consensus.FinalizedEpochResponse
	73, // 92: photon.consensus.Node.GetAccount:output_type -> photon.consensus.Account
	74, // 93: photon.consensus.Node.GetDuties:output_type -> photon.consensus.DutiesResponse
	74, // 94: photon.consensus.Node.StreamDuties:output_type -> photon.consensus.DutiesResponse
	75, // 95: photon.consensus.Node.WaitForChainStart:output_type -> photon.consensus.ChainStartResponse
	76, // 96: photon.consensus.Node.WaitForActivation:output_type -> photon.consensus.ValidatorActivationResponse
	77, // 97: photon.consensus.Node.ValidatorIndex:output_type -> photon.consensus.ValidatorIndexResponse
	78, // 98: photon.consensus.Node.ValidatorStatus:output_type -> photon.consensus.ValidatorStatusResponse
	79, // 99: photon.consensus.Node.MultipleValidatorStatus:output_type -> photon.consensus.MultipleValidatorStatusResponse
	80, // 100: photon.consensus.Node.AuditorStatus:output_type -> photon.consensus.AuditorStatusResponse
	81, // 101: photon.consensus.Node.GetBlock:output_type -> photon.consensus.Block
	82, // 102: photon.consensus.Node.ProposeBlock:output_type -> photon.consensus.ProposeResponse
	83, // 103: photon.consensus.Node.GetAttestationData:output_type -> photon.consensus.AttestationData
	84, // 104: photon.consensus.Node.ProposeAttestation:output_type -> photon.consensus.AttestResponse
	85, // 105: photon.consensus.Node.SubmitAggregateSelectionProof:output_type -> photon.consensus.AggregateSelectionResponse
	86, // 106: photon.consensus.Node.SubmitSignedAggregateSelectionProof:output_type -> photon.consensus.SignedAggregateSubmitResponse
	53, // 107: photon.consensus.Node.SubscribeCommitteeSubnets:output_type -> google.protobuf.Empty
	87, // 108: photon.consensus.Node.CheckDoppelGanger:output_type -> photon.consensus.DoppelGangerResponse
	64, // [64:109] is the sub-list for method output_type
	19, // [19:64] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_consensus_node_proto_init() }
func file_consensus_node_proto_init() {
	if File_consensus_node_proto != nil {
		return
	}
	file_consensus_account_proto_init()
	file_consensus_block_proto_init()
	file_consensus_transaction_proto_init()
	file_consensus_contract_proto_init()
	file_consensus_attestation_proto_init()
	file_consensus_validator_proto_init()
	file_consensus_auditor_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_consensus_node_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatorChangeSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_node_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIndexedAttestationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_node_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAttestationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_node_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAttestationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_node_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIndexedAttestationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_node_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBlocksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_node_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBlocksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_node_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockContainer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_node_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainHead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_node_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCommitteesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_node_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Committees); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_node_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListValidatorBalancesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_node_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatorBalances); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_node_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListValidatorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_node_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetValidatorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_node_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Validators); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_node_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetValidatorActiveSetChangesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_node_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActiveSetChanges); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_node_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatorPerformanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_node_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatorPerformanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_node_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatorQueue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_node_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListValidatorAssignmentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_node_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatorAssignments); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_node_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetValidatorParticipationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_node_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatorParticipationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_node_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttestationPoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_node_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttestationPoolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_node_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_node_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_node_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitSlashingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_node_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndividualVotesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_node_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndividualVotesRespond); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_node_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeakSubjectivityCheckpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_node_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamFinalizedEpochRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_node_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinalizedEpochRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_node_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinalizedBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_node_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinalizedEpochResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_node_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Committees_CommitteeItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_node_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Committees_CommitteesList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_node_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatorBalances_Balance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_node_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Validators_ValidatorContainer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_node_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatorAssignments_CommitteeAssignment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_node_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndividualVotesRespond_IndividualVote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_consensus_node_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ListIndexedAttestationsRequest_Epoch)(nil),
		(*ListIndexedAttestationsRequest_GenesisEpoch)(nil),
	}
	file_consensus_node_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*ListAttestationsRequest_Epoch)(nil),
		(*ListAttestationsRequest_GenesisEpoch)(nil),
	}
	file_consensus_node_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*ListBlocksRequest_Root)(nil),
		(*ListBlocksRequest_Slot)(nil),
		(*ListBlocksRequest_Epoch)(nil),
		(*ListBlocksRequest_Genesis)(nil),
	}
	file_consensus_node_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*BlockContainer_AltairBlock)(nil),
	}
	file_consensus_node_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*ListCommitteesRequest_Epoch)(nil),
		(*ListCommitteesRequest_Genesis)(nil),
	}
	file_consensus_node_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*ListValidatorBalancesRequest_Epoch)(nil),
		(*ListValidatorBalancesRequest_Genesis)(nil),
	}
	file_consensus_node_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*ListValidatorsRequest_Epoch)(nil),
		(*ListValidatorsRequest_Genesis)(nil),
	}
	file_consensus_node_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*GetValidatorRequest_Index)(nil),
		(*GetValidatorRequest_PublicKey)(nil),
	}
	file_consensus_node_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*GetValidatorActiveSetChangesRequest_Epoch)(nil),
		(*GetValidatorActiveSetChangesRequest_Genesis)(nil),
	}
	file_consensus_node_proto_msgTypes[21].OneofWrappers = []interface{}{
		(*ListValidatorAssignmentsRequest_Epoch)(nil),
		(*ListValidatorAssignmentsRequest_Genesis)(nil),
	}
	file_consensus_node_proto_msgTypes[23].OneofWrappers = []interface{}{
		(*GetValidatorParticipationRequest_Epoch)(nil),
		(*GetValidatorParticipationRequest_Genesis)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_consensus_node_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   45,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_consensus_node_proto_goTypes,
		DependencyIndexes: file_consensus_node_proto_depIdxs,
		EnumInfos:         file_consensus_node_proto_enumTypes,
		MessageInfos:      file_consensus_node_proto_msgTypes,
	}.Build()
	File_consensus_node_proto = out.File
	file_consensus_node_proto_rawDesc = nil
	file_consensus_node_proto_goTypes = nil
	file_consensus_node_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NodeClient is the client API for Node service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeClient interface {
	// Retrieve attestations by block root, slot, or epoch.
	//
	// The server may return an empty list when no attestations match the given
	// filter criteria. This RPC should not return NOT_FOUND. Only one filter
	// criteria should be used. This endpoint allows for retrieval of genesis
	// information via a boolean query filter.
	ListAttestations(ctx context.Context, in *ListAttestationsRequest, opts ...grpc.CallOption) (*ListAttestationsResponse, error)
	// Retrieve indexed attestations by block root, slot, or epoch.
	//
	// The server may return an empty list when no indexed attestations match the given
	// filter criteria. This RPC should not return NOT_FOUND. Only one filter
	// criteria should be used. This endpoint allows for retrieval of genesis
	// information via a boolean query filter.
	ListIndexedAttestations(ctx context.Context, in *ListIndexedAttestationsRequest, opts ...grpc.CallOption) (*ListIndexedAttestationsResponse, error)
	// Server-side stream of attestations as they are received by the chain node.
	StreamAttestations(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Node_StreamAttestationsClient, error)
	// Server-side stream of indexed attestations as they are received by the chain node.
	StreamIndexedAttestations(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Node_StreamIndexedAttestationsClient, error)
	// Retrieve attestations from pool.
	//
	// The server returns a list of attestations that have been seen but not
	// yet processed. Pool attestations eventually expire as the slot
	// advances, so an attestation missing from this request does not imply
	// that it was included in a block. The attestation may have expired.
	// Refer to the Ethereum Beacon Chain specification for more details on how
	// attestations are processed and when they are no longer valid.
	// https://github.com/ethereum/consensus-specs/blob/dev/specs/core/0_beacon-chain.md#attestations
	AttestationPool(ctx context.Context, in *AttestationPoolRequest, opts ...grpc.CallOption) (*AttestationPoolResponse, error)
	// Retrieve blocks by root, slot, or epoch.
	//
	// The server may return multiple blocks in the case that a slot or epoch is
	// provided as the filter criteria. The server may return an empty list when
	// no blocks in their database match the filter criteria. This RPC should
	// not return NOT_FOUND. Only one filter criteria should be used. This endpoint
	// allows for retrieval of genesis information via a boolean query filter.
	ListBlocks(ctx context.Context, in *ListBlocksRequest, opts ...grpc.CallOption) (*ListBlocksResponse, error)
	// Server-side stream of all signed blocks as they are received by the chain node.
	StreamBlocks(ctx context.Context, in *StreamBlocksRequest, opts ...grpc.CallOption) (Node_StreamBlocksClient, error)
	// Server-side stream of information about the head of the chain from the view of
	// the chain node.
	//
	// This includes the head block slot and root as well as information about
	// the most recent finalized and justified slots.
	StreamChainHead(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Node_StreamChainHeadClient, error)
	// Retrieve information about the head of the chain from the view of the chain node.
	//
	// This includes the head block slot and root as well as information about
	// the most recent finalized and justified slots.
	GetChainHead(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ChainHead, error)
	// Retrieve information about the weak subjectivity of the chain from the view of
	// the chain node.
	//
	// This includes the weak subjectivity block root, state root and epoch number.
	GetWeakSubjectivityCheckpoint(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*WeakSubjectivityCheckpoint, error)
	// Retrieve the chain committees for a given epoch.
	//
	// If no filter criteria is specified, the response returns all committees for
	// the current epoch. The results are paginated by default.
	// This endpoint allows for retrieval of genesis information via a boolean query filter.
	ListCommittees(ctx context.Context, in *ListCommitteesRequest, opts ...grpc.CallOption) (*Committees, error)
	// Retrieve validator balances for a given set of public keys at a specific
	// epoch in time. This endpoint allows for retrieval of genesis information
	// via a boolean query filter.
	ListValidatorBalances(ctx context.Context, in *ListValidatorBalancesRequest, opts ...grpc.CallOption) (*ValidatorBalances, error)
	// Retrieve the current validator registry.
	//
	// The request may include an optional historical epoch to retrieve a
	// specific validator set in time. This endpoint allows for retrieval of genesis
	// information via a boolean query filter.
	ListValidators(ctx context.Context, in *ListValidatorsRequest, opts ...grpc.CallOption) (*Validators, error)
	// Retrieve information about a specific validator in the registry.
	//
	// This request may query by validator index or public key.
	GetValidator(ctx context.Context, in *GetValidatorRequest, opts ...grpc.CallOption) (*Validator, error)
	// Retrieve the active set changes for a given epoch.
	//
	// This data includes any activations, voluntary exits, and involuntary
	// ejections. This endpoint allows for retrieval of genesis
	// information via a boolean query filter.
	GetValidatorActiveSetChanges(ctx context.Context, in *GetValidatorActiveSetChangesRequest, opts ...grpc.CallOption) (*ActiveSetChanges, error)
	// Retrieve the current validator queue information.
	GetValidatorQueue(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ValidatorQueue, error)
	// GetValidatorPerformance reports a validator's latest balance along with other important
	// metrics on rewards and penalties throughout its lifecycle in the chain.
	// The request takes in a list of validator public keys and returns a performance report
	// for all of them respectively.
	GetValidatorPerformance(ctx context.Context, in *ValidatorPerformanceRequest, opts ...grpc.CallOption) (*ValidatorPerformanceResponse, error)
	// Retrieve the validator assignments for a given epoch.
	//
	// This request may specify optional validator indices or public keys to
	// filter validator assignments. This endpoint allows for retrieval of genesis
	// information via a boolean query filter.
	ListValidatorAssignments(ctx context.Context, in *ListValidatorAssignmentsRequest, opts ...grpc.CallOption) (*ValidatorAssignments, error)
	// Retrieve the validator participation information for a given epoch.
	//
	// This method returns information about the global participation of
	// validator attestations. This endpoint allows for retrieval of genesis
	// information via a boolean query filter.
	GetValidatorParticipation(ctx context.Context, in *GetValidatorParticipationRequest, opts ...grpc.CallOption) (*ValidatorParticipationResponse, error)
	// Retrieve the current configuration parameters of the chain.
	GetChainConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ChainConfig, error)
	// Server-side stream of validator information at each epoch.
	StreamValidatorsInfo(ctx context.Context, opts ...grpc.CallOption) (Node_StreamValidatorsInfoClient, error)
	// Submit an attester slashing object to the node.
	SubmitAttesterSlashing(ctx context.Context, in *AttesterSlashing, opts ...grpc.CallOption) (*SubmitSlashingResponse, error)
	// Submit a proposer slashing object to the node.
	SubmitProposerSlashing(ctx context.Context, in *ProposerSlashing, opts ...grpc.CallOption) (*SubmitSlashingResponse, error)
	// Returns a list of validators individual vote status of a given epoch.
	GetIndividualVotes(ctx context.Context, in *IndividualVotesRequest, opts ...grpc.CallOption) (*IndividualVotesRespond, error)
	// Submit a transaction to the node.
	SubmitTx(ctx context.Context, in *SignedTransaction, opts ...grpc.CallOption) (*SubmitTxResponse, error)
	// Retrieve a storage contract for a given request.
	GetStorageContract(ctx context.Context, in *GetStorageContractRequest, opts ...grpc.CallOption) (*GetStorageContractResponse, error)
	// Returns data of a finalized epoch.
	GetFinalizedEpoch(ctx context.Context, in *FinalizedEpochRequest, opts ...grpc.CallOption) (*FinalizedEpochResponse, error)
	// Server-side stream of finalized epoch updates.
	StreamFinalizedEpoch(ctx context.Context, in *StreamFinalizedEpochRequest, opts ...grpc.CallOption) (Node_StreamFinalizedEpochClient, error)
	// Request account info from the node
	GetAccount(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*Account, error)
	// Retrieves validator duties for the requested validators.
	//
	// The duties consist of:
	//   Proposer - the validator that creates a chain block.
	//   Attester — a validator that is part of a committee that needs to sign off
	//      on a chain block while simultaneously creating a cross link to a recent
	//      shard block on a particular shard chain.
	// The server returns a list of duties which are the actions should be performed
	// by validators for a given epoch. Validator duties should be polled every epoch,
	// but due to chain reorg of >MIN_SEED_LOOKAHEAD could occur, the validator duties
	// could chain. For complete safety, it is recommended to poll at every slot to ensure
	// validator is fully aware of any sudden chain reorg.
	GetDuties(ctx context.Context, in *DutiesRequest, opts ...grpc.CallOption) (*DutiesResponse, error)
	// Stream validator duties for the requested validators.
	//
	// The duties consist of:
	//   Proposer - the validator that creates a chain block.
	//   Attester — a validator that is part of a committee that needs to sign off on a chain
	StreamDuties(ctx context.Context, in *DutiesRequest, opts ...grpc.CallOption) (Node_StreamDutiesClient, error)
	// Deprecated: Do not use.
	// WaitForChainStart queries the logs of the Validator Deposit Contract on the Ethereum
	// proof-of-work chain to verify the chain has started its runtime and
	// validators are ready to begin their responsibilities.
	//
	// If the chain has not yet started, this endpoint starts a server-side stream which updates
	// the client when the chain is ready.
	WaitForChainStart(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Node_WaitForChainStartClient, error)
	// WaitForActivation checks if a validator public key exists in the active validator
	// registry of the current state. If the validator is NOT yet active, it starts a
	// server-side stream which updates the client whenever the validator becomes active in
	// the node's state.
	//
	// The input to this endpoint is a list of validator public keys, and the corresponding
	// stream will respond until at least a single corresponding validator to those
	// keys is activated.
	WaitForActivation(ctx context.Context, in *ValidatorActivationRequest, opts ...grpc.CallOption) (Node_WaitForActivationClient, error)
	// ValidatorIndex retrieves a validator's index location in the state's
	// validator registry looking up whether the validator exists based on its
	// public key. This method returns NOT_FOUND if no index is found for the public key
	// specified in the request.
	ValidatorIndex(ctx context.Context, in *ValidatorIndexRequest, opts ...grpc.CallOption) (*ValidatorIndexResponse, error)
	// ValidatorStatus returns a validator's status based on the current epoch.
	//
	// The status response can be one of the following:
	//	UNKNOWN_VALIDATOR_STATUS - validator does not have a known status in
	//                             the network.
	//	VALIDATOR_PENDING - validator is in activation queue.
	//	VALIDATOR_ACTIVE - validator is active.
	//	VALIDATOR_EXITING - validator has initiated an an exit request, or has
	//                      dropped below the ejection balance and is being
	//                      kicked out.
	//	VALIDATOR_EXITED - validator is no longer validating.
	//	VALIDATOR_SLASHING - validator has been kicked out due to meeting a
	//                       slashing condition.
	ValidatorStatus(ctx context.Context, in *ValidatorStatusRequest, opts ...grpc.CallOption) (*ValidatorStatusResponse, error)
	// MultipleValidatorStatus returns a list of validator statuses on the current epoch.
	// The request can specify a list of validator public keys.
	//
	// Returns a list of ValidatorStatusResponses.
	MultipleValidatorStatus(ctx context.Context, in *MultipleValidatorStatusRequest, opts ...grpc.CallOption) (*MultipleValidatorStatusResponse, error)
	// AuditorStatus returns a auditor's status based on the current epoch.
	//
	// The status response can be one of the following:
	//	UNKNOWN_AUDITOR_STATUS - auditor does not have a known status in
	//                           the network.
	//	AUDITOR_PENDING - auditor is in activation queue.
	//	AUDITOR_ACTIVE - auditor is active.
	//	AUDITOR_EXITING - auditor has initiated an an exit request, or has
	//                    dropped below the ejection balance and is being
	//                    kicked out.
	//	AUDITOR_EXITED - auditor is no longer serving.
	AuditorStatus(ctx context.Context, in *AuditorStatusRequest, opts ...grpc.CallOption) (*AuditorStatusResponse, error)
	// Retrieves the latest valid block to be proposed on the chain.
	//
	// The server returns a new block, without proposer signature, that can be
	// proposed on the chain. The block should be filled with all the necessary
	// data for proposer to sign.
	GetBlock(ctx context.Context, in *BlockRequest, opts ...grpc.CallOption) (*Block, error)
	// Sends the newly signed block to node.
	//
	// The validator sends the newly signed block to the node so the block can
	// be included in the chain. The node is expected to validate and process the
	// block into its state.
	ProposeBlock(ctx context.Context, in *SignedBlock, opts ...grpc.CallOption) (*ProposeResponse, error)
	// Retrieves the latest valid attestation data to be attested on the chain.
	//
	// The server returns the latest valid data which represents the correct vote
	// for the head of the chain.
	GetAttestationData(ctx context.Context, in *AttestationDataRequest, opts ...grpc.CallOption) (*AttestationData, error)
	// Sends the newly signed attestation to node.
	//
	// The validator sends the newly signed attestation to the node for the attestation to
	// be included in the chain. The node is expected to validate and publish attestation on
	// appropriate committee subnet.
	ProposeAttestation(ctx context.Context, in *Attestation, opts ...grpc.CallOption) (*AttestResponse, error)
	// Submit selection proof to the node to aggregate all matching wire attestations with the same data root.
	// the node responses with an aggregate and proof object back to validator to sign over.
	SubmitAggregateSelectionProof(ctx context.Context, in *AggregateSelectionRequest, opts ...grpc.CallOption) (*AggregateSelectionResponse, error)
	// Submit a signed aggregate and proof object, the node will broadcast the
	// signed aggregated attestation and proof object.
	SubmitSignedAggregateSelectionProof(ctx context.Context, in *SignedAggregateSubmitRequest, opts ...grpc.CallOption) (*SignedAggregateSubmitResponse, error)
	// Subscribe to particular committee ID subnets given validator's duty.
	//
	// The node is expected to subscribe to the committee ID subnet given by the request. With this,
	// node serving attesters can find persistent peers on the subnet to publish attestation,
	// and node serving aggregator can join the subnet.
	SubscribeCommitteeSubnets(ctx context.Context, in *CommitteeSubnetsSubscribeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Checks the node if another instance of the provided validator keys have been
	// attesting/proposing for you.
	CheckDoppelGanger(ctx context.Context, in *DoppelGangerRequest, opts ...grpc.CallOption) (*DoppelGangerResponse, error)
}

type nodeClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeClient(cc grpc.ClientConnInterface) NodeClient {
	return &nodeClient{cc}
}

func (c *nodeClient) ListAttestations(ctx context.Context, in *ListAttestationsRequest, opts ...grpc.CallOption) (*ListAttestationsResponse, error) {
	out := new(ListAttestationsResponse)
	err := c.cc.Invoke(ctx, "/photon.consensus.Node/ListAttestations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) ListIndexedAttestations(ctx context.Context, in *ListIndexedAttestationsRequest, opts ...grpc.CallOption) (*ListIndexedAttestationsResponse, error) {
	out := new(ListIndexedAttestationsResponse)
	err := c.cc.Invoke(ctx, "/photon.consensus.Node/ListIndexedAttestations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) StreamAttestations(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Node_StreamAttestationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Node_serviceDesc.Streams[0], "/photon.consensus.Node/StreamAttestations", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeStreamAttestationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Node_StreamAttestationsClient interface {
	Recv() (*Attestation, error)
	grpc.ClientStream
}

type nodeStreamAttestationsClient struct {
	grpc.ClientStream
}

func (x *nodeStreamAttestationsClient) Recv() (*Attestation, error) {
	m := new(Attestation)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeClient) StreamIndexedAttestations(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Node_StreamIndexedAttestationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Node_serviceDesc.Streams[1], "/photon.consensus.Node/StreamIndexedAttestations", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeStreamIndexedAttestationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Node_StreamIndexedAttestationsClient interface {
	Recv() (*IndexedAttestation, error)
	grpc.ClientStream
}

type nodeStreamIndexedAttestationsClient struct {
	grpc.ClientStream
}

func (x *nodeStreamIndexedAttestationsClient) Recv() (*IndexedAttestation, error) {
	m := new(IndexedAttestation)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeClient) AttestationPool(ctx context.Context, in *AttestationPoolRequest, opts ...grpc.CallOption) (*AttestationPoolResponse, error) {
	out := new(AttestationPoolResponse)
	err := c.cc.Invoke(ctx, "/photon.consensus.Node/AttestationPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) ListBlocks(ctx context.Context, in *ListBlocksRequest, opts ...grpc.CallOption) (*ListBlocksResponse, error) {
	out := new(ListBlocksResponse)
	err := c.cc.Invoke(ctx, "/photon.consensus.Node/ListBlocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) StreamBlocks(ctx context.Context, in *StreamBlocksRequest, opts ...grpc.CallOption) (Node_StreamBlocksClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Node_serviceDesc.Streams[2], "/photon.consensus.Node/StreamBlocks", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeStreamBlocksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Node_StreamBlocksClient interface {
	Recv() (*SignedBlock, error)
	grpc.ClientStream
}

type nodeStreamBlocksClient struct {
	grpc.ClientStream
}

func (x *nodeStreamBlocksClient) Recv() (*SignedBlock, error) {
	m := new(SignedBlock)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeClient) StreamChainHead(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Node_StreamChainHeadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Node_serviceDesc.Streams[3], "/photon.consensus.Node/StreamChainHead", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeStreamChainHeadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Node_StreamChainHeadClient interface {
	Recv() (*ChainHead, error)
	grpc.ClientStream
}

type nodeStreamChainHeadClient struct {
	grpc.ClientStream
}

func (x *nodeStreamChainHeadClient) Recv() (*ChainHead, error) {
	m := new(ChainHead)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeClient) GetChainHead(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ChainHead, error) {
	out := new(ChainHead)
	err := c.cc.Invoke(ctx, "/photon.consensus.Node/GetChainHead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetWeakSubjectivityCheckpoint(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*WeakSubjectivityCheckpoint, error) {
	out := new(WeakSubjectivityCheckpoint)
	err := c.cc.Invoke(ctx, "/photon.consensus.Node/GetWeakSubjectivityCheckpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) ListCommittees(ctx context.Context, in *ListCommitteesRequest, opts ...grpc.CallOption) (*Committees, error) {
	out := new(Committees)
	err := c.cc.Invoke(ctx, "/photon.consensus.Node/ListCommittees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) ListValidatorBalances(ctx context.Context, in *ListValidatorBalancesRequest, opts ...grpc.CallOption) (*ValidatorBalances, error) {
	out := new(ValidatorBalances)
	err := c.cc.Invoke(ctx, "/photon.consensus.Node/ListValidatorBalances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) ListValidators(ctx context.Context, in *ListValidatorsRequest, opts ...grpc.CallOption) (*Validators, error) {
	out := new(Validators)
	err := c.cc.Invoke(ctx, "/photon.consensus.Node/ListValidators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetValidator(ctx context.Context, in *GetValidatorRequest, opts ...grpc.CallOption) (*Validator, error) {
	out := new(Validator)
	err := c.cc.Invoke(ctx, "/photon.consensus.Node/GetValidator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetValidatorActiveSetChanges(ctx context.Context, in *GetValidatorActiveSetChangesRequest, opts ...grpc.CallOption) (*ActiveSetChanges, error) {
	out := new(ActiveSetChanges)
	err := c.cc.Invoke(ctx, "/photon.consensus.Node/GetValidatorActiveSetChanges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetValidatorQueue(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ValidatorQueue, error) {
	out := new(ValidatorQueue)
	err := c.cc.Invoke(ctx, "/photon.consensus.Node/GetValidatorQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetValidatorPerformance(ctx context.Context, in *ValidatorPerformanceRequest, opts ...grpc.CallOption) (*ValidatorPerformanceResponse, error) {
	out := new(ValidatorPerformanceResponse)
	err := c.cc.Invoke(ctx, "/photon.consensus.Node/GetValidatorPerformance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) ListValidatorAssignments(ctx context.Context, in *ListValidatorAssignmentsRequest, opts ...grpc.CallOption) (*ValidatorAssignments, error) {
	out := new(ValidatorAssignments)
	err := c.cc.Invoke(ctx, "/photon.consensus.Node/ListValidatorAssignments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetValidatorParticipation(ctx context.Context, in *GetValidatorParticipationRequest, opts ...grpc.CallOption) (*ValidatorParticipationResponse, error) {
	out := new(ValidatorParticipationResponse)
	err := c.cc.Invoke(ctx, "/photon.consensus.Node/GetValidatorParticipation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetChainConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ChainConfig, error) {
	out := new(ChainConfig)
	err := c.cc.Invoke(ctx, "/photon.consensus.Node/GetChainConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) StreamValidatorsInfo(ctx context.Context, opts ...grpc.CallOption) (Node_StreamValidatorsInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Node_serviceDesc.Streams[4], "/photon.consensus.Node/StreamValidatorsInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeStreamValidatorsInfoClient{stream}
	return x, nil
}

type Node_StreamValidatorsInfoClient interface {
	Send(*ValidatorChangeSet) error
	Recv() (*ValidatorInfo, error)
	grpc.ClientStream
}

type nodeStreamValidatorsInfoClient struct {
	grpc.ClientStream
}

func (x *nodeStreamValidatorsInfoClient) Send(m *ValidatorChangeSet) error {
	return x.ClientStream.SendMsg(m)
}

func (x *nodeStreamValidatorsInfoClient) Recv() (*ValidatorInfo, error) {
	m := new(ValidatorInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeClient) SubmitAttesterSlashing(ctx context.Context, in *AttesterSlashing, opts ...grpc.CallOption) (*SubmitSlashingResponse, error) {
	out := new(SubmitSlashingResponse)
	err := c.cc.Invoke(ctx, "/photon.consensus.Node/SubmitAttesterSlashing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) SubmitProposerSlashing(ctx context.Context, in *ProposerSlashing, opts ...grpc.CallOption) (*SubmitSlashingResponse, error) {
	out := new(SubmitSlashingResponse)
	err := c.cc.Invoke(ctx, "/photon.consensus.Node/SubmitProposerSlashing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetIndividualVotes(ctx context.Context, in *IndividualVotesRequest, opts ...grpc.CallOption) (*IndividualVotesRespond, error) {
	out := new(IndividualVotesRespond)
	err := c.cc.Invoke(ctx, "/photon.consensus.Node/GetIndividualVotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) SubmitTx(ctx context.Context, in *SignedTransaction, opts ...grpc.CallOption) (*SubmitTxResponse, error) {
	out := new(SubmitTxResponse)
	err := c.cc.Invoke(ctx, "/photon.consensus.Node/SubmitTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetStorageContract(ctx context.Context, in *GetStorageContractRequest, opts ...grpc.CallOption) (*GetStorageContractResponse, error) {
	out := new(GetStorageContractResponse)
	err := c.cc.Invoke(ctx, "/photon.consensus.Node/GetStorageContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetFinalizedEpoch(ctx context.Context, in *FinalizedEpochRequest, opts ...grpc.CallOption) (*FinalizedEpochResponse, error) {
	out := new(FinalizedEpochResponse)
	err := c.cc.Invoke(ctx, "/photon.consensus.Node/GetFinalizedEpoch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) StreamFinalizedEpoch(ctx context.Context, in *StreamFinalizedEpochRequest, opts ...grpc.CallOption) (Node_StreamFinalizedEpochClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Node_serviceDesc.Streams[5], "/photon.consensus.Node/StreamFinalizedEpoch", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeStreamFinalizedEpochClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Node_StreamFinalizedEpochClient interface {
	Recv() (*FinalizedEpochResponse, error)
	grpc.ClientStream
}

type nodeStreamFinalizedEpochClient struct {
	grpc.ClientStream
}

func (x *nodeStreamFinalizedEpochClient) Recv() (*FinalizedEpochResponse, error) {
	m := new(FinalizedEpochResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeClient) GetAccount(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, "/photon.consensus.Node/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetDuties(ctx context.Context, in *DutiesRequest, opts ...grpc.CallOption) (*DutiesResponse, error) {
	out := new(DutiesResponse)
	err := c.cc.Invoke(ctx, "/photon.consensus.Node/GetDuties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) StreamDuties(ctx context.Context, in *DutiesRequest, opts ...grpc.CallOption) (Node_StreamDutiesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Node_serviceDesc.Streams[6], "/photon.consensus.Node/StreamDuties", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeStreamDutiesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Node_StreamDutiesClient interface {
	Recv() (*DutiesResponse, error)
	grpc.ClientStream
}

type nodeStreamDutiesClient struct {
	grpc.ClientStream
}

func (x *nodeStreamDutiesClient) Recv() (*DutiesResponse, error) {
	m := new(DutiesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Deprecated: Do not use.
func (c *nodeClient) WaitForChainStart(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Node_WaitForChainStartClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Node_serviceDesc.Streams[7], "/photon.consensus.Node/WaitForChainStart", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeWaitForChainStartClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Node_WaitForChainStartClient interface {
	Recv() (*ChainStartResponse, error)
	grpc.ClientStream
}

type nodeWaitForChainStartClient struct {
	grpc.ClientStream
}

func (x *nodeWaitForChainStartClient) Recv() (*ChainStartResponse, error) {
	m := new(ChainStartResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeClient) WaitForActivation(ctx context.Context, in *ValidatorActivationRequest, opts ...grpc.CallOption) (Node_WaitForActivationClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Node_serviceDesc.Streams[8], "/photon.consensus.Node/WaitForActivation", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeWaitForActivationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Node_WaitForActivationClient interface {
	Recv() (*ValidatorActivationResponse, error)
	grpc.ClientStream
}

type nodeWaitForActivationClient struct {
	grpc.ClientStream
}

func (x *nodeWaitForActivationClient) Recv() (*ValidatorActivationResponse, error) {
	m := new(ValidatorActivationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeClient) ValidatorIndex(ctx context.Context, in *ValidatorIndexRequest, opts ...grpc.CallOption) (*ValidatorIndexResponse, error) {
	out := new(ValidatorIndexResponse)
	err := c.cc.Invoke(ctx, "/photon.consensus.Node/ValidatorIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) ValidatorStatus(ctx context.Context, in *ValidatorStatusRequest, opts ...grpc.CallOption) (*ValidatorStatusResponse, error) {
	out := new(ValidatorStatusResponse)
	err := c.cc.Invoke(ctx, "/photon.consensus.Node/ValidatorStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) MultipleValidatorStatus(ctx context.Context, in *MultipleValidatorStatusRequest, opts ...grpc.CallOption) (*MultipleValidatorStatusResponse, error) {
	out := new(MultipleValidatorStatusResponse)
	err := c.cc.Invoke(ctx, "/photon.consensus.Node/MultipleValidatorStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) AuditorStatus(ctx context.Context, in *AuditorStatusRequest, opts ...grpc.CallOption) (*AuditorStatusResponse, error) {
	out := new(AuditorStatusResponse)
	err := c.cc.Invoke(ctx, "/photon.consensus.Node/AuditorStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetBlock(ctx context.Context, in *BlockRequest, opts ...grpc.CallOption) (*Block, error) {
	out := new(Block)
	err := c.cc.Invoke(ctx, "/photon.consensus.Node/GetBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) ProposeBlock(ctx context.Context, in *SignedBlock, opts ...grpc.CallOption) (*ProposeResponse, error) {
	out := new(ProposeResponse)
	err := c.cc.Invoke(ctx, "/photon.consensus.Node/ProposeBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetAttestationData(ctx context.Context, in *AttestationDataRequest, opts ...grpc.CallOption) (*AttestationData, error) {
	out := new(AttestationData)
	err := c.cc.Invoke(ctx, "/photon.consensus.Node/GetAttestationData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) ProposeAttestation(ctx context.Context, in *Attestation, opts ...grpc.CallOption) (*AttestResponse, error) {
	out := new(AttestResponse)
	err := c.cc.Invoke(ctx, "/photon.consensus.Node/ProposeAttestation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) SubmitAggregateSelectionProof(ctx context.Context, in *AggregateSelectionRequest, opts ...grpc.CallOption) (*AggregateSelectionResponse, error) {
	out := new(AggregateSelectionResponse)
	err := c.cc.Invoke(ctx, "/photon.consensus.Node/SubmitAggregateSelectionProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) SubmitSignedAggregateSelectionProof(ctx context.Context, in *SignedAggregateSubmitRequest, opts ...grpc.CallOption) (*SignedAggregateSubmitResponse, error) {
	out := new(SignedAggregateSubmitResponse)
	err := c.cc.Invoke(ctx, "/photon.consensus.Node/SubmitSignedAggregateSelectionProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) SubscribeCommitteeSubnets(ctx context.Context, in *CommitteeSubnetsSubscribeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/photon.consensus.Node/SubscribeCommitteeSubnets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) CheckDoppelGanger(ctx context.Context, in *DoppelGangerRequest, opts ...grpc.CallOption) (*DoppelGangerResponse, error) {
	out := new(DoppelGangerResponse)
	err := c.cc.Invoke(ctx, "/photon.consensus.Node/CheckDoppelGanger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeServer is the server API for Node service.
type NodeServer interface {
	// Retrieve attestations by block root, slot, or epoch.
	//
	// The server may return an empty list when no attestations match the given
	// filter criteria. This RPC should not return NOT_FOUND. Only one filter
	// criteria should be used. This endpoint allows for retrieval of genesis
	// information via a boolean query filter.
	ListAttestations(context.Context, *ListAttestationsRequest) (*ListAttestationsResponse, error)
	// Retrieve indexed attestations by block root, slot, or epoch.
	//
	// The server may return an empty list when no indexed attestations match the given
	// filter criteria. This RPC should not return NOT_FOUND. Only one filter
	// criteria should be used. This endpoint allows for retrieval of genesis
	// information via a boolean query filter.
	ListIndexedAttestations(context.Context, *ListIndexedAttestationsRequest) (*ListIndexedAttestationsResponse, error)
	// Server-side stream of attestations as they are received by the chain node.
	StreamAttestations(*emptypb.Empty, Node_StreamAttestationsServer) error
	// Server-side stream of indexed attestations as they are received by the chain node.
	StreamIndexedAttestations(*emptypb.Empty, Node_StreamIndexedAttestationsServer) error
	// Retrieve attestations from pool.
	//
	// The server returns a list of attestations that have been seen but not
	// yet processed. Pool attestations eventually expire as the slot
	// advances, so an attestation missing from this request does not imply
	// that it was included in a block. The attestation may have expired.
	// Refer to the Ethereum Beacon Chain specification for more details on how
	// attestations are processed and when they are no longer valid.
	// https://github.com/ethereum/consensus-specs/blob/dev/specs/core/0_beacon-chain.md#attestations
	AttestationPool(context.Context, *AttestationPoolRequest) (*AttestationPoolResponse, error)
	// Retrieve blocks by root, slot, or epoch.
	//
	// The server may return multiple blocks in the case that a slot or epoch is
	// provided as the filter criteria. The server may return an empty list when
	// no blocks in their database match the filter criteria. This RPC should
	// not return NOT_FOUND. Only one filter criteria should be used. This endpoint
	// allows for retrieval of genesis information via a boolean query filter.
	ListBlocks(context.Context, *ListBlocksRequest) (*ListBlocksResponse, error)
	// Server-side stream of all signed blocks as they are received by the chain node.
	StreamBlocks(*StreamBlocksRequest, Node_StreamBlocksServer) error
	// Server-side stream of information about the head of the chain from the view of
	// the chain node.
	//
	// This includes the head block slot and root as well as information about
	// the most recent finalized and justified slots.
	StreamChainHead(*emptypb.Empty, Node_StreamChainHeadServer) error
	// Retrieve information about the head of the chain from the view of the chain node.
	//
	// This includes the head block slot and root as well as information about
	// the most recent finalized and justified slots.
	GetChainHead(context.Context, *emptypb.Empty) (*ChainHead, error)
	// Retrieve information about the weak subjectivity of the chain from the view of
	// the chain node.
	//
	// This includes the weak subjectivity block root, state root and epoch number.
	GetWeakSubjectivityCheckpoint(context.Context, *emptypb.Empty) (*WeakSubjectivityCheckpoint, error)
	// Retrieve the chain committees for a given epoch.
	//
	// If no filter criteria is specified, the response returns all committees for
	// the current epoch. The results are paginated by default.
	// This endpoint allows for retrieval of genesis information via a boolean query filter.
	ListCommittees(context.Context, *ListCommitteesRequest) (*Committees, error)
	// Retrieve validator balances for a given set of public keys at a specific
	// epoch in time. This endpoint allows for retrieval of genesis information
	// via a boolean query filter.
	ListValidatorBalances(context.Context, *ListValidatorBalancesRequest) (*ValidatorBalances, error)
	// Retrieve the current validator registry.
	//
	// The request may include an optional historical epoch to retrieve a
	// specific validator set in time. This endpoint allows for retrieval of genesis
	// information via a boolean query filter.
	ListValidators(context.Context, *ListValidatorsRequest) (*Validators, error)
	// Retrieve information about a specific validator in the registry.
	//
	// This request may query by validator index or public key.
	GetValidator(context.Context, *GetValidatorRequest) (*Validator, error)
	// Retrieve the active set changes for a given epoch.
	//
	// This data includes any activations, voluntary exits, and involuntary
	// ejections. This endpoint allows for retrieval of genesis
	// information via a boolean query filter.
	GetValidatorActiveSetChanges(context.Context, *GetValidatorActiveSetChangesRequest) (*ActiveSetChanges, error)
	// Retrieve the current validator queue information.
	GetValidatorQueue(context.Context, *emptypb.Empty) (*ValidatorQueue, error)
	// GetValidatorPerformance reports a validator's latest balance along with other important
	// metrics on rewards and penalties throughout its lifecycle in the chain.
	// The request takes in a list of validator public keys and returns a performance report
	// for all of them respectively.
	GetValidatorPerformance(context.Context, *ValidatorPerformanceRequest) (*ValidatorPerformanceResponse, error)
	// Retrieve the validator assignments for a given epoch.
	//
	// This request may specify optional validator indices or public keys to
	// filter validator assignments. This endpoint allows for retrieval of genesis
	// information via a boolean query filter.
	ListValidatorAssignments(context.Context, *ListValidatorAssignmentsRequest) (*ValidatorAssignments, error)
	// Retrieve the validator participation information for a given epoch.
	//
	// This method returns information about the global participation of
	// validator attestations. This endpoint allows for retrieval of genesis
	// information via a boolean query filter.
	GetValidatorParticipation(context.Context, *GetValidatorParticipationRequest) (*ValidatorParticipationResponse, error)
	// Retrieve the current configuration parameters of the chain.
	GetChainConfig(context.Context, *emptypb.Empty) (*ChainConfig, error)
	// Server-side stream of validator information at each epoch.
	StreamValidatorsInfo(Node_StreamValidatorsInfoServer) error
	// Submit an attester slashing object to the node.
	SubmitAttesterSlashing(context.Context, *AttesterSlashing) (*SubmitSlashingResponse, error)
	// Submit a proposer slashing object to the node.
	SubmitProposerSlashing(context.Context, *ProposerSlashing) (*SubmitSlashingResponse, error)
	// Returns a list of validators individual vote status of a given epoch.
	GetIndividualVotes(context.Context, *IndividualVotesRequest) (*IndividualVotesRespond, error)
	// Submit a transaction to the node.
	SubmitTx(context.Context, *SignedTransaction) (*SubmitTxResponse, error)
	// Retrieve a storage contract for a given request.
	GetStorageContract(context.Context, *GetStorageContractRequest) (*GetStorageContractResponse, error)
	// Returns data of a finalized epoch.
	GetFinalizedEpoch(context.Context, *FinalizedEpochRequest) (*FinalizedEpochResponse, error)
	// Server-side stream of finalized epoch updates.
	StreamFinalizedEpoch(*StreamFinalizedEpochRequest, Node_StreamFinalizedEpochServer) error
	// Request account info from the node
	GetAccount(context.Context, *AccountRequest) (*Account, error)
	// Retrieves validator duties for the requested validators.
	//
	// The duties consist of:
	//   Proposer - the validator that creates a chain block.
	//   Attester — a validator that is part of a committee that needs to sign off
	//      on a chain block while simultaneously creating a cross link to a recent
	//      shard block on a particular shard chain.
	// The server returns a list of duties which are the actions should be performed
	// by validators for a given epoch. Validator duties should be polled every epoch,
	// but due to chain reorg of >MIN_SEED_LOOKAHEAD could occur, the validator duties
	// could chain. For complete safety, it is recommended to poll at every slot to ensure
	// validator is fully aware of any sudden chain reorg.
	GetDuties(context.Context, *DutiesRequest) (*DutiesResponse, error)
	// Stream validator duties for the requested validators.
	//
	// The duties consist of:
	//   Proposer - the validator that creates a chain block.
	//   Attester — a validator that is part of a committee that needs to sign off on a chain
	StreamDuties(*DutiesRequest, Node_StreamDutiesServer) error
	// Deprecated: Do not use.
	// WaitForChainStart queries the logs of the Validator Deposit Contract on the Ethereum
	// proof-of-work chain to verify the chain has started its runtime and
	// validators are ready to begin their responsibilities.
	//
	// If the chain has not yet started, this endpoint starts a server-side stream which updates
	// the client when the chain is ready.
	WaitForChainStart(*emptypb.Empty, Node_WaitForChainStartServer) error
	// WaitForActivation checks if a validator public key exists in the active validator
	// registry of the current state. If the validator is NOT yet active, it starts a
	// server-side stream which updates the client whenever the validator becomes active in
	// the node's state.
	//
	// The input to this endpoint is a list of validator public keys, and the corresponding
	// stream will respond until at least a single corresponding validator to those
	// keys is activated.
	WaitForActivation(*ValidatorActivationRequest, Node_WaitForActivationServer) error
	// ValidatorIndex retrieves a validator's index location in the state's
	// validator registry looking up whether the validator exists based on its
	// public key. This method returns NOT_FOUND if no index is found for the public key
	// specified in the request.
	ValidatorIndex(context.Context, *ValidatorIndexRequest) (*ValidatorIndexResponse, error)
	// ValidatorStatus returns a validator's status based on the current epoch.
	//
	// The status response can be one of the following:
	//	UNKNOWN_VALIDATOR_STATUS - validator does not have a known status in
	//                             the network.
	//	VALIDATOR_PENDING - validator is in activation queue.
	//	VALIDATOR_ACTIVE - validator is active.
	//	VALIDATOR_EXITING - validator has initiated an an exit request, or has
	//                      dropped below the ejection balance and is being
	//                      kicked out.
	//	VALIDATOR_EXITED - validator is no longer validating.
	//	VALIDATOR_SLASHING - validator has been kicked out due to meeting a
	//                       slashing condition.
	ValidatorStatus(context.Context, *ValidatorStatusRequest) (*ValidatorStatusResponse, error)
	// MultipleValidatorStatus returns a list of validator statuses on the current epoch.
	// The request can specify a list of validator public keys.
	//
	// Returns a list of ValidatorStatusResponses.
	MultipleValidatorStatus(context.Context, *MultipleValidatorStatusRequest) (*MultipleValidatorStatusResponse, error)
	// AuditorStatus returns a auditor's status based on the current epoch.
	//
	// The status response can be one of the following:
	//	UNKNOWN_AUDITOR_STATUS - auditor does not have a known status in
	//                           the network.
	//	AUDITOR_PENDING - auditor is in activation queue.
	//	AUDITOR_ACTIVE - auditor is active.
	//	AUDITOR_EXITING - auditor has initiated an an exit request, or has
	//                    dropped below the ejection balance and is being
	//                    kicked out.
	//	AUDITOR_EXITED - auditor is no longer serving.
	AuditorStatus(context.Context, *AuditorStatusRequest) (*AuditorStatusResponse, error)
	// Retrieves the latest valid block to be proposed on the chain.
	//
	// The server returns a new block, without proposer signature, that can be
	// proposed on the chain. The block should be filled with all the necessary
	// data for proposer to sign.
	GetBlock(context.Context, *BlockRequest) (*Block, error)
	// Sends the newly signed block to node.
	//
	// The validator sends the newly signed block to the node so the block can
	// be included in the chain. The node is expected to validate and process the
	// block into its state.
	ProposeBlock(context.Context, *SignedBlock) (*ProposeResponse, error)
	// Retrieves the latest valid attestation data to be attested on the chain.
	//
	// The server returns the latest valid data which represents the correct vote
	// for the head of the chain.
	GetAttestationData(context.Context, *AttestationDataRequest) (*AttestationData, error)
	// Sends the newly signed attestation to node.
	//
	// The validator sends the newly signed attestation to the node for the attestation to
	// be included in the chain. The node is expected to validate and publish attestation on
	// appropriate committee subnet.
	ProposeAttestation(context.Context, *Attestation) (*AttestResponse, error)
	// Submit selection proof to the node to aggregate all matching wire attestations with the same data root.
	// the node responses with an aggregate and proof object back to validator to sign over.
	SubmitAggregateSelectionProof(context.Context, *AggregateSelectionRequest) (*AggregateSelectionResponse, error)
	// Submit a signed aggregate and proof object, the node will broadcast the
	// signed aggregated attestation and proof object.
	SubmitSignedAggregateSelectionProof(context.Context, *SignedAggregateSubmitRequest) (*SignedAggregateSubmitResponse, error)
	// Subscribe to particular committee ID subnets given validator's duty.
	//
	// The node is expected to subscribe to the committee ID subnet given by the request. With this,
	// node serving attesters can find persistent peers on the subnet to publish attestation,
	// and node serving aggregator can join the subnet.
	SubscribeCommitteeSubnets(context.Context, *CommitteeSubnetsSubscribeRequest) (*emptypb.Empty, error)
	// Checks the node if another instance of the provided validator keys have been
	// attesting/proposing for you.
	CheckDoppelGanger(context.Context, *DoppelGangerRequest) (*DoppelGangerResponse, error)
}

// UnimplementedNodeServer can be embedded to have forward compatible implementations.
type UnimplementedNodeServer struct {
}

func (*UnimplementedNodeServer) ListAttestations(context.Context, *ListAttestationsRequest) (*ListAttestationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAttestations not implemented")
}
func (*UnimplementedNodeServer) ListIndexedAttestations(context.Context, *ListIndexedAttestationsRequest) (*ListIndexedAttestationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIndexedAttestations not implemented")
}
func (*UnimplementedNodeServer) StreamAttestations(*emptypb.Empty, Node_StreamAttestationsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamAttestations not implemented")
}
func (*UnimplementedNodeServer) StreamIndexedAttestations(*emptypb.Empty, Node_StreamIndexedAttestationsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamIndexedAttestations not implemented")
}
func (*UnimplementedNodeServer) AttestationPool(context.Context, *AttestationPoolRequest) (*AttestationPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttestationPool not implemented")
}
func (*UnimplementedNodeServer) ListBlocks(context.Context, *ListBlocksRequest) (*ListBlocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBlocks not implemented")
}
func (*UnimplementedNodeServer) StreamBlocks(*StreamBlocksRequest, Node_StreamBlocksServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamBlocks not implemented")
}
func (*UnimplementedNodeServer) StreamChainHead(*emptypb.Empty, Node_StreamChainHeadServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamChainHead not implemented")
}
func (*UnimplementedNodeServer) GetChainHead(context.Context, *emptypb.Empty) (*ChainHead, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChainHead not implemented")
}
func (*UnimplementedNodeServer) GetWeakSubjectivityCheckpoint(context.Context, *emptypb.Empty) (*WeakSubjectivityCheckpoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWeakSubjectivityCheckpoint not implemented")
}
func (*UnimplementedNodeServer) ListCommittees(context.Context, *ListCommitteesRequest) (*Committees, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommittees not implemented")
}
func (*UnimplementedNodeServer) ListValidatorBalances(context.Context, *ListValidatorBalancesRequest) (*ValidatorBalances, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListValidatorBalances not implemented")
}
func (*UnimplementedNodeServer) ListValidators(context.Context, *ListValidatorsRequest) (*Validators, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListValidators not implemented")
}
func (*UnimplementedNodeServer) GetValidator(context.Context, *GetValidatorRequest) (*Validator, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidator not implemented")
}
func (*UnimplementedNodeServer) GetValidatorActiveSetChanges(context.Context, *GetValidatorActiveSetChangesRequest) (*ActiveSetChanges, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidatorActiveSetChanges not implemented")
}
func (*UnimplementedNodeServer) GetValidatorQueue(context.Context, *emptypb.Empty) (*ValidatorQueue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidatorQueue not implemented")
}
func (*UnimplementedNodeServer) GetValidatorPerformance(context.Context, *ValidatorPerformanceRequest) (*ValidatorPerformanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidatorPerformance not implemented")
}
func (*UnimplementedNodeServer) ListValidatorAssignments(context.Context, *ListValidatorAssignmentsRequest) (*ValidatorAssignments, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListValidatorAssignments not implemented")
}
func (*UnimplementedNodeServer) GetValidatorParticipation(context.Context, *GetValidatorParticipationRequest) (*ValidatorParticipationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidatorParticipation not implemented")
}
func (*UnimplementedNodeServer) GetChainConfig(context.Context, *emptypb.Empty) (*ChainConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChainConfig not implemented")
}
func (*UnimplementedNodeServer) StreamValidatorsInfo(Node_StreamValidatorsInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamValidatorsInfo not implemented")
}
func (*UnimplementedNodeServer) SubmitAttesterSlashing(context.Context, *AttesterSlashing) (*SubmitSlashingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitAttesterSlashing not implemented")
}
func (*UnimplementedNodeServer) SubmitProposerSlashing(context.Context, *ProposerSlashing) (*SubmitSlashingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitProposerSlashing not implemented")
}
func (*UnimplementedNodeServer) GetIndividualVotes(context.Context, *IndividualVotesRequest) (*IndividualVotesRespond, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIndividualVotes not implemented")
}
func (*UnimplementedNodeServer) SubmitTx(context.Context, *SignedTransaction) (*SubmitTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitTx not implemented")
}
func (*UnimplementedNodeServer) GetStorageContract(context.Context, *GetStorageContractRequest) (*GetStorageContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStorageContract not implemented")
}
func (*UnimplementedNodeServer) GetFinalizedEpoch(context.Context, *FinalizedEpochRequest) (*FinalizedEpochResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFinalizedEpoch not implemented")
}
func (*UnimplementedNodeServer) StreamFinalizedEpoch(*StreamFinalizedEpochRequest, Node_StreamFinalizedEpochServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamFinalizedEpoch not implemented")
}
func (*UnimplementedNodeServer) GetAccount(context.Context, *AccountRequest) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (*UnimplementedNodeServer) GetDuties(context.Context, *DutiesRequest) (*DutiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDuties not implemented")
}
func (*UnimplementedNodeServer) StreamDuties(*DutiesRequest, Node_StreamDutiesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamDuties not implemented")
}
func (*UnimplementedNodeServer) WaitForChainStart(*emptypb.Empty, Node_WaitForChainStartServer) error {
	return status.Errorf(codes.Unimplemented, "method WaitForChainStart not implemented")
}
func (*UnimplementedNodeServer) WaitForActivation(*ValidatorActivationRequest, Node_WaitForActivationServer) error {
	return status.Errorf(codes.Unimplemented, "method WaitForActivation not implemented")
}
func (*UnimplementedNodeServer) ValidatorIndex(context.Context, *ValidatorIndexRequest) (*ValidatorIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatorIndex not implemented")
}
func (*UnimplementedNodeServer) ValidatorStatus(context.Context, *ValidatorStatusRequest) (*ValidatorStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatorStatus not implemented")
}
func (*UnimplementedNodeServer) MultipleValidatorStatus(context.Context, *MultipleValidatorStatusRequest) (*MultipleValidatorStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultipleValidatorStatus not implemented")
}
func (*UnimplementedNodeServer) AuditorStatus(context.Context, *AuditorStatusRequest) (*AuditorStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuditorStatus not implemented")
}
func (*UnimplementedNodeServer) GetBlock(context.Context, *BlockRequest) (*Block, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlock not implemented")
}
func (*UnimplementedNodeServer) ProposeBlock(context.Context, *SignedBlock) (*ProposeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposeBlock not implemented")
}
func (*UnimplementedNodeServer) GetAttestationData(context.Context, *AttestationDataRequest) (*AttestationData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttestationData not implemented")
}
func (*UnimplementedNodeServer) ProposeAttestation(context.Context, *Attestation) (*AttestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposeAttestation not implemented")
}
func (*UnimplementedNodeServer) SubmitAggregateSelectionProof(context.Context, *AggregateSelectionRequest) (*AggregateSelectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitAggregateSelectionProof not implemented")
}
func (*UnimplementedNodeServer) SubmitSignedAggregateSelectionProof(context.Context, *SignedAggregateSubmitRequest) (*SignedAggregateSubmitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitSignedAggregateSelectionProof not implemented")
}
func (*UnimplementedNodeServer) SubscribeCommitteeSubnets(context.Context, *CommitteeSubnetsSubscribeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeCommitteeSubnets not implemented")
}
func (*UnimplementedNodeServer) CheckDoppelGanger(context.Context, *DoppelGangerRequest) (*DoppelGangerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckDoppelGanger not implemented")
}

func RegisterNodeServer(s *grpc.Server, srv NodeServer) {
	s.RegisterService(&_Node_serviceDesc, srv)
}

func _Node_ListAttestations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAttestationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).ListAttestations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photon.consensus.Node/ListAttestations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).ListAttestations(ctx, req.(*ListAttestationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_ListIndexedAttestations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIndexedAttestationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).ListIndexedAttestations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photon.consensus.Node/ListIndexedAttestations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).ListIndexedAttestations(ctx, req.(*ListIndexedAttestationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_StreamAttestations_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeServer).StreamAttestations(m, &nodeStreamAttestationsServer{stream})
}

type Node_StreamAttestationsServer interface {
	Send(*Attestation) error
	grpc.ServerStream
}

type nodeStreamAttestationsServer struct {
	grpc.ServerStream
}

func (x *nodeStreamAttestationsServer) Send(m *Attestation) error {
	return x.ServerStream.SendMsg(m)
}

func _Node_StreamIndexedAttestations_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeServer).StreamIndexedAttestations(m, &nodeStreamIndexedAttestationsServer{stream})
}

type Node_StreamIndexedAttestationsServer interface {
	Send(*IndexedAttestation) error
	grpc.ServerStream
}

type nodeStreamIndexedAttestationsServer struct {
	grpc.ServerStream
}

func (x *nodeStreamIndexedAttestationsServer) Send(m *IndexedAttestation) error {
	return x.ServerStream.SendMsg(m)
}

func _Node_AttestationPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttestationPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).AttestationPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photon.consensus.Node/AttestationPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).AttestationPool(ctx, req.(*AttestationPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_ListBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBlocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).ListBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photon.consensus.Node/ListBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).ListBlocks(ctx, req.(*ListBlocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_StreamBlocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamBlocksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeServer).StreamBlocks(m, &nodeStreamBlocksServer{stream})
}

type Node_StreamBlocksServer interface {
	Send(*SignedBlock) error
	grpc.ServerStream
}

type nodeStreamBlocksServer struct {
	grpc.ServerStream
}

func (x *nodeStreamBlocksServer) Send(m *SignedBlock) error {
	return x.ServerStream.SendMsg(m)
}

func _Node_StreamChainHead_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeServer).StreamChainHead(m, &nodeStreamChainHeadServer{stream})
}

type Node_StreamChainHeadServer interface {
	Send(*ChainHead) error
	grpc.ServerStream
}

type nodeStreamChainHeadServer struct {
	grpc.ServerStream
}

func (x *nodeStreamChainHeadServer) Send(m *ChainHead) error {
	return x.ServerStream.SendMsg(m)
}

func _Node_GetChainHead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetChainHead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photon.consensus.Node/GetChainHead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetChainHead(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetWeakSubjectivityCheckpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetWeakSubjectivityCheckpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photon.consensus.Node/GetWeakSubjectivityCheckpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetWeakSubjectivityCheckpoint(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_ListCommittees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommitteesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).ListCommittees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photon.consensus.Node/ListCommittees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).ListCommittees(ctx, req.(*ListCommitteesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_ListValidatorBalances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListValidatorBalancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).ListValidatorBalances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photon.consensus.Node/ListValidatorBalances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).ListValidatorBalances(ctx, req.(*ListValidatorBalancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_ListValidators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListValidatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).ListValidators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photon.consensus.Node/ListValidators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).ListValidators(ctx, req.(*ListValidatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetValidator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetValidatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetValidator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photon.consensus.Node/GetValidator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetValidator(ctx, req.(*GetValidatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetValidatorActiveSetChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetValidatorActiveSetChangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetValidatorActiveSetChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photon.consensus.Node/GetValidatorActiveSetChanges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetValidatorActiveSetChanges(ctx, req.(*GetValidatorActiveSetChangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetValidatorQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetValidatorQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photon.consensus.Node/GetValidatorQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetValidatorQueue(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetValidatorPerformance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidatorPerformanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetValidatorPerformance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photon.consensus.Node/GetValidatorPerformance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetValidatorPerformance(ctx, req.(*ValidatorPerformanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_ListValidatorAssignments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListValidatorAssignmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).ListValidatorAssignments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photon.consensus.Node/ListValidatorAssignments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).ListValidatorAssignments(ctx, req.(*ListValidatorAssignmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetValidatorParticipation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetValidatorParticipationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetValidatorParticipation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photon.consensus.Node/GetValidatorParticipation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetValidatorParticipation(ctx, req.(*GetValidatorParticipationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetChainConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetChainConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photon.consensus.Node/GetChainConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetChainConfig(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_StreamValidatorsInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NodeServer).StreamValidatorsInfo(&nodeStreamValidatorsInfoServer{stream})
}

type Node_StreamValidatorsInfoServer interface {
	Send(*ValidatorInfo) error
	Recv() (*ValidatorChangeSet, error)
	grpc.ServerStream
}

type nodeStreamValidatorsInfoServer struct {
	grpc.ServerStream
}

func (x *nodeStreamValidatorsInfoServer) Send(m *ValidatorInfo) error {
	return x.ServerStream.SendMsg(m)
}

func (x *nodeStreamValidatorsInfoServer) Recv() (*ValidatorChangeSet, error) {
	m := new(ValidatorChangeSet)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Node_SubmitAttesterSlashing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttesterSlashing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).SubmitAttesterSlashing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photon.consensus.Node/SubmitAttesterSlashing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).SubmitAttesterSlashing(ctx, req.(*AttesterSlashing))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_SubmitProposerSlashing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProposerSlashing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).SubmitProposerSlashing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photon.consensus.Node/SubmitProposerSlashing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).SubmitProposerSlashing(ctx, req.(*ProposerSlashing))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetIndividualVotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndividualVotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetIndividualVotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photon.consensus.Node/GetIndividualVotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetIndividualVotes(ctx, req.(*IndividualVotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_SubmitTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedTransaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).SubmitTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photon.consensus.Node/SubmitTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).SubmitTx(ctx, req.(*SignedTransaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetStorageContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStorageContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetStorageContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photon.consensus.Node/GetStorageContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetStorageContract(ctx, req.(*GetStorageContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetFinalizedEpoch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinalizedEpochRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetFinalizedEpoch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photon.consensus.Node/GetFinalizedEpoch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetFinalizedEpoch(ctx, req.(*FinalizedEpochRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_StreamFinalizedEpoch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamFinalizedEpochRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeServer).StreamFinalizedEpoch(m, &nodeStreamFinalizedEpochServer{stream})
}

type Node_StreamFinalizedEpochServer interface {
	Send(*FinalizedEpochResponse) error
	grpc.ServerStream
}

type nodeStreamFinalizedEpochServer struct {
	grpc.ServerStream
}

func (x *nodeStreamFinalizedEpochServer) Send(m *FinalizedEpochResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Node_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photon.consensus.Node/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetAccount(ctx, req.(*AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetDuties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DutiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetDuties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photon.consensus.Node/GetDuties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetDuties(ctx, req.(*DutiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_StreamDuties_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DutiesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeServer).StreamDuties(m, &nodeStreamDutiesServer{stream})
}

type Node_StreamDutiesServer interface {
	Send(*DutiesResponse) error
	grpc.ServerStream
}

type nodeStreamDutiesServer struct {
	grpc.ServerStream
}

func (x *nodeStreamDutiesServer) Send(m *DutiesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Node_WaitForChainStart_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeServer).WaitForChainStart(m, &nodeWaitForChainStartServer{stream})
}

type Node_WaitForChainStartServer interface {
	Send(*ChainStartResponse) error
	grpc.ServerStream
}

type nodeWaitForChainStartServer struct {
	grpc.ServerStream
}

func (x *nodeWaitForChainStartServer) Send(m *ChainStartResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Node_WaitForActivation_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ValidatorActivationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeServer).WaitForActivation(m, &nodeWaitForActivationServer{stream})
}

type Node_WaitForActivationServer interface {
	Send(*ValidatorActivationResponse) error
	grpc.ServerStream
}

type nodeWaitForActivationServer struct {
	grpc.ServerStream
}

func (x *nodeWaitForActivationServer) Send(m *ValidatorActivationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Node_ValidatorIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidatorIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).ValidatorIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photon.consensus.Node/ValidatorIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).ValidatorIndex(ctx, req.(*ValidatorIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_ValidatorStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidatorStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).ValidatorStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photon.consensus.Node/ValidatorStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).ValidatorStatus(ctx, req.(*ValidatorStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_MultipleValidatorStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultipleValidatorStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).MultipleValidatorStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photon.consensus.Node/MultipleValidatorStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).MultipleValidatorStatus(ctx, req.(*MultipleValidatorStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_AuditorStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuditorStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).AuditorStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photon.consensus.Node/AuditorStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).AuditorStatus(ctx, req.(*AuditorStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photon.consensus.Node/GetBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetBlock(ctx, req.(*BlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_ProposeBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).ProposeBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photon.consensus.Node/ProposeBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).ProposeBlock(ctx, req.(*SignedBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetAttestationData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttestationDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetAttestationData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photon.consensus.Node/GetAttestationData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetAttestationData(ctx, req.(*AttestationDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_ProposeAttestation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Attestation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).ProposeAttestation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photon.consensus.Node/ProposeAttestation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).ProposeAttestation(ctx, req.(*Attestation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_SubmitAggregateSelectionProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggregateSelectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).SubmitAggregateSelectionProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photon.consensus.Node/SubmitAggregateSelectionProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).SubmitAggregateSelectionProof(ctx, req.(*AggregateSelectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_SubmitSignedAggregateSelectionProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedAggregateSubmitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).SubmitSignedAggregateSelectionProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photon.consensus.Node/SubmitSignedAggregateSelectionProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).SubmitSignedAggregateSelectionProof(ctx, req.(*SignedAggregateSubmitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_SubscribeCommitteeSubnets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitteeSubnetsSubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).SubscribeCommitteeSubnets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photon.consensus.Node/SubscribeCommitteeSubnets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).SubscribeCommitteeSubnets(ctx, req.(*CommitteeSubnetsSubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_CheckDoppelGanger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoppelGangerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).CheckDoppelGanger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photon.consensus.Node/CheckDoppelGanger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).CheckDoppelGanger(ctx, req.(*DoppelGangerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Node_serviceDesc = grpc.ServiceDesc{
	ServiceName: "photon.consensus.Node",
	HandlerType: (*NodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAttestations",
			Handler:    _Node_ListAttestations_Handler,
		},
		{
			MethodName: "ListIndexedAttestations",
			Handler:    _Node_ListIndexedAttestations_Handler,
		},
		{
			MethodName: "AttestationPool",
			Handler:    _Node_AttestationPool_Handler,
		},
		{
			MethodName: "ListBlocks",
			Handler:    _Node_ListBlocks_Handler,
		},
		{
			MethodName: "GetChainHead",
			Handler:    _Node_GetChainHead_Handler,
		},
		{
			MethodName: "GetWeakSubjectivityCheckpoint",
			Handler:    _Node_GetWeakSubjectivityCheckpoint_Handler,
		},
		{
			MethodName: "ListCommittees",
			Handler:    _Node_ListCommittees_Handler,
		},
		{
			MethodName: "ListValidatorBalances",
			Handler:    _Node_ListValidatorBalances_Handler,
		},
		{
			MethodName: "ListValidators",
			Handler:    _Node_ListValidators_Handler,
		},
		{
			MethodName: "GetValidator",
			Handler:    _Node_GetValidator_Handler,
		},
		{
			MethodName: "GetValidatorActiveSetChanges",
			Handler:    _Node_GetValidatorActiveSetChanges_Handler,
		},
		{
			MethodName: "GetValidatorQueue",
			Handler:    _Node_GetValidatorQueue_Handler,
		},
		{
			MethodName: "GetValidatorPerformance",
			Handler:    _Node_GetValidatorPerformance_Handler,
		},
		{
			MethodName: "ListValidatorAssignments",
			Handler:    _Node_ListValidatorAssignments_Handler,
		},
		{
			MethodName: "GetValidatorParticipation",
			Handler:    _Node_GetValidatorParticipation_Handler,
		},
		{
			MethodName: "GetChainConfig",
			Handler:    _Node_GetChainConfig_Handler,
		},
		{
			MethodName: "SubmitAttesterSlashing",
			Handler:    _Node_SubmitAttesterSlashing_Handler,
		},
		{
			MethodName: "SubmitProposerSlashing",
			Handler:    _Node_SubmitProposerSlashing_Handler,
		},
		{
			MethodName: "GetIndividualVotes",
			Handler:    _Node_GetIndividualVotes_Handler,
		},
		{
			MethodName: "SubmitTx",
			Handler:    _Node_SubmitTx_Handler,
		},
		{
			MethodName: "GetStorageContract",
			Handler:    _Node_GetStorageContract_Handler,
		},
		{
			MethodName: "GetFinalizedEpoch",
			Handler:    _Node_GetFinalizedEpoch_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _Node_GetAccount_Handler,
		},
		{
			MethodName: "GetDuties",
			Handler:    _Node_GetDuties_Handler,
		},
		{
			MethodName: "ValidatorIndex",
			Handler:    _Node_ValidatorIndex_Handler,
		},
		{
			MethodName: "ValidatorStatus",
			Handler:    _Node_ValidatorStatus_Handler,
		},
		{
			MethodName: "MultipleValidatorStatus",
			Handler:    _Node_MultipleValidatorStatus_Handler,
		},
		{
			MethodName: "AuditorStatus",
			Handler:    _Node_AuditorStatus_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _Node_GetBlock_Handler,
		},
		{
			MethodName: "ProposeBlock",
			Handler:    _Node_ProposeBlock_Handler,
		},
		{
			MethodName: "GetAttestationData",
			Handler:    _Node_GetAttestationData_Handler,
		},
		{
			MethodName: "ProposeAttestation",
			Handler:    _Node_ProposeAttestation_Handler,
		},
		{
			MethodName: "SubmitAggregateSelectionProof",
			Handler:    _Node_SubmitAggregateSelectionProof_Handler,
		},
		{
			MethodName: "SubmitSignedAggregateSelectionProof",
			Handler:    _Node_SubmitSignedAggregateSelectionProof_Handler,
		},
		{
			MethodName: "SubscribeCommitteeSubnets",
			Handler:    _Node_SubscribeCommitteeSubnets_Handler,
		},
		{
			MethodName: "CheckDoppelGanger",
			Handler:    _Node_CheckDoppelGanger_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamAttestations",
			Handler:       _Node_StreamAttestations_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamIndexedAttestations",
			Handler:       _Node_StreamIndexedAttestations_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamBlocks",
			Handler:       _Node_StreamBlocks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamChainHead",
			Handler:       _Node_StreamChainHead_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamValidatorsInfo",
			Handler:       _Node_StreamValidatorsInfo_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamFinalizedEpoch",
			Handler:       _Node_StreamFinalizedEpoch_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamDuties",
			Handler:       _Node_StreamDuties_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WaitForChainStart",
			Handler:       _Node_WaitForChainStart_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WaitForActivation",
			Handler:       _Node_WaitForActivation_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "consensus/node.proto",
}

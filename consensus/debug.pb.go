// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: consensus/debug.proto

package pbc

import (
	context "context"
	reflect "reflect"
	sync "sync"

	_ "github.com/photon-storage/photon-proto/ext"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LoggingLevelRequest_Level int32

const (
	LoggingLevelRequest_INFO  LoggingLevelRequest_Level = 0
	LoggingLevelRequest_DEBUG LoggingLevelRequest_Level = 1
	LoggingLevelRequest_TRACE LoggingLevelRequest_Level = 2
)

// Enum value maps for LoggingLevelRequest_Level.
var (
	LoggingLevelRequest_Level_name = map[int32]string{
		0: "INFO",
		1: "DEBUG",
		2: "TRACE",
	}
	LoggingLevelRequest_Level_value = map[string]int32{
		"INFO":  0,
		"DEBUG": 1,
		"TRACE": 2,
	}
)

func (x LoggingLevelRequest_Level) Enum() *LoggingLevelRequest_Level {
	p := new(LoggingLevelRequest_Level)
	*p = x
	return p
}

func (x LoggingLevelRequest_Level) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoggingLevelRequest_Level) Descriptor() protoreflect.EnumDescriptor {
	return file_consensus_debug_proto_enumTypes[0].Descriptor()
}

func (LoggingLevelRequest_Level) Type() protoreflect.EnumType {
	return &file_consensus_debug_proto_enumTypes[0]
}

func (x LoggingLevelRequest_Level) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoggingLevelRequest_Level.Descriptor instead.
func (LoggingLevelRequest_Level) EnumDescriptor() ([]byte, []int) {
	return file_consensus_debug_proto_rawDescGZIP(), []int{4, 0}
}

type InclusionSlotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Slot Slot   `protobuf:"varint,2,opt,name=slot,proto3" json:"slot,omitempty" cast-type:"Slot"`
}

func (x *InclusionSlotRequest) Reset() {
	*x = InclusionSlotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_debug_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InclusionSlotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InclusionSlotRequest) ProtoMessage() {}

func (x *InclusionSlotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_debug_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InclusionSlotRequest.ProtoReflect.Descriptor instead.
func (*InclusionSlotRequest) Descriptor() ([]byte, []int) {
	return file_consensus_debug_proto_rawDescGZIP(), []int{0}
}

func (x *InclusionSlotRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *InclusionSlotRequest) GetSlot() Slot {
	if x != nil {
		return x.Slot
	}
	return Slot(0)
}

type InclusionSlotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slot Slot `protobuf:"varint,2,opt,name=slot,proto3" json:"slot,omitempty" cast-type:"Slot"`
}

func (x *InclusionSlotResponse) Reset() {
	*x = InclusionSlotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_debug_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InclusionSlotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InclusionSlotResponse) ProtoMessage() {}

func (x *InclusionSlotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_debug_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InclusionSlotResponse.ProtoReflect.Descriptor instead.
func (*InclusionSlotResponse) Descriptor() ([]byte, []int) {
	return file_consensus_debug_proto_rawDescGZIP(), []int{1}
}

func (x *InclusionSlotResponse) GetSlot() Slot {
	if x != nil {
		return x.Slot
	}
	return Slot(0)
}

type StateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to QueryFilter:
	//	*StateRequest_Slot
	//	*StateRequest_BlockRoot
	QueryFilter isStateRequest_QueryFilter `protobuf_oneof:"query_filter"`
}

func (x *StateRequest) Reset() {
	*x = StateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_debug_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateRequest) ProtoMessage() {}

func (x *StateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_debug_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateRequest.ProtoReflect.Descriptor instead.
func (*StateRequest) Descriptor() ([]byte, []int) {
	return file_consensus_debug_proto_rawDescGZIP(), []int{2}
}

func (m *StateRequest) GetQueryFilter() isStateRequest_QueryFilter {
	if m != nil {
		return m.QueryFilter
	}
	return nil
}

func (x *StateRequest) GetSlot() Slot {
	if x, ok := x.GetQueryFilter().(*StateRequest_Slot); ok {
		return x.Slot
	}
	return Slot(0)
}

func (x *StateRequest) GetBlockRoot() []byte {
	if x, ok := x.GetQueryFilter().(*StateRequest_BlockRoot); ok {
		return x.BlockRoot
	}
	return nil
}

type isStateRequest_QueryFilter interface {
	isStateRequest_QueryFilter()
}

type StateRequest_Slot struct {
	// The slot corresponding to a desired state.
	Slot Slot `protobuf:"varint,1,opt,name=slot,proto3,oneof" cast-type:"Slot"`
}

type StateRequest_BlockRoot struct {
	// The block root corresponding to a desired state.
	BlockRoot []byte `protobuf:"bytes,2,opt,name=block_root,json=blockRoot,proto3,oneof"`
}

func (*StateRequest_Slot) isStateRequest_QueryFilter() {}

func (*StateRequest_BlockRoot) isStateRequest_QueryFilter() {}

type BlockRequestByRoot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockRoot []byte `protobuf:"bytes,1,opt,name=block_root,json=blockRoot,proto3" json:"block_root,omitempty"`
}

func (x *BlockRequestByRoot) Reset() {
	*x = BlockRequestByRoot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_debug_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockRequestByRoot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockRequestByRoot) ProtoMessage() {}

func (x *BlockRequestByRoot) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_debug_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockRequestByRoot.ProtoReflect.Descriptor instead.
func (*BlockRequestByRoot) Descriptor() ([]byte, []int) {
	return file_consensus_debug_proto_rawDescGZIP(), []int{3}
}

func (x *BlockRequestByRoot) GetBlockRoot() []byte {
	if x != nil {
		return x.BlockRoot
	}
	return nil
}

type LoggingLevelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level LoggingLevelRequest_Level `protobuf:"varint,1,opt,name=level,proto3,enum=photon.consensus.LoggingLevelRequest_Level" json:"level,omitempty"`
}

func (x *LoggingLevelRequest) Reset() {
	*x = LoggingLevelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_debug_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoggingLevelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoggingLevelRequest) ProtoMessage() {}

func (x *LoggingLevelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_debug_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoggingLevelRequest.ProtoReflect.Descriptor instead.
func (*LoggingLevelRequest) Descriptor() ([]byte, []int) {
	return file_consensus_debug_proto_rawDescGZIP(), []int{4}
}

func (x *LoggingLevelRequest) GetLevel() LoggingLevelRequest_Level {
	if x != nil {
		return x.Level
	}
	return LoggingLevelRequest_INFO
}

type ProtoArrayForkChoiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The prune threshold of how many nodes allowed in proto array store.
	PruneThreshold uint64 `protobuf:"varint,1,opt,name=prune_threshold,json=pruneThreshold,proto3" json:"prune_threshold,omitempty"`
	// Latest justified epoch in proto array store.
	JustifiedEpoch Epoch `protobuf:"varint,2,opt,name=justified_epoch,json=justifiedEpoch,proto3" json:"justified_epoch,omitempty" cast-type:"Epoch"`
	// Latest finalized epoch in proto array store.
	FinalizedEpoch Epoch `protobuf:"varint,3,opt,name=finalized_epoch,json=finalizedEpoch,proto3" json:"finalized_epoch,omitempty" cast-type:"Epoch"`
	// The list of the proto array nodes in store.
	ProtoArrayNodes []*ProtoArrayNode `protobuf:"bytes,4,rep,name=proto_array_nodes,json=protoArrayNodes,proto3" json:"proto_array_nodes,omitempty"`
	// Root to indices mapping of the proto array nodes in store.
	Indices map[string]uint64 `protobuf:"bytes,5,rep,name=indices,proto3" json:"indices,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *ProtoArrayForkChoiceResponse) Reset() {
	*x = ProtoArrayForkChoiceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_debug_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoArrayForkChoiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoArrayForkChoiceResponse) ProtoMessage() {}

func (x *ProtoArrayForkChoiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_debug_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoArrayForkChoiceResponse.ProtoReflect.Descriptor instead.
func (*ProtoArrayForkChoiceResponse) Descriptor() ([]byte, []int) {
	return file_consensus_debug_proto_rawDescGZIP(), []int{5}
}

func (x *ProtoArrayForkChoiceResponse) GetPruneThreshold() uint64 {
	if x != nil {
		return x.PruneThreshold
	}
	return 0
}

func (x *ProtoArrayForkChoiceResponse) GetJustifiedEpoch() Epoch {
	if x != nil {
		return x.JustifiedEpoch
	}
	return Epoch(0)
}

func (x *ProtoArrayForkChoiceResponse) GetFinalizedEpoch() Epoch {
	if x != nil {
		return x.FinalizedEpoch
	}
	return Epoch(0)
}

func (x *ProtoArrayForkChoiceResponse) GetProtoArrayNodes() []*ProtoArrayNode {
	if x != nil {
		return x.ProtoArrayNodes
	}
	return nil
}

func (x *ProtoArrayForkChoiceResponse) GetIndices() map[string]uint64 {
	if x != nil {
		return x.Indices
	}
	return nil
}

type ProtoArrayNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Slot of the proto array node.
	Slot Slot `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty" cast-type:"Slot"`
	// Root of the proto array node.
	Root []byte `protobuf:"bytes,2,opt,name=root,proto3" json:"root,omitempty"`
	// Parent of the proto array node.
	Parent uint64 `protobuf:"varint,3,opt,name=parent,proto3" json:"parent,omitempty"`
	// Justified epoch of the current proto array node.
	JustifiedEpoch Epoch `protobuf:"varint,4,opt,name=justified_epoch,json=justifiedEpoch,proto3" json:"justified_epoch,omitempty" cast-type:"Epoch"`
	// finalized epoch of the current proto array node.
	FinalizedEpoch Epoch `protobuf:"varint,5,opt,name=finalized_epoch,json=finalizedEpoch,proto3" json:"finalized_epoch,omitempty" cast-type:"Epoch"`
	// Current weight of the current proto array node.
	Weight uint64 `protobuf:"varint,6,opt,name=weight,proto3" json:"weight,omitempty"`
	// Best child of the current proto array node.
	BestChild uint64 `protobuf:"varint,7,opt,name=best_child,json=bestChild,proto3" json:"best_child,omitempty"`
	// Best descendant of the proto array node.
	BestDescendant uint64 `protobuf:"varint,8,opt,name=best_descendant,json=bestDescendant,proto3" json:"best_descendant,omitempty"`
}

func (x *ProtoArrayNode) Reset() {
	*x = ProtoArrayNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_debug_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoArrayNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoArrayNode) ProtoMessage() {}

func (x *ProtoArrayNode) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_debug_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoArrayNode.ProtoReflect.Descriptor instead.
func (*ProtoArrayNode) Descriptor() ([]byte, []int) {
	return file_consensus_debug_proto_rawDescGZIP(), []int{6}
}

func (x *ProtoArrayNode) GetSlot() Slot {
	if x != nil {
		return x.Slot
	}
	return Slot(0)
}

func (x *ProtoArrayNode) GetRoot() []byte {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *ProtoArrayNode) GetParent() uint64 {
	if x != nil {
		return x.Parent
	}
	return 0
}

func (x *ProtoArrayNode) GetJustifiedEpoch() Epoch {
	if x != nil {
		return x.JustifiedEpoch
	}
	return Epoch(0)
}

func (x *ProtoArrayNode) GetFinalizedEpoch() Epoch {
	if x != nil {
		return x.FinalizedEpoch
	}
	return Epoch(0)
}

func (x *ProtoArrayNode) GetWeight() uint64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *ProtoArrayNode) GetBestChild() uint64 {
	if x != nil {
		return x.BestChild
	}
	return 0
}

func (x *ProtoArrayNode) GetBestDescendant() uint64 {
	if x != nil {
		return x.BestDescendant
	}
	return 0
}

type DebugPeerResponses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Responses []*DebugPeerResponse `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *DebugPeerResponses) Reset() {
	*x = DebugPeerResponses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_debug_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugPeerResponses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugPeerResponses) ProtoMessage() {}

func (x *DebugPeerResponses) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_debug_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugPeerResponses.ProtoReflect.Descriptor instead.
func (*DebugPeerResponses) Descriptor() ([]byte, []int) {
	return file_consensus_debug_proto_rawDescGZIP(), []int{7}
}

func (x *DebugPeerResponses) GetResponses() []*DebugPeerResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type DebugPeerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Listening addresses know of the peer.
	ListeningAddresses []string `protobuf:"bytes,1,rep,name=listening_addresses,json=listeningAddresses,proto3" json:"listening_addresses,omitempty"`
	// Direction of current connection.
	Direction PeerDirection `protobuf:"varint,2,opt,name=direction,proto3,enum=photon.consensus.PeerDirection" json:"direction,omitempty"`
	// Current connection between host and peer.
	ConnectionState ConnectionState `protobuf:"varint,3,opt,name=connection_state,json=connectionState,proto3,enum=photon.consensus.ConnectionState" json:"connection_state,omitempty"`
	// Peer ID of peer.
	PeerId string `protobuf:"bytes,4,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	// ENR of peer at the current moment.
	Enr string `protobuf:"bytes,5,opt,name=enr,proto3" json:"enr,omitempty"`
	// Peer Info of the peer containing all relevant metadata.
	PeerInfo *DebugPeerResponse_PeerInfo `protobuf:"bytes,6,opt,name=peer_info,json=peerInfo,proto3" json:"peer_info,omitempty"`
	// Peer Status of the peer.
	PeerStatus *Status `protobuf:"bytes,7,opt,name=peer_status,json=peerStatus,proto3" json:"peer_status,omitempty"`
	// Last know update time for peer status.
	LastUpdated uint64 `protobuf:"varint,8,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	// Score Info of the peer.
	ScoreInfo *ScoreInfo `protobuf:"bytes,9,opt,name=score_info,json=scoreInfo,proto3" json:"score_info,omitempty"`
}

func (x *DebugPeerResponse) Reset() {
	*x = DebugPeerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_debug_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugPeerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugPeerResponse) ProtoMessage() {}

func (x *DebugPeerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_debug_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugPeerResponse.ProtoReflect.Descriptor instead.
func (*DebugPeerResponse) Descriptor() ([]byte, []int) {
	return file_consensus_debug_proto_rawDescGZIP(), []int{8}
}

func (x *DebugPeerResponse) GetListeningAddresses() []string {
	if x != nil {
		return x.ListeningAddresses
	}
	return nil
}

func (x *DebugPeerResponse) GetDirection() PeerDirection {
	if x != nil {
		return x.Direction
	}
	return PeerDirection_UNKNOWN
}

func (x *DebugPeerResponse) GetConnectionState() ConnectionState {
	if x != nil {
		return x.ConnectionState
	}
	return ConnectionState_DISCONNECTED
}

func (x *DebugPeerResponse) GetPeerId() string {
	if x != nil {
		return x.PeerId
	}
	return ""
}

func (x *DebugPeerResponse) GetEnr() string {
	if x != nil {
		return x.Enr
	}
	return ""
}

func (x *DebugPeerResponse) GetPeerInfo() *DebugPeerResponse_PeerInfo {
	if x != nil {
		return x.PeerInfo
	}
	return nil
}

func (x *DebugPeerResponse) GetPeerStatus() *Status {
	if x != nil {
		return x.PeerStatus
	}
	return nil
}

func (x *DebugPeerResponse) GetLastUpdated() uint64 {
	if x != nil {
		return x.LastUpdated
	}
	return 0
}

func (x *DebugPeerResponse) GetScoreInfo() *ScoreInfo {
	if x != nil {
		return x.ScoreInfo
	}
	return nil
}

// The Scoring related information of the particular peer.
type ScoreInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OverallScore float32 `protobuf:"fixed32,1,opt,name=overall_score,json=overallScore,proto3" json:"overall_score,omitempty"`
	// Amount of processed blocks provided by
	// the peer.
	ProcessedBlocks uint64 `protobuf:"varint,2,opt,name=processed_blocks,json=processedBlocks,proto3" json:"processed_blocks,omitempty"`
	// Related block provider score.
	BlockProviderScore float32 `protobuf:"fixed32,3,opt,name=block_provider_score,json=blockProviderScore,proto3" json:"block_provider_score,omitempty"`
	// Relevant scores by particular topic.
	TopicScores map[string]*TopicScoreSnapshot `protobuf:"bytes,4,rep,name=topic_scores,json=topicScores,proto3" json:"topic_scores,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Gossip Score for peer.
	GossipScore float32 `protobuf:"fixed32,5,opt,name=gossip_score,json=gossipScore,proto3" json:"gossip_score,omitempty"`
	// Behaviour penalty of peer.
	BehaviourPenalty float32 `protobuf:"fixed32,6,opt,name=behaviour_penalty,json=behaviourPenalty,proto3" json:"behaviour_penalty,omitempty"`
	// Returns the current validation error(if it exists).
	ValidationError string `protobuf:"bytes,7,opt,name=validation_error,json=validationError,proto3" json:"validation_error,omitempty"`
}

func (x *ScoreInfo) Reset() {
	*x = ScoreInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_debug_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScoreInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoreInfo) ProtoMessage() {}

func (x *ScoreInfo) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_debug_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoreInfo.ProtoReflect.Descriptor instead.
func (*ScoreInfo) Descriptor() ([]byte, []int) {
	return file_consensus_debug_proto_rawDescGZIP(), []int{9}
}

func (x *ScoreInfo) GetOverallScore() float32 {
	if x != nil {
		return x.OverallScore
	}
	return 0
}

func (x *ScoreInfo) GetProcessedBlocks() uint64 {
	if x != nil {
		return x.ProcessedBlocks
	}
	return 0
}

func (x *ScoreInfo) GetBlockProviderScore() float32 {
	if x != nil {
		return x.BlockProviderScore
	}
	return 0
}

func (x *ScoreInfo) GetTopicScores() map[string]*TopicScoreSnapshot {
	if x != nil {
		return x.TopicScores
	}
	return nil
}

func (x *ScoreInfo) GetGossipScore() float32 {
	if x != nil {
		return x.GossipScore
	}
	return 0
}

func (x *ScoreInfo) GetBehaviourPenalty() float32 {
	if x != nil {
		return x.BehaviourPenalty
	}
	return 0
}

func (x *ScoreInfo) GetValidationError() string {
	if x != nil {
		return x.ValidationError
	}
	return ""
}

type TopicScoreSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time a peer has spent in the gossip mesh.
	TimeInMesh uint64 `protobuf:"varint,1,opt,name=time_in_mesh,json=timeInMesh,proto3" json:"time_in_mesh,omitempty"`
	// This is the number of first message deliveries in the topic.
	FirstMessageDeliveries float32 `protobuf:"fixed32,2,opt,name=first_message_deliveries,json=firstMessageDeliveries,proto3" json:"first_message_deliveries,omitempty"`
	// This is the number of message deliveries in the mesh, within the MeshMessageDeliveriesWindow of
	// message validation.It effectively tracks first and near-first
	// deliveries, ie a message seen from a mesh peer before we have forwarded it to them.
	MeshMessageDeliveries float32 `protobuf:"fixed32,3,opt,name=mesh_message_deliveries,json=meshMessageDeliveries,proto3" json:"mesh_message_deliveries,omitempty"`
	// This is the number of invalid messages in the topic from the peer.
	InvalidMessageDeliveries float32 `protobuf:"fixed32,4,opt,name=invalid_message_deliveries,json=invalidMessageDeliveries,proto3" json:"invalid_message_deliveries,omitempty"`
}

func (x *TopicScoreSnapshot) Reset() {
	*x = TopicScoreSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_debug_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopicScoreSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopicScoreSnapshot) ProtoMessage() {}

func (x *TopicScoreSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_debug_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopicScoreSnapshot.ProtoReflect.Descriptor instead.
func (*TopicScoreSnapshot) Descriptor() ([]byte, []int) {
	return file_consensus_debug_proto_rawDescGZIP(), []int{10}
}

func (x *TopicScoreSnapshot) GetTimeInMesh() uint64 {
	if x != nil {
		return x.TimeInMesh
	}
	return 0
}

func (x *TopicScoreSnapshot) GetFirstMessageDeliveries() float32 {
	if x != nil {
		return x.FirstMessageDeliveries
	}
	return 0
}

func (x *TopicScoreSnapshot) GetMeshMessageDeliveries() float32 {
	if x != nil {
		return x.MeshMessageDeliveries
	}
	return 0
}

func (x *TopicScoreSnapshot) GetInvalidMessageDeliveries() float32 {
	if x != nil {
		return x.InvalidMessageDeliveries
	}
	return 0
}

// Peer related metadata that is useful for debugging.
type DebugPeerResponse_PeerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metadata of the peer, containing their bitfield
	// and sequence number.
	Metadata *Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// List of protocols the peer supports.
	Protocols []string `protobuf:"bytes,2,rep,name=protocols,proto3" json:"protocols,omitempty"`
	// Number of times peer has been penalised.
	FaultCount uint64 `protobuf:"varint,3,opt,name=fault_count,json=faultCount,proto3" json:"fault_count,omitempty"`
	// Protocol Version peer is running.
	ProtocolVersion string `protobuf:"bytes,4,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"`
	// Agent Version peer is running.
	AgentVersion string `protobuf:"bytes,5,opt,name=agent_version,json=agentVersion,proto3" json:"agent_version,omitempty"`
	// Latency of responses from peer(in ms).
	PeerLatency uint64 `protobuf:"varint,6,opt,name=peer_latency,json=peerLatency,proto3" json:"peer_latency,omitempty"`
}

func (x *DebugPeerResponse_PeerInfo) Reset() {
	*x = DebugPeerResponse_PeerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_debug_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugPeerResponse_PeerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugPeerResponse_PeerInfo) ProtoMessage() {}

func (x *DebugPeerResponse_PeerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_debug_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugPeerResponse_PeerInfo.ProtoReflect.Descriptor instead.
func (*DebugPeerResponse_PeerInfo) Descriptor() ([]byte, []int) {
	return file_consensus_debug_proto_rawDescGZIP(), []int{8, 0}
}

func (x *DebugPeerResponse_PeerInfo) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *DebugPeerResponse_PeerInfo) GetProtocols() []string {
	if x != nil {
		return x.Protocols
	}
	return nil
}

func (x *DebugPeerResponse_PeerInfo) GetFaultCount() uint64 {
	if x != nil {
		return x.FaultCount
	}
	return 0
}

func (x *DebugPeerResponse_PeerInfo) GetProtocolVersion() string {
	if x != nil {
		return x.ProtocolVersion
	}
	return ""
}

func (x *DebugPeerResponse_PeerInfo) GetAgentVersion() string {
	if x != nil {
		return x.AgentVersion
	}
	return ""
}

func (x *DebugPeerResponse_PeerInfo) GetPeerLatency() uint64 {
	if x != nil {
		return x.PeerLatency
	}
	return 0
}

var File_consensus_debug_proto protoreflect.FileDescriptor

var file_consensus_debug_proto_rawDesc = []byte{
	0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2f, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x65, 0x78, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2f, 0x70, 0x32, 0x70, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x44, 0x0a, 0x14, 0x49, 0x6e, 0x63,
	0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1c, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x08, 0x82, 0xb5, 0x18, 0x04, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x22,
	0x35, 0x0a, 0x15, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x53, 0x6c, 0x6f, 0x74,
	0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x22, 0x5f, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x53, 0x6c, 0x6f, 0x74, 0x48, 0x00,
	0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x1f, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x72, 0x6f, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x09, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x6f, 0x6f, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x33, 0x0a, 0x12, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x6f, 0x6f, 0x74, 0x22, 0x81, 0x01, 0x0a,
	0x13, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x27, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x45,
	0x42, 0x55, 0x47, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x52, 0x41, 0x43, 0x45, 0x10, 0x02,
	0x22, 0x90, 0x03, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x41, 0x72, 0x72, 0x61, 0x79, 0x46,
	0x6f, 0x72, 0x6b, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x75, 0x6e, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x70, 0x72, 0x75, 0x6e,
	0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x32, 0x0a, 0x0f, 0x6a, 0x75,
	0x73, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x09, 0x82, 0xb5, 0x18, 0x05, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x52, 0x0e,
	0x6a, 0x75, 0x73, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x32,
	0x0a, 0x0f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x09, 0x82, 0xb5, 0x18, 0x05, 0x45, 0x70, 0x6f,
	0x63, 0x68, 0x52, 0x0e, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x45, 0x70, 0x6f,
	0x63, 0x68, 0x12, 0x4c, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x61, 0x72, 0x72, 0x61,
	0x79, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x12, 0x55, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3b, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x41, 0x72, 0x72, 0x61, 0x79, 0x46,
	0x6f, 0x72, 0x6b, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xa2, 0x02, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x04,
	0x73, 0x6c, 0x6f, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x32, 0x0a, 0x0f, 0x6a, 0x75, 0x73, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x09, 0x82, 0xb5, 0x18, 0x05, 0x45,
	0x70, 0x6f, 0x63, 0x68, 0x52, 0x0e, 0x6a, 0x75, 0x73, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x45,
	0x70, 0x6f, 0x63, 0x68, 0x12, 0x32, 0x0a, 0x0f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x42, 0x09, 0x82,
	0xb5, 0x18, 0x05, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x52, 0x0e, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x65, 0x73, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x61,
	0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x62, 0x65, 0x73, 0x74, 0x44, 0x65,
	0x73, 0x63, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x22, 0x57, 0x0a, 0x12, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x41,
	0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x73, 0x22, 0xd8, 0x05, 0x0a, 0x11, 0x44, 0x65, 0x62, 0x75, 0x67, 0x50, 0x65, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x6c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x70, 0x68,
	0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x50,
	0x65, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x21, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x65, 0x6e, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x72,
	0x12, 0x49, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x50, 0x65, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x0b, 0x70,
	0x65, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x70, 0x65, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6c, 0x61,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x0a, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0xf4, 0x01, 0x0a, 0x08, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x36, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x65, 0x65,
	0x72, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x70, 0x65, 0x65, 0x72, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x22, 0xbf, 0x03, 0x0a,
	0x09, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x76,
	0x65, 0x72, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0c, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x4f, 0x0a, 0x0c,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0b, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x67, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0b, 0x67, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x2b, 0x0a, 0x11, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x75, 0x72, 0x5f, 0x70, 0x65,
	0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x62, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x75, 0x72, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x29, 0x0a,
	0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x64, 0x0a, 0x10, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3a,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe6,
	0x01, 0x0a, 0x12, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e,
	0x5f, 0x6d, 0x65, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x69, 0x6d,
	0x65, 0x49, 0x6e, 0x4d, 0x65, 0x73, 0x68, 0x12, 0x38, 0x0a, 0x18, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x16, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x36, 0x0a, 0x17, 0x6d, 0x65, 0x73, 0x68, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x15, 0x6d, 0x65, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x69, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x18, 0x69,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x69, 0x65, 0x73, 0x32, 0xcc, 0x06, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x12, 0x66, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x2e,
	0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e,
	0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19,
	0x2f, 0x65, 0x74, 0x68, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x6c, 0x0a, 0x08, 0x47, 0x65, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x24, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x52, 0x6f, 0x6f, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x68,
	0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x65,
	0x74, 0x68, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x75, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x4c, 0x6f,
	0x67, 0x67, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x25, 0x2e, 0x70, 0x68, 0x6f,
	0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x4c, 0x6f,
	0x67, 0x67, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1d, 0x22, 0x1b, 0x2f, 0x65, 0x74, 0x68, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x89,
	0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x46, 0x6f, 0x72, 0x6b, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x2e, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x46, 0x6f, 0x72, 0x6b, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x65, 0x74, 0x68,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2f,
	0x66, 0x6f, 0x72, 0x6b, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x6c, 0x0a, 0x09, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x65, 0x65, 0x72, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x24, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f,
	0x65, 0x74, 0x68, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x12, 0x6f, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x50,
	0x65, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x50, 0x65, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12,
	0x18, 0x2f, 0x65, 0x74, 0x68, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x12, 0x8a, 0x01, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x26,
	0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x2e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x65, 0x74, 0x68, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2f, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x96, 0x01, 0x0a, 0x1e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x42, 0x0a, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x3b, 0x70, 0x62, 0x63, 0xaa, 0x02, 0x16,
	0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0xca, 0x02, 0x16, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x5c,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5c, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_consensus_debug_proto_rawDescOnce sync.Once
	file_consensus_debug_proto_rawDescData = file_consensus_debug_proto_rawDesc
)

func file_consensus_debug_proto_rawDescGZIP() []byte {
	file_consensus_debug_proto_rawDescOnce.Do(func() {
		file_consensus_debug_proto_rawDescData = protoimpl.X.CompressGZIP(file_consensus_debug_proto_rawDescData)
	})
	return file_consensus_debug_proto_rawDescData
}

var file_consensus_debug_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_consensus_debug_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_consensus_debug_proto_goTypes = []interface{}{
	(LoggingLevelRequest_Level)(0),       // 0: photon.consensus.LoggingLevelRequest.Level
	(*InclusionSlotRequest)(nil),         // 1: photon.consensus.InclusionSlotRequest
	(*InclusionSlotResponse)(nil),        // 2: photon.consensus.InclusionSlotResponse
	(*StateRequest)(nil),                 // 3: photon.consensus.StateRequest
	(*BlockRequestByRoot)(nil),           // 4: photon.consensus.BlockRequestByRoot
	(*LoggingLevelRequest)(nil),          // 5: photon.consensus.LoggingLevelRequest
	(*ProtoArrayForkChoiceResponse)(nil), // 6: photon.consensus.ProtoArrayForkChoiceResponse
	(*ProtoArrayNode)(nil),               // 7: photon.consensus.ProtoArrayNode
	(*DebugPeerResponses)(nil),           // 8: photon.consensus.DebugPeerResponses
	(*DebugPeerResponse)(nil),            // 9: photon.consensus.DebugPeerResponse
	(*ScoreInfo)(nil),                    // 10: photon.consensus.ScoreInfo
	(*TopicScoreSnapshot)(nil),           // 11: photon.consensus.TopicScoreSnapshot
	nil,                                  // 12: photon.consensus.ProtoArrayForkChoiceResponse.IndicesEntry
	(*DebugPeerResponse_PeerInfo)(nil),   // 13: photon.consensus.DebugPeerResponse.PeerInfo
	nil,                                  // 14: photon.consensus.ScoreInfo.TopicScoresEntry
	(PeerDirection)(0),                   // 15: photon.consensus.PeerDirection
	(ConnectionState)(0),                 // 16: photon.consensus.ConnectionState
	(*Status)(nil),                       // 17: photon.consensus.Status
	(*Metadata)(nil),                     // 18: photon.consensus.Metadata
	(*emptypb.Empty)(nil),                // 19: google.protobuf.Empty
	(*PeerRequest)(nil),                  // 20: photon.consensus.PeerRequest
	(*State)(nil),                        // 21: photon.consensus.State
	(*Block)(nil),                        // 22: photon.consensus.Block
}
var file_consensus_debug_proto_depIdxs = []int32{
	0,  // 0: photon.consensus.LoggingLevelRequest.level:type_name -> photon.consensus.LoggingLevelRequest.Level
	7,  // 1: photon.consensus.ProtoArrayForkChoiceResponse.proto_array_nodes:type_name -> photon.consensus.ProtoArrayNode
	12, // 2: photon.consensus.ProtoArrayForkChoiceResponse.indices:type_name -> photon.consensus.ProtoArrayForkChoiceResponse.IndicesEntry
	9,  // 3: photon.consensus.DebugPeerResponses.responses:type_name -> photon.consensus.DebugPeerResponse
	15, // 4: photon.consensus.DebugPeerResponse.direction:type_name -> photon.consensus.PeerDirection
	16, // 5: photon.consensus.DebugPeerResponse.connection_state:type_name -> photon.consensus.ConnectionState
	13, // 6: photon.consensus.DebugPeerResponse.peer_info:type_name -> photon.consensus.DebugPeerResponse.PeerInfo
	17, // 7: photon.consensus.DebugPeerResponse.peer_status:type_name -> photon.consensus.Status
	10, // 8: photon.consensus.DebugPeerResponse.score_info:type_name -> photon.consensus.ScoreInfo
	14, // 9: photon.consensus.ScoreInfo.topic_scores:type_name -> photon.consensus.ScoreInfo.TopicScoresEntry
	18, // 10: photon.consensus.DebugPeerResponse.PeerInfo.metadata:type_name -> photon.consensus.Metadata
	11, // 11: photon.consensus.ScoreInfo.TopicScoresEntry.value:type_name -> photon.consensus.TopicScoreSnapshot
	3,  // 12: photon.consensus.Debug.GetState:input_type -> photon.consensus.StateRequest
	4,  // 13: photon.consensus.Debug.GetBlock:input_type -> photon.consensus.BlockRequestByRoot
	5,  // 14: photon.consensus.Debug.SetLoggingLevel:input_type -> photon.consensus.LoggingLevelRequest
	19, // 15: photon.consensus.Debug.GetProtoArrayForkChoice:input_type -> google.protobuf.Empty
	19, // 16: photon.consensus.Debug.ListPeers:input_type -> google.protobuf.Empty
	20, // 17: photon.consensus.Debug.GetPeer:input_type -> photon.consensus.PeerRequest
	1,  // 18: photon.consensus.Debug.GetInclusionSlot:input_type -> photon.consensus.InclusionSlotRequest
	21, // 19: photon.consensus.Debug.GetState:output_type -> photon.consensus.State
	22, // 20: photon.consensus.Debug.GetBlock:output_type -> photon.consensus.Block
	19, // 21: photon.consensus.Debug.SetLoggingLevel:output_type -> google.protobuf.Empty
	6,  // 22: photon.consensus.Debug.GetProtoArrayForkChoice:output_type -> photon.consensus.ProtoArrayForkChoiceResponse
	8,  // 23: photon.consensus.Debug.ListPeers:output_type -> photon.consensus.DebugPeerResponses
	9,  // 24: photon.consensus.Debug.GetPeer:output_type -> photon.consensus.DebugPeerResponse
	2,  // 25: photon.consensus.Debug.GetInclusionSlot:output_type -> photon.consensus.InclusionSlotResponse
	19, // [19:26] is the sub-list for method output_type
	12, // [12:19] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_consensus_debug_proto_init() }
func file_consensus_debug_proto_init() {
	if File_consensus_debug_proto != nil {
		return
	}
	file_consensus_state_proto_init()
	file_consensus_block_proto_init()
	file_consensus_info_proto_init()
	file_consensus_p2p_messages_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_consensus_debug_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InclusionSlotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_debug_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InclusionSlotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_debug_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_debug_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockRequestByRoot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_debug_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoggingLevelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_debug_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoArrayForkChoiceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_debug_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoArrayNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_debug_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebugPeerResponses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_debug_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebugPeerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_debug_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScoreInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_debug_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopicScoreSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_debug_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebugPeerResponse_PeerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_consensus_debug_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*StateRequest_Slot)(nil),
		(*StateRequest_BlockRoot)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_consensus_debug_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_consensus_debug_proto_goTypes,
		DependencyIndexes: file_consensus_debug_proto_depIdxs,
		EnumInfos:         file_consensus_debug_proto_enumTypes,
		MessageInfos:      file_consensus_debug_proto_msgTypes,
	}.Build()
	File_consensus_debug_proto = out.File
	file_consensus_debug_proto_rawDesc = nil
	file_consensus_debug_proto_goTypes = nil
	file_consensus_debug_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DebugClient is the client API for Debug service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DebugClient interface {
	// Returns a state by filter criteria from the node.
	GetState(ctx context.Context, in *StateRequest, opts ...grpc.CallOption) (*State, error)
	// Returns a state by filter criteria from the node.
	GetBlock(ctx context.Context, in *BlockRequestByRoot, opts ...grpc.CallOption) (*Block, error)
	// SetLoggingLevel sets the log-level of the node programmatically.
	SetLoggingLevel(ctx context.Context, in *LoggingLevelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Returns a proto array fork choice object from the node.
	GetProtoArrayForkChoice(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ProtoArrayForkChoiceResponse, error)
	// Returns all the related data for every peer tracked by the host node.
	ListPeers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DebugPeerResponses, error)
	// Returns requested peer with specified peer id if it exists.
	GetPeer(ctx context.Context, in *PeerRequest, opts ...grpc.CallOption) (*DebugPeerResponse, error)
	// Returns the inclusion slot of a given attester id and slot.
	GetInclusionSlot(ctx context.Context, in *InclusionSlotRequest, opts ...grpc.CallOption) (*InclusionSlotResponse, error)
}

type debugClient struct {
	cc grpc.ClientConnInterface
}

func NewDebugClient(cc grpc.ClientConnInterface) DebugClient {
	return &debugClient{cc}
}

func (c *debugClient) GetState(ctx context.Context, in *StateRequest, opts ...grpc.CallOption) (*State, error) {
	out := new(State)
	err := c.cc.Invoke(ctx, "/photon.consensus.Debug/GetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) GetBlock(ctx context.Context, in *BlockRequestByRoot, opts ...grpc.CallOption) (*Block, error) {
	out := new(Block)
	err := c.cc.Invoke(ctx, "/photon.consensus.Debug/GetBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) SetLoggingLevel(ctx context.Context, in *LoggingLevelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/photon.consensus.Debug/SetLoggingLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) GetProtoArrayForkChoice(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ProtoArrayForkChoiceResponse, error) {
	out := new(ProtoArrayForkChoiceResponse)
	err := c.cc.Invoke(ctx, "/photon.consensus.Debug/GetProtoArrayForkChoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) ListPeers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DebugPeerResponses, error) {
	out := new(DebugPeerResponses)
	err := c.cc.Invoke(ctx, "/photon.consensus.Debug/ListPeers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) GetPeer(ctx context.Context, in *PeerRequest, opts ...grpc.CallOption) (*DebugPeerResponse, error) {
	out := new(DebugPeerResponse)
	err := c.cc.Invoke(ctx, "/photon.consensus.Debug/GetPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) GetInclusionSlot(ctx context.Context, in *InclusionSlotRequest, opts ...grpc.CallOption) (*InclusionSlotResponse, error) {
	out := new(InclusionSlotResponse)
	err := c.cc.Invoke(ctx, "/photon.consensus.Debug/GetInclusionSlot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DebugServer is the server API for Debug service.
type DebugServer interface {
	// Returns a state by filter criteria from the node.
	GetState(context.Context, *StateRequest) (*State, error)
	// Returns a state by filter criteria from the node.
	GetBlock(context.Context, *BlockRequestByRoot) (*Block, error)
	// SetLoggingLevel sets the log-level of the node programmatically.
	SetLoggingLevel(context.Context, *LoggingLevelRequest) (*emptypb.Empty, error)
	// Returns a proto array fork choice object from the node.
	GetProtoArrayForkChoice(context.Context, *emptypb.Empty) (*ProtoArrayForkChoiceResponse, error)
	// Returns all the related data for every peer tracked by the host node.
	ListPeers(context.Context, *emptypb.Empty) (*DebugPeerResponses, error)
	// Returns requested peer with specified peer id if it exists.
	GetPeer(context.Context, *PeerRequest) (*DebugPeerResponse, error)
	// Returns the inclusion slot of a given attester id and slot.
	GetInclusionSlot(context.Context, *InclusionSlotRequest) (*InclusionSlotResponse, error)
}

// UnimplementedDebugServer can be embedded to have forward compatible implementations.
type UnimplementedDebugServer struct {
}

func (*UnimplementedDebugServer) GetState(context.Context, *StateRequest) (*State, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (*UnimplementedDebugServer) GetBlock(context.Context, *BlockRequestByRoot) (*Block, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlock not implemented")
}
func (*UnimplementedDebugServer) SetLoggingLevel(context.Context, *LoggingLevelRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLoggingLevel not implemented")
}
func (*UnimplementedDebugServer) GetProtoArrayForkChoice(context.Context, *emptypb.Empty) (*ProtoArrayForkChoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProtoArrayForkChoice not implemented")
}
func (*UnimplementedDebugServer) ListPeers(context.Context, *emptypb.Empty) (*DebugPeerResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPeers not implemented")
}
func (*UnimplementedDebugServer) GetPeer(context.Context, *PeerRequest) (*DebugPeerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPeer not implemented")
}
func (*UnimplementedDebugServer) GetInclusionSlot(context.Context, *InclusionSlotRequest) (*InclusionSlotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInclusionSlot not implemented")
}

func RegisterDebugServer(s *grpc.Server, srv DebugServer) {
	s.RegisterService(&_Debug_serviceDesc, srv)
}

func _Debug_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photon.consensus.Debug/GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).GetState(ctx, req.(*StateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockRequestByRoot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photon.consensus.Debug/GetBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).GetBlock(ctx, req.(*BlockRequestByRoot))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_SetLoggingLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoggingLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).SetLoggingLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photon.consensus.Debug/SetLoggingLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).SetLoggingLevel(ctx, req.(*LoggingLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_GetProtoArrayForkChoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).GetProtoArrayForkChoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photon.consensus.Debug/GetProtoArrayForkChoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).GetProtoArrayForkChoice(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_ListPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).ListPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photon.consensus.Debug/ListPeers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).ListPeers(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_GetPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).GetPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photon.consensus.Debug/GetPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).GetPeer(ctx, req.(*PeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_GetInclusionSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InclusionSlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).GetInclusionSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photon.consensus.Debug/GetInclusionSlot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).GetInclusionSlot(ctx, req.(*InclusionSlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Debug_serviceDesc = grpc.ServiceDesc{
	ServiceName: "photon.consensus.Debug",
	HandlerType: (*DebugServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetState",
			Handler:    _Debug_GetState_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _Debug_GetBlock_Handler,
		},
		{
			MethodName: "SetLoggingLevel",
			Handler:    _Debug_SetLoggingLevel_Handler,
		},
		{
			MethodName: "GetProtoArrayForkChoice",
			Handler:    _Debug_GetProtoArrayForkChoice_Handler,
		},
		{
			MethodName: "ListPeers",
			Handler:    _Debug_ListPeers_Handler,
		},
		{
			MethodName: "GetPeer",
			Handler:    _Debug_GetPeer_Handler,
		},
		{
			MethodName: "GetInclusionSlot",
			Handler:    _Debug_GetInclusionSlot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "consensus/debug.proto",
}

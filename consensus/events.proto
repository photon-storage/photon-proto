syntax = "proto3";

package photon.consensus;

import "google/protobuf/descriptor.proto";

import "ext/options.proto";

option csharp_namespace = "photon.proto.consensus";
option go_package = "github.com/photon-storage/photon-proto/consensus;pbc";
option java_multiple_files = true;
option java_outer_classname = "EventsProto";
option java_package = "storage.photon.proto.consensus";
option php_namespace = "photon\\proto\\consensus";


message EventHead {
  // Slot of the new chain head.
  uint64 slot = 1 [(photon.ext.cast_type) = "Slot"];

  // Block root of the new chain head.
  bytes block = 2 [(photon.ext.ssz_size) = "32"];

  // State root of the new chain head.
  bytes state = 3 [(photon.ext.ssz_size) = "32"];

  // Whether or not the new chain head is at an epoch transition.
  bool epoch_transition = 4;
}

message EventChainReorg {
  // The slot of the observed reorg.
  uint64 slot = 1 [(photon.ext.cast_type) = "Slot"];

  // Depth of the reorg in slots.
  uint64 depth = 2;

  // Block root of the old head.
  bytes old_head_block = 3 [(photon.ext.ssz_size) = "32"];

  // Block root of the new head.
  bytes new_head_block = 4 [(photon.ext.ssz_size) = "32"];

  // State root of the old state.
  bytes old_head_state = 5 [(photon.ext.ssz_size) = "32"];

  // State root of the new state.
  bytes new_head_state = 6 [(photon.ext.ssz_size) = "32"];

  // Epoch of the observed reorg.
  uint64 epoch = 7 [(photon.ext.cast_type) = "Epoch"];
}

message EventFinalizedCheckpoint {
  // Block root of the finalized checkpoint.
  bytes block = 1 [(photon.ext.ssz_size) = "32"];

  // State root of the finalized checkpoint.
  bytes state = 2 [(photon.ext.ssz_size) = "32"];

  // Epoch the checkpoint references.
  uint64 epoch = 3 [(photon.ext.cast_type) = "Epoch"];
}

syntax = "proto3";

package photon.consensus;

import "ext/options.proto";
import "consensus/attestation.proto";

option csharp_namespace = "photon.proto.consensus";
option go_package = "github.com/photon-storage/photon-proto/consensus;pbc";
option java_multiple_files = true;
option java_outer_classname = "ValidatorProto";
option java_package = "storage.photon.proto.consensus";
option php_namespace = "photon\\proto\\consensus";


message ValidatorActivationRequest {
    // A list of 48 byte validator public keys.
    repeated bytes public_keys = 1 [(photon.ext.ssz_size) = "?,48"];
}

message ValidatorActivationResponse {
    message Status {
        // A 48 byte validator public key.
        bytes public_key = 1;

        // A wrapper representing a validator's status object.
        ValidatorStatusResponse status = 2;

        // The validators index in the state.
        uint64 index = 3 [(photon.ext.cast_type) = "ValidatorIndex"];
    }
    // A list of validator statuses mapped 1-to-1 with the public keys
    // in the request.
    repeated Status statuses = 1;
}

message ChainStartResponse {
    // A boolean specifying whether or not the chain has started.
    bool started = 1;

    // The genesis time of the chain.
    uint64 genesis_time = 2;

    // 32 byte hash tree root of the genesis validator set.
    bytes genesis_identifier = 3 [(photon.ext.ssz_size) = "32"];
}

message SyncedResponse {
    // A boolean specifying whether or not the node is synced and ready for the validator.
    bool synced = 1;

    // The genesis time of the chain.
    uint64 genesis_time = 2;
}

message ValidatorIndexRequest {
    // A 48 byte validator public key.
    bytes public_key = 1 [(photon.ext.ssz_size) = "48"];
}

message ValidatorIndexResponse {
    // The validator's index in the chain state's validator registry.
    uint64 index = 1  [(photon.ext.cast_type) = "ValidatorIndex"];
}

message ValidatorStatusRequest {
    // A 48 byte validator public key.
    bytes public_key = 1 [(photon.ext.ssz_size) = "48"];
}

enum ValidatorStatus {
    VALIDATOR_UNKNOWN_STATUS = 0;
    VALIDATOR_PENDING = 1;
    VALIDATOR_ACTIVE = 2;
    VALIDATOR_EXITING = 3;
    VALIDATOR_SLASHING = 4;
    VALIDATOR_EXITED = 5;
}

message ValidatorStatusResponse {
    // The corresponding validator status.
    ValidatorStatus status = 1;

    // The epoch in the chain in which the validator
    // is determined as active.
    uint64 activation_epoch = 2 [(photon.ext.cast_type) = "Epoch"];

    // The position in the activation queue of pending validators.
    uint64 position_in_activation_queue = 3;
}

message MultipleValidatorStatusRequest {
    // A list of 48 byte validator public keys.
    repeated bytes public_keys = 1 [(photon.ext.ssz_size) = "?,48"];
    // A list of validator indices.
    repeated int64 indices = 2;
}

message MultipleValidatorStatusResponse {
    // A list of 48 byte validator public keys.
    repeated bytes public_keys = 1 [(photon.ext.ssz_size) = "?,48"];
    // A list of ValidatorStatusResponses mapped 1-to-1 with the public keys.
    repeated ValidatorStatusResponse statuses = 2;
    // A list of validator indices.
    repeated uint64 indices = 3  [(photon.ext.cast_type) = "ValidatorIndex"];
}

message DutiesRequest {
    // Epoch at which validators should perform their duties.
    uint64 epoch = 1 [(photon.ext.cast_type) = "Epoch"];

    // Array of byte encoded BLS public keys.
    repeated bytes public_keys = 2 [(photon.ext.ssz_size) = "?,48"];
}

message DutiesResponse {
    repeated Duty duties = 1 [deprecated = true];

    repeated Duty current_epoch_duties = 2;

    repeated Duty next_epoch_duties = 3;

    message Duty {
        // The committee a validator is assigned to.
        repeated uint64 committee = 1 [(photon.ext.cast_type) = "ValidatorIndex"];

        // The index into the committee where the validator belongs in.
        uint64 committee_index = 2  [(photon.ext.cast_type) = "CommitteeIndex"];

        // Slot at which a validator must attest.
        uint64 attester_slot = 3 [(photon.ext.cast_type) = "Slot"];

        // Slots at which a validator must propose a chain block.
        repeated uint64 proposer_slots = 4 [(photon.ext.cast_type) = "Slot"];

        // 48 byte BLS public key for the validator who's assigned to perform a duty.
        bytes public_key = 5 [(photon.ext.ssz_size) = "48"];

        // The current status of the validator assigned to perform the duty.
        ValidatorStatus status = 6;

        // The index of the validator in the state.
        uint64 validator_index = 7  [(photon.ext.cast_type) = "ValidatorIndex"];
    }
}

message BlockRequest {
    // Slot for which the block should be proposed.
    uint64 slot = 1 [(photon.ext.cast_type) = "Slot"];

    // Validator's 32 byte randao reveal secret of the current epoch.
    bytes randao_reveal = 2 [(photon.ext.ssz_size) = "48"];

    // Validator's 32 byte graffiti message for the new block.
    bytes graffiti = 3 [(photon.ext.ssz_size) = "32"];

}

message ProposeResponse {
    // The block root of the successfully proposed block.
    bytes block_root = 1 [(photon.ext.ssz_size) = "32"];
}

message AttestationDataRequest {
    // Slot for which the attestation should be created.
    uint64 slot = 1 [(photon.ext.cast_type) = "Slot"];

    // Committee index the attestation should be created for.
    uint64 committee_index = 2  [(photon.ext.cast_type) = "CommitteeIndex"];
}

message AttestResponse {
    // The root of the attestation data successfully submitted to the node.
    bytes attestation_data_root = 1 [(photon.ext.ssz_size) = "32"];
}

message AggregateSelectionRequest {
    // Slot for which the aggregation request applies.
    uint64 slot = 1 [(photon.ext.cast_type) = "Slot"];
    // Committee index of the validator at the given slot.
    uint64 committee_index = 2  [(photon.ext.cast_type) = "CommitteeIndex"];
    // 48 byte public key of the validator.
    bytes public_key = 3 [(photon.ext.ssz_size) = "48"];
    // 96 byte signature of the validator on the slot. This is used as proof that the validator is
    // an aggregator for the given slot.
    bytes slot_signature = 4 [(photon.ext.ssz_size) = "96"];
}

message AggregateSelectionResponse {
    // The aggregate and proof message without the signature.
    AggregateAttestationAndProof aggregate_and_proof = 1;
}

message SignedAggregateSubmitRequest {
    // The signed aggregate and proof message with the signature.
    SignedAggregateAttestationAndProof signed_aggregate_and_proof = 1;
}

message SignedAggregateSubmitResponse {
    // The 32 byte hash tree root of the aggregated attestation data.
    bytes attestation_data_root = 1  [(photon.ext.ssz_size) = "32"];
}

message CommitteeSubnetsSubscribeRequest {
    // A list of intended slots to subscribe.
    repeated uint64 slots = 1 [(photon.ext.cast_type) = "Slot"];
    // A list of intended committee ids to subscribe. It is mapped 1-to-1 with the slots
    repeated uint64 committee_ids = 2 [(photon.ext.cast_type) = "CommitteeIndex"];
    // Whether to subscribe as an aggregator or by default attester.
    // It is mapped 1-to-1 with the slots and committee ids.
    // Subscribe as an aggregator means to join the subnet.
    // Subscribe as an attester means finding persistent peers on the subnet to be able to publish attestations.
    repeated bool is_aggregator = 3;
}

// A photon chain validator.
message Validator {
    // 48 byte BLS public key used for the validator's activities.
    bytes public_key = 1 [(photon.ext.ssz_size) = "48"];

    // Validator staking balance.
    uint64 balance = 2;

    // Whether or not the validator has been slashed.
    bool slashed = 3;

    // Epoch when the validator became eligible for activation. This field may
    // be zero if the validator was present in the Ethereum proof of stake genesis. This
    // field is FAR_FUTURE_EPOCH if the validator has not been activated.
    uint64 activation_eligibility_epoch = 4 [(photon.ext.cast_type) = "Epoch"];

    // Epoch when the validator was activated. This field may be zero if the
    // validator was present in the Ethereum proof of stake genesis. This field is
    // FAR_FUTURE_EPOCH if the validator has not been activated.
    uint64 activation_epoch = 5 [(photon.ext.cast_type) = "Epoch"];

    // Epoch when the validator was exited. This field is FAR_FUTURE_EPOCH if
    // the validator has not exited.
    // FAR_FUTURE_EPOCH is a constant defined by the official Ethereum Beacon Chain specification:
    // https://github.com/ethereum/consensus-specs/blob/v0.9.2/specs/core/0_beacon-chain.md#constants
    uint64 exit_epoch = 6 [(photon.ext.cast_type) = "Epoch"];

    // Epoch when the validator is eligible to withdraw their funds. This field
    // is FAR_FUTURE_EPOCH if the validator has not exited.
    // FAR_FUTURE_EPOCH is a constant defined by the official Ethereum Beacon Chain specification:
    // https://github.com/ethereum/consensus-specs/blob/v0.9.2/specs/core/0_beacon-chain.md#constants
    uint64 withdrawable_epoch = 7 [(photon.ext.cast_type) = "Epoch"];
}

// ValidatorParticipation stores participation metrics during a given epoch.
message ValidatorParticipation {
    // Percentage of validator participation in the given epoch. This field
    // contains a value between 0 and 1.
    float global_participation_rate = 1  [deprecated = true];

    // The total amount of ether, in gwei, that has been used in voting.
    uint64 voted_ether = 2 [deprecated = true];

    // The total amount of ether, in gwei, that is eligible for voting.
    uint64 eligible_ether = 3 [deprecated = true];

    // Total staked gwei that was active (i.e. eligible to vote) during the current epoch.
    uint64 current_epoch_active_gwei = 4;
    // Total staked gwei that had attestations included in a block during the current epoch,
    // attestations by the same validator do not increase this figure.
    uint64 current_epoch_attesting_gwei = 5;
    // Total staked gwei that attested to the majority-elected Casper FFG target epoch during the current epoch.
    uint64 current_epoch_target_attesting_gwei = 6;
    // Same as current_epoch_active_gwei but for previous epoch.
    uint64 previous_epoch_active_gwei = 7;
    // Same as current_epoch_attesting_gwei but for previous epoch.
    uint64 previous_epoch_attesting_gwei = 8;
    // Same as current_epoch_target_attesting_gwei but for previous epoch.
    uint64 previous_epoch_target_attesting_gwei = 9;
    // Total staked gwei that attested to a head block that is in the canonical chain.
    uint64 previous_epoch_head_attesting_gwei = 10;
}

// ValidatorInfo gives information about the state of a validator at a certain epoch.
message ValidatorInfo {
    // The validator's 48 byte BLS public key.
    bytes public_key = 1;

    // The validator's index in the state.
    uint64 index = 2 [(photon.ext.cast_type) = "ValidatorIndex"];

    // The epoch for which the information pertains.
    uint64 epoch = 3 [(photon.ext.cast_type) = "Epoch"];

    // The validator's current status.
    ValidatorStatus status = 4;

    // The unix timestamp when the validator enters the next state.
    // This could be in the past.  Some values depend on chain operation and so will vary from epoch to epoch.
    // Specific times for each state are as follows:
    // - state == PENDING: time at which validator will be activated (variable).
    // - state == ACTIVE: no value (next transition depends on user and network actions).
    // - state == EXITING: time at which validator will exit.
    // - state == SLASHING: time at which validator will exit.
    // - state == EXITED: time at which validator funds will be withdrawable.
    uint64 transition_timestamp = 5;

    // The validator's current balance in GWei.
    uint64 balance = 6;

    // The validator's current effective balance in GWei.
    // Only valid for states ACTIVE, EXITING, SLASHING.
    uint64 effective_balance = 7;
}

// DoppelGangerRequest represents the request sent by the validator in order to determine
// if there is any duplicate instance of it running in the network.
message DoppelGangerRequest {
    repeated ValidatorRequest validator_requests = 1;

    // ValidatorRequest data type which represents a request for each validator.
    message ValidatorRequest {
        // The validator's 48 byte BLS public key.
        bytes public_key = 1 [(photon.ext.ssz_size) = "48"];
        // The validator's last recorded epoch to attest.
        uint64 epoch = 3 [(photon.ext.cast_type) = "Epoch"];
        // The validator's last recorded signed root.
        bytes signed_root = 2 [(photon.ext.ssz_size) = "32"];
    }
}

// DoppelGangerResponse is the response payload sent by the node
// after it has checked for all duplicate keys in the network.
message DoppelGangerResponse {
    message ValidatorResponse {
        // The validator's 48 byte BLS public key.
        bytes public_key = 1 [(photon.ext.ssz_size) = "48"];
        // Whether a duplicate of the validator exists.
        bool duplicate_exists = 2;
    }
    repeated ValidatorResponse responses = 1;
}

// Request to only return blocks that is verified by the node.
message StreamBlocksRequest {
    bool verified_only = 1;
}
